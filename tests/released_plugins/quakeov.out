public PlVers:__version =
{
	version = 5,
	filevers = "1.7.2",
	date = "10/03/2015",
	time = "11:54:33"
};
new Float:NULL_VECTOR[3];
new String:NULL_STRING[4];
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
new MaxClients;
public Extension:__ext_sdktools =
{
	name = "SDKTools",
	file = "sdktools.ext",
	autoload = 1,
	required = 1,
};
public Extension:__ext_sdkhooks =
{
	name = "SDKHooks",
	file = "sdkhooks.ext",
	autoload = 1,
	required = 1,
};
public Extension:__ext_cprefs =
{
	name = "Client Preferences",
	file = "clientprefs.ext",
	autoload = 1,
	required = 1,
};
new bool:g_bCheckedEngine;
new bool:g_bNeedsFakePrecache;
new Handle:g_hQuakeov_enabled;
new bool:g_bQuakeov_enabled;
new g_hPoints[66];
new Handle:g_hClientCookieOverlays;
new g_bClientPrefOverlays[66];
new Handle:g_hClientCookieSounds;
new g_bClientPrefSounds[66];
new String:SOUNDS_PACK[18][] =
{
	"quake/standard/perfect.mp3",
	"quake/standard/humiliation.mp3",
	"quake/standard/headshot.mp3",
	"quake/standard/humiliation.mp3",
	"quake/standard/doublekill.mp3",
	"quake/standard/triplekill.mp3",
	"quake/standard/dominating.mp3",
	"quake/standard/combowhore.mp3",
	"quake/standard/rampage.mp3",
	"quake/standard/killingspree.mp3",
	"quake/standard/monsterkill.mp3",
	"quake/standard/unstoppable.mp3",
	"quake/standard/ultrakill.mp3",
	"quake/standard/godlike.mp3",
	"quake/standard/wickedsick.mp3",
	"quake/standard/impressive.mp3",
	"quake/standard/ludicrouskill.mp3",
	"quake/standard/holyshit.mp3"
};
public Plugin:myinfo =
{
	name = "[CSGO] QuakeSounds Overlays edition",
	description = "quakesounds overlays edition",
	author = "TonyBaretta",
	version = "1.0",
	url = "http://www.wantedgov.it"
};
public __ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.GetNumBytesLeft");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

bool:StrEqual(String:str1[], String:str2[], bool:caseSensitive)
{
	return strcmp(str1, str2, caseSensitive) == 0;
}

AddFileToDownloadsTable(String:filename[])
{
	static table = -1;
	if (table == -1)
	{
		table = FindStringTable("downloadables");
	}
	new bool:save = LockStringTables(false);
	AddToStringTable(table, filename, "", -1);
	LockStringTables(save);
	return 0;
}

EmitSoundCheckEngineVersion()
{
	if (g_bCheckedEngine)
	{
		return 0;
	}
	new EngineVersion:engVersion = GetEngineVersion();
	new var1;
	if (engVersion == EngineVersion:12 || engVersion == EngineVersion:14)
	{
		g_bNeedsFakePrecache = true;
	}
	g_bCheckedEngine = true;
	return 0;
}

bool:FakePrecacheSoundEx(String:szPath[])
{
	decl String:szPathStar[256];
	Format(szPathStar, 256, "*%s", szPath);
	AddToStringTable(FindStringTable("soundprecache"), szPathStar, "", -1);
	return true;
}

bool:PrecacheSoundAny(String:szPath[], bool:preload)
{
	EmitSoundCheckEngineVersion();
	if (g_bNeedsFakePrecache)
	{
		return FakePrecacheSoundEx(szPath);
	}
	return PrecacheSound(szPath, preload);
}

EmitSoundAny(clients[], numClients, String:sample[], entity, channel, level, flags, Float:volume, pitch, speakerentity, Float:origin[3], Float:dir[3], bool:updatePos, Float:soundtime)
{
	EmitSoundCheckEngineVersion();
	decl String:szSound[256];
	if (g_bNeedsFakePrecache)
	{
		Format(szSound, 256, "*%s", sample);
	}
	else
	{
		strcopy(szSound, 256, sample);
	}
	EmitSound(clients, numClients, szSound, entity, channel, level, flags, volume, pitch, speakerentity, origin, dir, updatePos, soundtime);
	return 0;
}

EmitSoundToClientAny(client, String:sample[], entity, channel, level, flags, Float:volume, pitch, speakerentity, Float:origin[3], Float:dir[3], bool:updatePos, Float:soundtime)
{
	new clients[1];
	clients[0] = client;
	new var1;
	if (entity == -2)
	{
		var1 = client;
	}
	else
	{
		var1 = entity;
	}
	entity = var1;
	EmitSoundAny(clients, 1, sample, entity, channel, level, flags, volume, pitch, speakerentity, origin, dir, updatePos, soundtime);
	return 0;
}

public void:OnMapStart()
{
	decl String:file[256];
	BuildPath(PathType:0, file, 255, "configs/quakeov.ini");
	new Handle:fileh = OpenFile(file, "r", false, "GAME");
	if (fileh)
	{
		decl String:buffer[256];
		decl String:buffer_full[256];
		while (ReadFileLine(fileh, buffer, 256))
		{
			TrimString(buffer);
			new var1;
			if (StrContains(buffer, "//", true) == -1 && !StrEqual(buffer, "", true))
			{
				PrintToServer("Reading overlay_downloads line :: %s", buffer);
				Format(buffer_full, 256, "%s", buffer);
				if (FileExists(buffer_full, false, "GAME"))
				{
					PrintToServer("Precaching %s", buffer);
					PrecacheDecal(buffer, true);
					AddFileToDownloadsTable(buffer_full);
				}
			}
		}
	}
	new i;
	while (i < 18)
	{
		PrecacheSoundAny(SOUNDS_PACK[i], false);
		i++;
	}
	return void:0;
}

public void:OnPluginStart()
{
	CreateConVar("quakesoundov", "1.0", "[CSGO] Hs Impact Effect", 270656, false, 0.0, false, 0.0);
	HookEvent("player_death", PlayerDeath, EventHookMode:1);
	g_hQuakeov_enabled = CreateConVar("qsov_enabled", "1", "enable quake sounds plugin", 0, false, 0.0, false, 0.0);
	g_bQuakeov_enabled = GetConVarBool(g_hQuakeov_enabled);
	g_hClientCookieOverlays = RegClientCookie("QS Overlays", "set overlays on / off ", CookieAccess:2);
	g_hClientCookieSounds = RegClientCookie("QS Overlays sounds", "set sounds on/off", CookieAccess:2);
	SetCookieMenuItem(QSPrefSelected, any:0, "QS Prefs");
	return void:0;
}

public void:OnClientPutInServer(client)
{
	LoadClientCookiesFor(client);
	CreateTimer(25.0, WelcomeVersion, client, 0);
	return void:0;
}

public void:OnClientDisconnect(client)
{
	g_hPoints[client] = 0;
	return void:0;
}

public LoadClientCookiesFor(client)
{
	new String:buffer[8];
	GetClientCookie(client, g_hClientCookieOverlays, buffer, 5);
	if (!StrEqual(buffer, "", true))
	{
		g_bClientPrefOverlays[client] = StringToInt(buffer, 10);
	}
	if (StrEqual(buffer, "", true))
	{
		g_bClientPrefOverlays[client] = 1;
	}
	GetClientCookie(client, g_hClientCookieSounds, buffer, 5);
	if (!StrEqual(buffer, "", true))
	{
		g_bClientPrefSounds[client] = StringToInt(buffer, 10);
	}
	if (StrEqual(buffer, "", true))
	{
		g_bClientPrefSounds[client] = 1;
	}
	return 0;
}

public PlayerDeath(Handle:event, String:name[], bool:dontBroadcast)
{
	g_bQuakeov_enabled = GetConVarBool(g_hQuakeov_enabled);
	new userId = GetEventInt(event, "userid", 0);
	new attackerId = GetEventInt(event, "attacker", 0);
	new attacker = GetClientOfUserId(attackerId);
	new victim = GetClientOfUserId(userId);
	new var1;
	if (IsValidClient(victim) && g_bQuakeov_enabled)
	{
		new String:weapon[32];
		GetEventString(event, "weapon", weapon, 32, "");
		if (StrEqual(weapon, "hegrenade", true))
		{
			if (IsValidClient(attacker))
			{
				if (g_bClientPrefSounds[attacker])
				{
					EmitSoundToClientAny(attacker, "quake/standard/perfect.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
				}
				if (g_bClientPrefOverlays[attacker])
				{
					SetClientOverlay(attacker, "event_overlay/overlay2/perfect");
				}
				CreateTimer(2.0, DeleteOverlay, attacker, 0);
			}
		}
		if (!(strncmp(weapon, "knife", 5, true)))
		{
			if (IsValidClient(attacker))
			{
				if (g_bClientPrefSounds[attacker])
				{
					EmitSoundToClientAny(attacker, "quake/standard/humiliation.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
				}
				if (g_bClientPrefOverlays[attacker])
				{
					SetClientOverlay(attacker, "event_overlay/overlay2/humiliation");
				}
				CreateTimer(2.0, DeleteOverlay, attacker, 0);
			}
		}
		new var2;
		if (GetEventBool(event, "headshot", false) && IsValidClient(victim))
		{
			if (IsValidClient(attacker))
			{
				if (g_bClientPrefSounds[attacker])
				{
					EmitSoundToClientAny(attacker, "quake/standard/headshot.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
				}
				if (g_bClientPrefOverlays[attacker])
				{
					SetClientOverlay(attacker, "event_overlay/overlay2/hs");
				}
				CreateTimer(2.0, DeleteOverlay, attacker, 0);
			}
		}
		g_hPoints[victim] = 0;
		if (IsValidClient(attacker))
		{
			g_hPoints[attacker] += 1;
			CheckPoints(attacker);
			CreateTimer(2.0, DeleteOverlay, attacker, 0);
		}
		if (victim == attacker)
		{
			if (IsValidClient(victim))
			{
				if (g_bClientPrefSounds[attacker])
				{
					EmitSoundToClientAny(victim, "quake/standard/humiliation.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
				}
				if (g_bClientPrefOverlays[attacker])
				{
					SetClientOverlay(victim, "event_overlay/overlay2/suicide");
				}
				CreateTimer(2.0, DeleteOverlay, victim, 0);
				g_hPoints[victim] = 0;
				g_hPoints[attacker] = 0;
			}
		}
	}
	return 0;
}

public Action:DeleteOverlay(Handle:timer, any:iClient)
{
	if (IsValidClient(iClient))
	{
		SetClientOverlay(iClient, "");
	}
	return Action:3;
}

bool:IsValidClient(iClient)
{
	if (0 >= iClient)
	{
		return false;
	}
	if (iClient > MaxClients)
	{
		return false;
	}
	if (!IsClientConnected(iClient))
	{
		return false;
	}
	return IsClientInGame(iClient);
}

SetClientOverlay(client, String:strOverlay[])
{
	if (IsValidClient(client))
	{
		new iFlags = GetCommandFlags("r_screenoverlay") & -16385;
		SetCommandFlags("r_screenoverlay", iFlags);
		ClientCommand(client, "r_screenoverlay \"%s\"", strOverlay);
		return 1;
	}
	return 0;
}

CheckPoints(client)
{
	if (IsValidClient(client))
	{
		if (g_hPoints[client] == 2)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/doublekill.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/dk");
			}
		}
		if (g_hPoints[client] == 3)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/triplekill.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/tk");
			}
		}
		if (g_hPoints[client] == 4)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/dominating.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/domination");
			}
		}
		if (g_hPoints[client] == 5)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/combowhore.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/cw");
			}
		}
		if (g_hPoints[client] == 6)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/rampage.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/rampage");
			}
		}
		if (g_hPoints[client] == 8)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/killingspree.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/ks");
			}
		}
		if (g_hPoints[client] == 10)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/monsterkill.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/monsterkill");
			}
		}
		if (g_hPoints[client] == 14)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/unstoppable.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/unstop");
			}
		}
		if (g_hPoints[client] == 16)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/ultrakill.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/ultrakill");
			}
		}
		if (g_hPoints[client] == 18)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/godlike.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/godlike");
			}
		}
		if (g_hPoints[client] == 20)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/wickedsick.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/wicked");
			}
		}
		if (g_hPoints[client] == 22)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/impressive.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/impressive");
			}
		}
		if (g_hPoints[client] == 24)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/ludicrouskill.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/lk");
			}
		}
		if (g_hPoints[client] == 26)
		{
			if (g_bClientPrefSounds[client])
			{
				EmitSoundToClientAny(client, "quake/standard/holyshit.mp3", -2, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			}
			if (g_bClientPrefOverlays[client])
			{
				SetClientOverlay(client, "event_overlay/overlay2/holyshit");
			}
		}
	}
	return 0;
}

public Action:CMD_ShowQSPrefsMenu(client, args)
{
	ShowQSMenu(client);
	return Action:3;
}

public ShowQSMenu(client)
{
	new Handle:menu = CreateMenu(MenuHandlerQS, MenuAction:28);
	SetMenuTitle(menu, "Quake Sounds OV Edition");
	AddMenuItem(menu, "g_bClientPrefOverlays[client] == 1", "Enable/Disable Overlays", 0);
	AddMenuItem(menu, "g_bClientPrefSounds[client] == 1", "Enable/Disable Sounds", 0);
	SetMenuExitButton(menu, true);
	DisplayMenu(menu, client, 20);
	return 0;
}

public MenuHandlerQS(Handle:menu, MenuAction:action, param1, param2)
{
	if (action == MenuAction:4)
	{
		if (!param2)
		{
			if (g_bClientPrefOverlays[param1])
			{
				g_bClientPrefOverlays[param1] = 0;
				PrintToChat(param1, "overlays Disabled");
			}
			g_bClientPrefOverlays[param1] = 1;
			PrintToChat(param1, "overlays Enabled");
		}
		if (param2 == 1)
		{
			if (g_bClientPrefSounds[param1])
			{
				g_bClientPrefSounds[param1] = 0;
				PrintToChat(param1, "Quake Sounds Disabled");
			}
			g_bClientPrefSounds[param1] = 1;
			PrintToChat(param1, "Quake Sounds Enabled");
		}
		new String:buffer[8];
		IntToString(g_bClientPrefSounds[param1], buffer, 5);
		SetClientCookie(param1, g_hClientCookieOverlays, buffer);
		IntToString(g_bClientPrefOverlays[param1], buffer, 5);
		SetClientCookie(param1, g_hClientCookieSounds, buffer);
		CMD_ShowQSPrefsMenu(param1, 0);
	}
	else
	{
		if (action == MenuAction:16)
		{
			CloseHandle(menu);
		}
	}
	return 0;
}

public QSPrefSelected(client, CookieMenuAction:action, any:info, String:buffer[], maxlen)
{
	if (action == CookieMenuAction:1)
	{
		ShowQSMenu(client);
	}
	return 0;
}

public Action:WelcomeVersion(Handle:timer, any:client)
{
	if (!IsValidClient(client))
	{
		return Action:3;
	}
	PrintToChat(client, "\x02 QuakeSounds Overlays Edition \x06 %s \x01by \x05 -GoV-TonyBaretta", "1.0");
	PrintToChat(client, "\x02 type \x05 !settings \x01 for enable/disable QuakeSounds options ");
	return Action:3;
}

