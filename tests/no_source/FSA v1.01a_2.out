public PlVers:__version =
{
	version = 5,
	filevers = "1.3.6",
	date = "03/01/2011",
	time = "22:05:54"
};
new Float:NULL_VECTOR[3];
new String:NULL_STRING[4];
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
new MaxClients;
public Extension:__ext_sdktools =
{
	name = "SDKTools",
	file = "sdktools.ext",
	autoload = 1,
	required = 1,
};
public Extension:__ext_cstrike =
{
	name = "cstrike",
	file = "games/game.cstrike.ext",
	autoload = 0,
	required = 1,
};
public Plugin:myinfo =
{
	name = "FireWaLL Super Admin",
	description = "A highly advanced admin system with lots of special commands",
	author = "LightningZLaser",
	version = "1.01a",
	url = "www.FireWaLLCS.net/forums"
};
new RocketType = 2;
new String:name[64];
new String:phrase[64];
new String:modelname[64];
new PropHealth;
new Explode;
new BanDuration[65];
new FreezeStatus[65];
new MuteStatus[65];
new String:FreezeString[12];
new String:MuteString[12];
new ClientTeam;
new String:TeamPrefix[8];
new BlindAlpha[65];
new String:BlindPrefix[20];
new String:DisguiseAdminString[65][100];
new String:DisguiseMessage[65][100];
new DisguiseStatus[65];
new DisguiseID[65];
new String:DisguisePrefix[32];
new DrugStatus[65];
new String:DrugString[16];
new GodStatus[65];
new String:GodString[16];
new InvisStatus[65];
new String:InvisString[32];
new JetStatus[65];
new String:JetString[32];
new ClipStatus[65];
new String:ClipString[32];
new RegenStatus[65];
new String:RegenString[32];
new RocketStatus[65];
new String:RocketString[32];
new Rocket1[65] =
{
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
new Float:RocketVec1[65][3];
new Float:RocketVec2[65][3];
new Float:RocketZ1[65];
new Float:RocketZ2[65] =
{
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
new slapdamage[65];
new SpeedIndex[65];
new String:SpeedString[12];
new String:playermodel[65][100];
new sprite[65];
public __ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	VerifyCoreVersion();
	return 0;
}

Float:operator+(Float:,_:)(Float:oper1, oper2)
{
	return oper1 + float(oper2);
}

Float:operator-(Float:,_:)(Float:oper1, oper2)
{
	return oper1 - float(oper2);
}

bool:operator==(Float:,Float:)(Float:oper1, Float:oper2)
{
	return FloatCompare(oper1, oper2) == 0;
}

bool:operator>=(Float:,Float:)(Float:oper1, Float:oper2)
{
	return FloatCompare(oper1, oper2) >= 0;
}

bool:operator<=(Float:,Float:)(Float:oper1, Float:oper2)
{
	return FloatCompare(oper1, oper2) <= 0;
}

bool:StrEqual(String:str1[], String:str2[], bool:caseSensitive)
{
	return strcmp(str1, str2, caseSensitive) == 0;
}

StrCat(String:buffer[], maxlength, String:source[])
{
	new len = strlen(buffer);
	if (len >= maxlength)
	{
		return 0;
	}
	return Format(buffer[len], maxlength - len, "%s", source);
}

PrintToChatAll(String:format[])
{
	decl String:buffer[192];
	new i = 1;
	while (i <= MaxClients)
	{
		if (IsClientInGame(i))
		{
			SetGlobalTransTarget(i);
			VFormat(buffer, 192, format, 2);
			PrintToChat(i, "%s", buffer);
		}
		i++;
	}
	return 0;
}

SetEntityMoveType(entity, MoveType:mt)
{
	static bool:gotconfig;
	static String:datamap[32];
	if (!gotconfig)
	{
		new Handle:gc = LoadGameConfigFile("core.games");
		new bool:exists = GameConfGetKeyValue(gc, "m_MoveType", datamap, 32);
		CloseHandle(gc);
		if (!exists)
		{
			strcopy(datamap, 32, "m_MoveType");
		}
		gotconfig = true;
	}
	SetEntProp(entity, PropType:1, datamap, mt, 4);
	return 0;
}

SetEntityRenderMode(entity, RenderMode:mode)
{
	static bool:gotconfig;
	static String:prop[32];
	if (!gotconfig)
	{
		new Handle:gc = LoadGameConfigFile("core.games");
		new bool:exists = GameConfGetKeyValue(gc, "m_nRenderMode", prop, 32);
		CloseHandle(gc);
		if (!exists)
		{
			strcopy(prop, 32, "m_nRenderMode");
		}
		gotconfig = true;
	}
	SetEntProp(entity, PropType:0, prop, mode, 1);
	return 0;
}

SetEntityGravity(entity, Float:amount)
{
	static bool:gotconfig;
	static String:datamap[32];
	if (!gotconfig)
	{
		new Handle:gc = LoadGameConfigFile("core.games");
		new bool:exists = GameConfGetKeyValue(gc, "m_flGravity", datamap, 32);
		CloseHandle(gc);
		if (!exists)
		{
			strcopy(datamap, 32, "m_flGravity");
		}
		gotconfig = true;
	}
	SetEntPropFloat(entity, PropType:1, datamap, amount);
	return 0;
}

SetEntityHealth(entity, amount)
{
	static bool:gotconfig;
	static String:prop[32];
	if (!gotconfig)
	{
		new Handle:gc = LoadGameConfigFile("core.games");
		new bool:exists = GameConfGetKeyValue(gc, "m_iHealth", prop, 32);
		CloseHandle(gc);
		if (!exists)
		{
			strcopy(prop, 32, "m_iHealth");
		}
		gotconfig = true;
	}
	decl String:cls[64];
	new PropFieldType:type;
	new offset;
	if (!GetEntityNetClass(entity, cls, 64))
	{
		ThrowError("SetEntityHealth not supported by this mod: Could not get serverclass name");
		return 0;
	}
	offset = FindSendPropInfo(cls, prop, type, 0, 0);
	if (0 >= offset)
	{
		ThrowError("SetEntityHealth not supported by this mod");
		return 0;
	}
	if (type == PropFieldType:2)
	{
		SetEntDataFloat(entity, offset, float(amount), false);
	}
	else
	{
		SetEntProp(entity, PropType:0, prop, amount, 4);
	}
	return 0;
}

EmitSoundToAll(String:sample[], entity, channel, level, flags, Float:volume, pitch, speakerentity, Float:origin[3], Float:dir[3], bool:updatePos, Float:soundtime)
{
	new clients[MaxClients];
	new total;
	new i = 1;
	while (i <= MaxClients)
	{
		if (IsClientInGame(i))
		{
			total++;
			clients[total] = i;
		}
		i++;
	}
	if (!total)
	{
		return 0;
	}
	EmitSound(clients, total, sample, entity, channel, level, flags, volume, pitch, speakerentity, origin, dir, updatePos, soundtime);
	return 0;
}

public OnPluginStart()
{
	CreateConVar("fsa", "1", "FireWaLL Super Admin", 270656, false, 0.0, false, 0.0);
	CreateConVar("fsa_rocket_will_kill", "0", "Set to 1 so that players will die when rocketted", 270656, false, 0.0, false, 0.0);
	CreateConVar("fsa_rocket_speed", "20.0", "Sets rocket speed. Important note: Must be higher than 5 (6 at least)", 270656, false, 0.0, false, 0.0);
	RegAdminCmd("fsa", ConsoleCmd, 262144, "", "", 0);
	HookEvent("round_start", GameStart, EventHookMode:1);
	RegAdminCmd("stealcookies", StealCookies, 262144, "", "", 0);
	RegAdminCmd("bury", BuryChat, 262144, "", "", 0);
	RegAdminCmd("unbury", UnburyChat, 262144, "", "", 0);
	CreateTimer(1.0, TimerRepeat, any:0, 1);
	if (RocketType == 1)
	{
		CreateTimer(0.1, RocketTimer, any:0, 1);
	}
	if (RocketType == 2)
	{
		CreateTimer(0.1, RocketTimer2, any:0, 1);
	}
	HookEvent("player_death", PlayerDeath, EventHookMode:1);
	RegAdminCmd("disarm", DisarmChat, 262144, "", "", 0);
	RegAdminCmd("godmode", GodChat, 262144, "", "", 0);
	RegAdminCmd("invis", InvisChat, 262144, "", "", 0);
	RegAdminCmd("jet", JetChat, 262144, "", "", 0);
	RegAdminCmd("jetpack", JetChat, 262144, "", "", 0);
	RegAdminCmd("clip", ClipChat, 262144, "", "", 0);
	RegAdminCmd("regen", RegenChat, 262144, "", "", 0);
	RegAdminCmd("respawn", RespawnChat, 262144, "", "", 0);
	RegAdminCmd("revive", RespawnChat, 262144, "", "", 0);
	RegAdminCmd("rocket", RocketChat, 262144, "", "", 0);
	RegAdminCmd("speed", SpeedChat, 262144, "", "", 0);
	return 0;
}

public Action:ConsoleCmd(client, args)
{
	new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
	SetMenuTitle(menu, "Главное меню");
	AddMenuItem(menu, "Player Management", "Управление игроками", 0);
	AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
	AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
	AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
	SetMenuExitButton(menu, true);
	SetMenuExitBackButton(menu, false);
	DisplayMenu(menu, client, 0);
	return Action:3;
}

public MenuHandler1(Handle:menu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:info[64];
		GetMenuItem(menu, param2, info, 64, 0, "", 0);
		GetClientName(client, name, 64);
		if (!(strcmp(info, "Player Management", true)))
		{
			new Handle:playermngmnt = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(playermngmnt, "[FSA] Управление игроками");
			AddMenuItem(playermngmnt, "Ban", "Забанить", 0);
			AddMenuItem(playermngmnt, "Freeze", "Заморозить", 0);
			AddMenuItem(playermngmnt, "Kick", "Кикнуть", 0);
			AddMenuItem(playermngmnt, "Mute", "Заткнуть игрока", 0);
			AddMenuItem(playermngmnt, "Slay", "Убить", 0);
			AddMenuItem(playermngmnt, "Swap to Opposite Team", "Сменить команду", 0);
			AddMenuItem(playermngmnt, "Swap to Spectator", "Переместить в наблюдатели", 0);
			SetMenuExitBackButton(playermngmnt, true);
			DisplayMenu(playermngmnt, client, 0);
		}
		if (!(strcmp(info, "Fun Commands", true)))
		{
			new Handle:funcmd = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(funcmd, "[FSA] Забавные команды");
			AddMenuItem(funcmd, "Blind", "Ослепить", 0);
			AddMenuItem(funcmd, "Burn", "Сжечь", 0);
			AddMenuItem(funcmd, "Burymain", "Закопать", 0);
			AddMenuItem(funcmd, "Disarm", "Обезоружить", 0);
			AddMenuItem(funcmd, "Disguise", "Замаскировать (установить модель)", 0);
			AddMenuItem(funcmd, "Drug", "Опьянить", 0);
			AddMenuItem(funcmd, "Godmode", "Сделать бессмертным", 0);
			AddMenuItem(funcmd, "Invisible", "Сделать невидимым", 0);
			AddMenuItem(funcmd, "Jetpack", "Дать Jetpack", 0);
			AddMenuItem(funcmd, "Noclip", "Включить Noclip", 0);
			AddMenuItem(funcmd, "Regeneration", "Включить регенерацию", 0);
			AddMenuItem(funcmd, "Respawn", "Возродить", 0);
			AddMenuItem(funcmd, "Rocket", "Посадить на ракету", 0);
			AddMenuItem(funcmd, "Slap", "Шлёпнуть", 0);
			AddMenuItem(funcmd, "Speed", "+Скорость", 0);
			SetMenuExitBackButton(funcmd, true);
			DisplayMenu(funcmd, client, 0);
		}
		if (!(strcmp(info, "Prop Menu", true)))
		{
			new Handle:propmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(propmenu, "[FSA] Управление предметами");
			AddMenuItem(propmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(propmenu, "Rotate Prop", "Повернуть предмет", 0);
			AddMenuItem(propmenu, "Physic Props", "Физические предметы", 0);
			AddMenuItem(propmenu, "Dynamic/Static Props", "Статические предметы", 0);
			AddMenuItem(propmenu, "NPCs", "NPC", 0);
			SetMenuExitBackButton(propmenu, true);
			DisplayMenu(propmenu, client, 0);
		}
		if (!(strcmp(info, "Rotate Prop", true)))
		{
			new Handle:rotatemenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(rotatemenu, "[FSA] Меню вращения предметов");
			AddMenuItem(rotatemenu, "Rotate X +45 Degrees", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y +45 Degrees", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z +45 Degrees", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate X -45 Degrees", "Повернуть по оси X -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y -45 Degrees", "Повернуть по оси Y -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z -45 Degrees", "Повернуть по оси Z -45 градусов", 0);
			SetMenuExitBackButton(rotatemenu, true);
			DisplayMenu(rotatemenu, client, 0);
		}
		if (!(strcmp(info, "Rotate X +45 Degrees", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var2;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[0] = RotateVec[0] + 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var4;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:rotatemenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(rotatemenu, "[FSA] Меню управления предметами");
			AddMenuItem(rotatemenu, "Rotate X +45 Degrees", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y +45 Degrees", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z +45 Degrees", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate X -45 Degrees", "Повернуть по оси X -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y -45 Degrees", "Повернуть по оси Y -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z -45 Degrees", "Повернуть по оси Z -45 градусов", 0);
			SetMenuExitBackButton(rotatemenu, true);
			DisplayMenu(rotatemenu, client, 0);
		}
		if (!(strcmp(info, "RotXP45", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var6;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[0] = RotateVec[0] + 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var8;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические предметы");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильный аппарат", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Ящик для файлов", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный деван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
		}
		if (!(strcmp(info, "RotXD45", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var10;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[0] = RotateVec[0] + 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var12;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Динамические объекты");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Трансопрт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
		}
		if (!(strcmp(info, "RotXN45", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var14;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[0] = RotateVec[0] + 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var16;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
		}
		if (!(strcmp(info, "Rotate Y +45 Degrees", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var18;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[1] = RotateVec[1] + 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var20;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:rotatemenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(rotatemenu, "[FSA] Меню управления предметами");
			AddMenuItem(rotatemenu, "Rotate X +45 Degrees", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y +45 Degrees", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z +45 Degrees", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate X -45 Degrees", "Повернуть по оси X -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y -45 Degrees", "Повернуть по оси Y -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z -45 Degrees", "Повернуть по оси Z -45 градусов", 0);
			SetMenuExitBackButton(rotatemenu, true);
			DisplayMenu(rotatemenu, client, 0);
		}
		if (!(strcmp(info, "RotYP45", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var22;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[1] = RotateVec[1] + 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var24;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
		}
		if (!(strcmp(info, "RotYD45", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var26;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[1] = RotateVec[1] + 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var28;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
		}
		if (!(strcmp(info, "RotYN45", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var30;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[1] = RotateVec[1] + 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var32;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
		}
		if (!(strcmp(info, "Rotate Z +45 Degrees", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var34;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[2] = RotateVec[2] + 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var36;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:rotatemenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(rotatemenu, "[FSA] Меню управления предметами");
			AddMenuItem(rotatemenu, "Rotate X +45 Degrees", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y +45 Degrees", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z +45 Degrees", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate X -45 Degrees", "Повернуть по оси X -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y -45 Degrees", "Повернуть по оси Y -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z -45 Degrees", "Повернуть по оси Z -45 градусов", 0);
			SetMenuExitBackButton(rotatemenu, true);
			DisplayMenu(rotatemenu, client, 0);
		}
		if (!(strcmp(info, "RotZP45", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var38;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[2] = RotateVec[2] + 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var40;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
		}
		if (!(strcmp(info, "RotZD45", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var42;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[2] = RotateVec[2] + 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var44;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
		}
		if (!(strcmp(info, "RotZN45", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var46;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[2] = RotateVec[2] + 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var48;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
		}
		if (!(strcmp(info, "Rotate X -45 Degrees", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var50;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[0] = RotateVec[0] - 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var52;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:rotatemenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(rotatemenu, "[FSA] Меню управления предметами");
			AddMenuItem(rotatemenu, "Rotate X +45 Degrees", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y +45 Degrees", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z +45 Degrees", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate X -45 Degrees", "Повернуть по оси X -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y -45 Degrees", "Повернуть по оси Y -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z -45 Degrees", "Повернуть по оси Z -45 градусов", 0);
			SetMenuExitBackButton(rotatemenu, true);
			DisplayMenu(rotatemenu, client, 0);
		}
		if (!(strcmp(info, "Rotate Y -45 Degrees", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var54;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[1] = RotateVec[1] - 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var56;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:rotatemenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(rotatemenu, "[FSA] Меню управления предметами");
			AddMenuItem(rotatemenu, "Rotate X +45 Degrees", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y +45 Degrees", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z +45 Degrees", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate X -45 Degrees", "Повернуть по оси X -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y -45 Degrees", "Повернуть по оси Y -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z -45 Degrees", "Повернуть по оси Z -45 градусов", 0);
			SetMenuExitBackButton(rotatemenu, true);
			DisplayMenu(rotatemenu, client, 0);
		}
		if (!(strcmp(info, "Rotate Z -45 Degrees", true)))
		{
			new String:classname[64];
			new Float:RotateVec[3] = 0.0;
			new RotateIndex = GetClientAimTarget(client, false);
			if (RotateIndex != -1)
			{
				GetEdictClassname(RotateIndex, classname, 64);
			}
			new var58;
			if (RotateIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				GetEntPropVector(RotateIndex, PropType:0, "m_angRotation", RotateVec);
				RotateVec[2] = RotateVec[2] - 45.0;
				TeleportEntity(RotateIndex, NULL_VECTOR, RotateVec, NULL_VECTOR);
				AcceptEntityInput(RotateIndex, "TurnOn", RotateIndex, RotateIndex, 0);
				AcceptEntityInput(RotateIndex, "EnableCollision", -1, -1, 0);
				GetClientName(client, name, 64);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s повернул предмет", name);
			}
			new var60;
			if (RotateIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:rotatemenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(rotatemenu, "[FSA] Меню управления предметами");
			AddMenuItem(rotatemenu, "Rotate X +45 Degrees", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y +45 Degrees", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z +45 Degrees", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate X -45 Degrees", "Повернуть по оси X -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Y -45 Degrees", "Повернуть по оси Y -45 градусов", 0);
			AddMenuItem(rotatemenu, "Rotate Z -45 Degrees", "Повернуть по оси Z -45 градусов", 0);
			SetMenuExitBackButton(rotatemenu, true);
			DisplayMenu(rotatemenu, client, 0);
		}
		if (!(strcmp(info, "Delete Prop", true)))
		{
			new String:classname[64];
			new DeleteIndex = GetClientAimTarget(client, false);
			if (DeleteIndex != -1)
			{
				GetEdictClassname(DeleteIndex, classname, 64);
			}
			new var62;
			if (DeleteIndex != -1 && (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				AcceptEntityInput(DeleteIndex, "Kill", -1, -1, 0);
				PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s удалил предмет", name);
			}
			new var64;
			if (DeleteIndex == -1 || (StrEqual(classname, "prop_physics", true) || StrEqual(classname, "prop_physics_override", true) || StrEqual(classname, "prop_dynamic", true) || StrEqual(classname, "prop_dynamic_override", true) || StrEqual(classname, "prop_physics_multiplayer", true) || StrEqual(classname, "prop_dynamic_ornament", true) || StrEqual(classname, "prop_static", true)))
			{
				PrintToChat(client, "\x03[\x04FSA\x03] \x01Объект не найден!");
			}
			new Handle:propmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(propmenu, "[FSA] Управление предметами");
			AddMenuItem(propmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(propmenu, "Rotate Prop", "Повернуть предмет", 0);
			AddMenuItem(propmenu, "Physic Props", "Физические предметы", 0);
			AddMenuItem(propmenu, "Dynamic/Static Props", "Статические предметы", 0);
			AddMenuItem(propmenu, "NPCs", "NPC", 0);
			SetMenuExitBackButton(propmenu, true);
			DisplayMenu(propmenu, client, 0);
		}
		if (!(strcmp(info, "Physic Props", true)))
		{
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
		}
		if (!(strcmp(info, "Dynamic/Static Props", true)))
		{
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
		}
		if (!(strcmp(info, "NPCs", true)))
		{
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
		}
		if (!(strcmp(info, "Banana", true)))
		{
			PrecacheModel("models/props/cs_italy/bananna_bunch.mdl", true);
			PrecacheModel("models/props/cs_italy/bananna.mdl", true);
			PrecacheModel("models/props/cs_italy/banannagib1.mdl", true);
			PrecacheModel("models/props/cs_italy/banannagib2.mdl", true);
			PropHealth = 1;
			Explode = 0;
			prop_physics_create(client);
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
		}
		if (!(strcmp(info, "Barrel", true)))
		{
			PrecacheModel("models/props_c17/oildrum001.mdl", true);
			PropHealth = 0;
			Explode = 0;
			prop_physics_create(client);
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
		}
		if (!(strcmp(info, "Explosive Barrel", true)))
		{
			PrecacheModel("models/props_c17/oildrum001_explosive.mdl", true);
			PrecacheModel("models/props_c17/oildrumchunk01a.mdl", true);
			PrecacheModel("models/props_c17/oildrumchunk01b.mdl", true);
			PrecacheModel("models/props_c17/oildrumchunk01c.mdl", true);
			PrecacheModel("models/props_c17/oildrumchunk01d.mdl", true);
			PrecacheModel("models/props_c17/oildrumchunk01e.mdl", true);
			PropHealth = 1;
			Explode = 1;
			prop_physics_create(client);
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "File Cabinet", true)))
		{
			PrecacheModel("models/props/cs_office/file_cabinet3.mdl", true);
			PropHealth = 0;
			Explode = 0;
			prop_physics_create(client);
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Orange", true)))
		{
			PrecacheModel("models/props/cs_italy/orange.mdl", true);
			PrecacheModel("models/props/cs_italy/orangegib1.mdl", true);
			PrecacheModel("models/props/cs_italy/orangegib2.mdl", true);
			PrecacheModel("models/props/cs_italy/orangegib3.mdl", true);
			PropHealth = 1;
			Explode = 0;
			prop_physics_create(client);
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Swampy Turtle", true)))
		{
			PrecacheModel("models/props/de_tides/vending_turtle.mdl", true);
			PropHealth = 0;
			Explode = 0;
			prop_physics_create(client);
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Vending Machine", true)))
		{
			PrecacheModel("models/props/cs_office/vending_machine.mdl", true);
			decl Float:VecOrigin[3];
			decl Float:VecAngles[3];
			new prop = CreateEntityByName("prop_physics_override", -1);
			DispatchKeyValue(prop, "model", modelname);
			GetClientEyePosition(client, VecOrigin);
			GetClientEyeAngles(client, VecAngles);
			TR_TraceRayFilter(VecOrigin, VecAngles, 16513, RayType:1, TraceRayDontHitSelf, client);
			TR_GetEndPosition(VecOrigin, Handle:0);
			VecAngles[0] = 0.0;
			VecAngles[2] = 0.0;
			VecOrigin[2] = VecOrigin[2] + 5;
			DispatchKeyValueVector(prop, "angles", VecAngles);
			DispatchSpawn(prop);
			TeleportEntity(prop, VecOrigin, NULL_VECTOR, NULL_VECTOR);
			PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s создал %s", name, phrase);
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Heavy Vending Machine", true)))
		{
			PrecacheModel("models/props_interiors/vendingmachinesoda01a.mdl", true);
			PropHealth = 0;
			Explode = 0;
			prop_physics_create(client);
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Watermelon", true)))
		{
			PrecacheModel("models/props_junk/watermelon01.mdl", true);
			PrecacheModel("models/props_junk/watermelon01_chunk01a.mdl", true);
			PrecacheModel("models/props_junk/watermelon01_chunk01b.mdl", true);
			PrecacheModel("models/props_junk/watermelon01_chunk01c.mdl", true);
			PrecacheModel("models/props_junk/watermelon01_chunk02a.mdl", true);
			PrecacheModel("models/props_junk/watermelon01_chunk02b.mdl", true);
			PrecacheModel("models/props_junk/watermelon01_chunk02c.mdl", true);
			PropHealth = 1;
			Explode = 0;
			prop_physics_create(client);
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "винную бочку", true)))
		{
			PrecacheModel("models/props/de_inferno/wine_barrel.mdl", true);
			PrecacheModel("models/props/de_inferno/wine_barrel_p1.mdl", true);
			PrecacheModel("models/props/de_inferno/wine_barrel_p2.mdl", true);
			PrecacheModel("models/props/de_inferno/wine_barrel_p3.mdl", true);
			PrecacheModel("models/props/de_inferno/wine_barrel_p4.mdl", true);
			PrecacheModel("models/props/de_inferno/wine_barrel_p5.mdl", true);
			PrecacheModel("models/props/de_inferno/wine_barrel_p6.mdl", true);
			PrecacheModel("models/props/de_inferno/wine_barrel_p7.mdl", true);
			PrecacheModel("models/props/de_inferno/wine_barrel_p8.mdl", true);
			PrecacheModel("models/props/de_inferno/wine_barrel_p9.mdl", true);
			PrecacheModel("models/props/de_inferno/wine_barrel_p10.mdl", true);
			PrecacheModel("models/props/de_inferno/wine_barrel_p11.mdl", true);
			PropHealth = 0;
			Explode = 0;
			prop_physics_create(client);
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Bookcase", true)))
		{
			PrecacheModel("models/props/cs_havana/bookcase_large.mdl", true);
			PropHealth = 0;
			Explode = 0;
			prop_physics_create(client);
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
		}
		if (!(strcmp(info, "Dryer", true)))
		{
			PrecacheModel("models/props/cs_militia/dryer.mdl", true);
			PropHealth = 0;
			Explode = 0;
			prop_physics_create(client);
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Leather Sofa", true)))
		{
			PrecacheModel("models/props/cs_office/sofa.mdl", true);
			decl Float:VecOrigin[3];
			decl Float:VecAngles[3];
			new prop = CreateEntityByName("prop_physics_override", -1);
			DispatchKeyValue(prop, "model", modelname);
			GetClientEyePosition(client, VecOrigin);
			GetClientEyeAngles(client, VecAngles);
			TR_TraceRayFilter(VecOrigin, VecAngles, 16513, RayType:1, TraceRayDontHitSelf, client);
			TR_GetEndPosition(VecOrigin, Handle:0);
			VecAngles[0] = 0.0;
			VecAngles[2] = 0.0;
			VecOrigin[2] = VecOrigin[2] + 10;
			DispatchKeyValueVector(prop, "angles", VecAngles);
			DispatchSpawn(prop);
			TeleportEntity(prop, VecOrigin, NULL_VECTOR, NULL_VECTOR);
			GetClientName(client, name, 64);
			PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s создал %s", name, phrase);
			new Handle:physmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(physmenu, "[FSA] Физические объекты (передвигаемые)");
			AddMenuItem(physmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(physmenu, "RotXP45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(physmenu, "RotYP45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(physmenu, "RotZP45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(physmenu, "Banana", "Банан", 0);
			AddMenuItem(physmenu, "Bookcase", "Книжный шкаф", 0);
			AddMenuItem(physmenu, "Barrel", "Бочка", 0);
			AddMenuItem(physmenu, "Dryer", "Сушильная машина", 0);
			AddMenuItem(physmenu, "Explosive Barrel", "Взрывная бочка", 0);
			AddMenuItem(physmenu, "File Cabinet", "Картотека", 0);
			AddMenuItem(physmenu, "Orange", "Апельсин", 0);
			AddMenuItem(physmenu, "Leather Sofa", "Кожаный диван", 0);
			AddMenuItem(physmenu, "Swampy Turtle", "Черепашка", 0);
			AddMenuItem(physmenu, "Vending Machine", "Торговый автомат", 0);
			AddMenuItem(physmenu, "Heavy Vending Machine", "Торговый автомат 2", 0);
			AddMenuItem(physmenu, "Watermelon", "Арбуз", 0);
			AddMenuItem(physmenu, "Wine Barrel", "Винная бочка", 0);
			SetMenuExitBackButton(physmenu, true);
			DisplayMenu(physmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Airboat", true)))
		{
			PrecacheModel("models/airboat.mdl", true);
			prop_dynamic_create(client);
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
		}
		if (!(strcmp(info, "Fountain", true)))
		{
			PrecacheModel("models/props/de_inferno/fountain.mdl", true);
			prop_dynamic_create(client);
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
		}
		if (!(strcmp(info, "Lamppost", true)))
		{
			PrecacheModel("models/props_c17/lamppost03a_off.mdl", true);
			prop_dynamic_create(client);
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Pipe", true)))
		{
			PrecacheModel("models/props_pipes/pipecluster32d_001a.mdl", true);
			prop_dynamic_create(client);
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Propane Machine", true)))
		{
			PrecacheModel("models/props/de_train/processor_nobase.mdl", true);
			prop_dynamic_create(client);
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Rock", true)))
		{
			PrecacheModel("models/props/de_inferno/de_inferno_boulder_01.mdl", true);
			prop_dynamic_create(client);
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Fabric Sofa", true)))
		{
			PrecacheModel("models/props/cs_militia/couch.mdl", true);
			prop_dynamic_create(client);
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Table", true)))
		{
			PrecacheModel("models/props/cs_militia/table_kitchen.mdl", true);
			prop_dynamic_create(client);
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Tank", true)))
		{
			PrecacheModel("models/props_vehicles/apc001.mdl", true);
			prop_dynamic_create(client);
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Toilet", true)))
		{
			PrecacheModel("models/props/cs_militia/toilet.mdl", true);
			prop_dynamic_create(client);
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Wooden Box", true)))
		{
			PrecacheModel("models/props/cs_militia/crate_extralargemill.mdl", true);
			prop_dynamic_create(client);
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Jeep", true)))
		{
			PrecacheModel("models/buggy.mdl", true);
			prop_dynamic_create(client);
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Blastdoor", true)))
		{
			PrecacheModel("models/props_lab/blastdoor001c.mdl", true);
			prop_dynamic_create(client);
			new Handle:dynmcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(dynmcmenu, "[FSA] Статические объекты (непередвигаемые)");
			AddMenuItem(dynmcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(dynmcmenu, "RotXD45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotYD45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(dynmcmenu, "RotZD45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(dynmcmenu, "Airboat", "Транспорт на воздушной подушке", 0);
			AddMenuItem(dynmcmenu, "Blastdoor", "Стальные ворота", 0);
			AddMenuItem(dynmcmenu, "Fountain", "Фонтан", 0);
			AddMenuItem(dynmcmenu, "Jeep", "Багги", 0);
			AddMenuItem(dynmcmenu, "Lamppost", "Уличный фонарь", 0);
			AddMenuItem(dynmcmenu, "Pipe", "Труба", 0);
			AddMenuItem(dynmcmenu, "Propane Machine", "Ёмкость с пропаном", 0);
			AddMenuItem(dynmcmenu, "Rock", "Камень", 0);
			AddMenuItem(dynmcmenu, "Fabric Sofa", "Диван", 0);
			AddMenuItem(dynmcmenu, "Table", "Стол", 0);
			AddMenuItem(dynmcmenu, "Tank", "БТР", 0);
			AddMenuItem(dynmcmenu, "Toilet", "Унитаз", 0);
			AddMenuItem(dynmcmenu, "Wooden Box", "Деревянный ящик", 0);
			SetMenuExitBackButton(dynmcmenu, true);
			DisplayMenu(dynmcmenu, client, 0);
		}
		if (!(strcmp(info, "Alyx", true)))
		{
			PrecacheModel("models/alyx.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
		}
		if (!(strcmp(info, "Antlion", true)))
		{
			PrecacheModel("models/antlion.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
		}
		if (!(strcmp(info, "Antlion Guard", true)))
		{
			PrecacheModel("models/antlion_guard.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
		}
		if (!(strcmp(info, "Barney", true)))
		{
			PrecacheModel("models/barney.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Breen", true)))
		{
			PrecacheModel("models/breen.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Counter-Terrorist", true)))
		{
			PrecacheModel("models/player/ct_gign.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Crow", true)))
		{
			PrecacheModel("models/crow.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Dog", true)))
		{
			PrecacheModel("models/dog.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Eli", true)))
		{
			PrecacheModel("models/eli.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Fast Headcrab", true)))
		{
			PrecacheModel("models/headcrab.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Fast Zombie", true)))
		{
			PrecacheModel("models/zombie/fast.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Headcrab", true)))
		{
			PrecacheModel("models/headcrabclassic.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Hostage", true)))
		{
			PrecacheModel("models/characters/hostage_02.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Kleiner", true)))
		{
			PrecacheModel("models/kleiner.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Poison Headcrab", true)))
		{
			PrecacheModel("models/headcrabblack.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Poison Zombie", true)))
		{
			PrecacheModel("models/zombie/poison.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Terrorist", true)))
		{
			PrecacheModel("models/player/t_guerilla.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Vortigaunt", true)))
		{
			PrecacheModel("models/vortigaunt.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Zombie", true)))
		{
			PrecacheModel("models/zombie/classic.mdl", true);
			prop_npc_create(client);
			new Handle:npcmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(npcmenu, "[FSA] NPC -модели живых существ");
			AddMenuItem(npcmenu, "Delete Prop", "Удалить предмет", 0);
			AddMenuItem(npcmenu, "RotXN45", "Повернуть по оси X +45 градусов", 0);
			AddMenuItem(npcmenu, "RotYN45", "Повернуть по оси Y +45 градусов", 0);
			AddMenuItem(npcmenu, "RotZN45", "Повернуть по оси Z +45 градусов", 0);
			AddMenuItem(npcmenu, "Alyx", "Алекс", 0);
			AddMenuItem(npcmenu, "Antlion", "Монстр (Antlion)", 0);
			AddMenuItem(npcmenu, "Antlion Guard", "Монстр 2 (Antlion Guard)", 0);
			AddMenuItem(npcmenu, "Barney", "Барни", 0);
			AddMenuItem(npcmenu, "Breen", "Брин", 0);
			AddMenuItem(npcmenu, "Counter-Terrorist", "Контр-террорист", 0);
			AddMenuItem(npcmenu, "Crow", "Ворона", 0);
			AddMenuItem(npcmenu, "Dog", "Робот (Dog)", 0);
			AddMenuItem(npcmenu, "Eli", "Эли", 0);
			AddMenuItem(npcmenu, "Fast Headcrab", "Быстрый хэдкраб", 0);
			AddMenuItem(npcmenu, "Fast Zombie", "Быстрый зомби", 0);
			AddMenuItem(npcmenu, "Headcrab", "Хэдкраб", 0);
			AddMenuItem(npcmenu, "Hostage", "Заложник", 0);
			AddMenuItem(npcmenu, "Kleiner", "Профессор Клейнер", 0);
			AddMenuItem(npcmenu, "Poison Headcrab", "Ядовитый хэдкраб", 0);
			AddMenuItem(npcmenu, "Poison Zombie", "Ядовитый зомби", 0);
			AddMenuItem(npcmenu, "Terrorist", "Террорист", 0);
			AddMenuItem(npcmenu, "Vortigaunt", "Монстр (Vortigaunt)", 0);
			AddMenuItem(npcmenu, "Zombie", "Зомби", 0);
			SetMenuExitBackButton(npcmenu, true);
			DisplayMenu(npcmenu, client, 0);
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
			FakeClientCommandEx(client, "menuselect 9");
		}
		if (!(strcmp(info, "Play Music", true)))
		{
			new Handle:musicmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(musicmenu, "[FSA] Проигрывание музыки");
			AddMenuItem(musicmenu, "HL2_song4", "Adrenaline", 0);
			AddMenuItem(musicmenu, "HL2_song31", "Calm Battle", 0);
			AddMenuItem(musicmenu, "HL1_song17", "Calm Travel", 0);
			AddMenuItem(musicmenu, "HL2_song16", "Cautious Travel", 0);
			AddMenuItem(musicmenu, "HL2_song12_long", "Easy Battle", 0);
			AddMenuItem(musicmenu, "HL2_song7", "Entrance to Ravenholm", 0);
			AddMenuItem(musicmenu, "HL2_song6", "Final Ascend", 0);
			AddMenuItem(musicmenu, "HL1_song25_REMIX3", "Half-Life 1 Credits", 0);
			AddMenuItem(musicmenu, "HL2_song3", "Half-Life 2 Credits", 0);
			AddMenuItem(musicmenu, "HL2_song15", "Half-Life 2 Credits 2", 0);
			AddMenuItem(musicmenu, "HL2_song10", "Heavens", 0);
			AddMenuItem(musicmenu, "HL2_song17", "Horrific Discovery", 0);
			AddMenuItem(musicmenu, "HL2_song28", "Horror", 0);
			AddMenuItem(musicmenu, "HL2_song29", "Intense Escape", 0);
			AddMenuItem(musicmenu, "HL2_song14", "Journey", 0);
			AddMenuItem(musicmenu, "HL2_song25_Teleporter", "Majestical Horror", 0);
			AddMenuItem(musicmenu, "HL2_song23_SuitSong3", "Memories", 0);
			AddMenuItem(musicmenu, "HL2_song19", "Nova Prospekt", 0);
			AddMenuItem(musicmenu, "Ravenholm_1", "Ravenholm Ending", 0);
			AddMenuItem(musicmenu, "HL1_song10", "River Chase", 0);
			AddMenuItem(musicmenu, "HL2_song20_submix0", "Slow Battle", 0);
			AddMenuItem(musicmenu, "HL2_song20_submix4", "Slow Battle 2", 0);
			AddMenuItem(musicmenu, "HL2_song32", "Sad End", 0);
			AddMenuItem(musicmenu, "HL1_song11", "Source Engine", 0);
			AddMenuItem(musicmenu, "HL2_song33", "Spooky Place", 0);
			AddMenuItem(musicmenu, "HL1_song19", "Spooky Tunnel", 0);
			AddMenuItem(musicmenu, "HL1_song15", "Strider Battle", 0);
			SetMenuExitBackButton(musicmenu, true);
			DisplayMenu(musicmenu, client, 0);
		}
		if (!(strcmp(info, "HL2_song4", true)))
		{
			PrecacheSound("music/HL2_song4.mp3", false);
			EmitSoundToAll("music/HL2_song4.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song31", true)))
		{
			PrecacheSound("music/HL2_song31.mp3", false);
			EmitSoundToAll("music/HL2_song31.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL1_song17", true)))
		{
			PrecacheSound("music/HL1_song17.mp3", false);
			EmitSoundToAll("music/HL1_song17.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song16", true)))
		{
			PrecacheSound("music/HL2_song16.mp3", false);
			EmitSoundToAll("music/HL2_song16.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song12_long", true)))
		{
			PrecacheSound("music/HL2_song12_long.mp3", false);
			EmitSoundToAll("music/HL2_song12_long.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song7", true)))
		{
			PrecacheSound("music/HL2_song7.mp3", false);
			EmitSoundToAll("music/HL2_song7.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song6", true)))
		{
			PrecacheSound("music/HL2_song6.mp3", false);
			EmitSoundToAll("music/HL2_song6.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL1_song25_REMIX3", true)))
		{
			PrecacheSound("music/HL1_song25_REMIX3.mp3", false);
			EmitSoundToAll("music/HL1_song25_REMIX3.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song3", true)))
		{
			PrecacheSound("music/HL2_song3.mp3", false);
			EmitSoundToAll("music/HL2_song3.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song15", true)))
		{
			PrecacheSound("music/HL2_song15.mp3", false);
			EmitSoundToAll("music/HL2_song15.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song10", true)))
		{
			PrecacheSound("music/HL2_song10.mp3", false);
			EmitSoundToAll("music/HL2_song10.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song17", true)))
		{
			PrecacheSound("music/HL2_song17.mp3", false);
			EmitSoundToAll("music/HL2_song17.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song28", true)))
		{
			PrecacheSound("music/HL2_song28.mp3", false);
			EmitSoundToAll("music/HL2_song28.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song29", true)))
		{
			PrecacheSound("music/HL2_song29.mp3", false);
			EmitSoundToAll("music/HL2_song29.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song14", true)))
		{
			PrecacheSound("music/HL2_song14.mp3", false);
			EmitSoundToAll("music/HL2_song14.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song25_Teleporter", true)))
		{
			PrecacheSound("music/HL2_song25_Teleporter.mp3", false);
			EmitSoundToAll("music/HL2_song25_Teleporter.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song23_SuitSong3", true)))
		{
			PrecacheSound("music/HL2_song23_SuitSong3.mp3", false);
			EmitSoundToAll("music/HL2_song23_SuitSong3.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song19", true)))
		{
			PrecacheSound("music/HL2_song19.mp3", false);
			EmitSoundToAll("music/HL2_song19.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "Ravenholm_1", true)))
		{
			PrecacheSound("music/Ravenholm_1.mp3", false);
			EmitSoundToAll("music/Ravenholm_1.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL1_song10", true)))
		{
			PrecacheSound("music/HL1_song10.mp3", false);
			EmitSoundToAll("music/HL1_song10.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song20_submix0", true)))
		{
			PrecacheSound("music/HL2_song20_submix0.mp3", false);
			EmitSoundToAll("music/HL2_song20_submix0.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song20_submix4", true)))
		{
			PrecacheSound("music/HL2_song20_submix4.mp3", false);
			EmitSoundToAll("music/HL2_song20_submix4.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song32", true)))
		{
			PrecacheSound("music/HL2_song32.mp3", false);
			EmitSoundToAll("music/HL2_song32.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL1_song11", true)))
		{
			PrecacheSound("music/HL1_song11.mp3", false);
			EmitSoundToAll("music/HL1_song11.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL2_song33", true)))
		{
			PrecacheSound("music/HL2_song33.mp3", false);
			EmitSoundToAll("music/HL2_song33.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL1_song19", true)))
		{
			PrecacheSound("music/HL1_song19.mp3", false);
			EmitSoundToAll("music/HL1_song19.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "HL1_song15", true)))
		{
			PrecacheSound("music/HL1_song15.mp3", false);
			EmitSoundToAll("music/HL1_song15.mp3", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}
		if (!(strcmp(info, "Ban", true)))
		{
			new Handle:banmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(banmenu, "Продолжительность бана");
			AddMenuItem(banmenu, "Permanent", "Вечный", 0);
			AddMenuItem(banmenu, "5 mins", "5 минут", 0);
			AddMenuItem(banmenu, "30 mins", "30 минут", 0);
			AddMenuItem(banmenu, "1 hour", "1 час", 0);
			AddMenuItem(banmenu, "2 hours", "2 часа", 0);
			SetMenuExitBackButton(banmenu, true);
			DisplayMenu(banmenu, client, 0);
		}
		if (!(strcmp(info, "Permanent", true)))
		{
			BanDuration[client] = 0;
			new Handle:banmenu = CreateMenu(BanHandle, MenuAction:28);
			SetMenuTitle(banmenu, "Кого баним?");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				if (IsClientInGame(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(banmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(banmenu, true);
			DisplayMenu(banmenu, client, 0);
		}
		if (!(strcmp(info, "5 mins", true)))
		{
			BanDuration[client] = 5;
			new Handle:banmenu = CreateMenu(BanHandle, MenuAction:28);
			SetMenuTitle(banmenu, "Кого баним?");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				if (IsClientInGame(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(banmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(banmenu, true);
			DisplayMenu(banmenu, client, 0);
		}
		if (!(strcmp(info, "30 mins", true)))
		{
			BanDuration[client] = 30;
			new Handle:banmenu = CreateMenu(BanHandle, MenuAction:28);
			SetMenuTitle(banmenu, "Кого баним?");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				if (IsClientInGame(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(banmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(banmenu, true);
			DisplayMenu(banmenu, client, 0);
		}
		if (!(strcmp(info, "1 hour", true)))
		{
			BanDuration[client] = 60;
			new Handle:banmenu = CreateMenu(BanHandle, MenuAction:28);
			SetMenuTitle(banmenu, "Кого баним?");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				if (IsClientInGame(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(banmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(banmenu, true);
			DisplayMenu(banmenu, client, 0);
		}
		if (!(strcmp(info, "2 hours", true)))
		{
			BanDuration[client] = 120;
			new Handle:banmenu = CreateMenu(BanHandle, MenuAction:28);
			SetMenuTitle(banmenu, "Кого баним?");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				if (IsClientInGame(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(banmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(banmenu, true);
			DisplayMenu(banmenu, client, 0);
		}
		if (!(strcmp(info, "Freeze", true)))
		{
			new Handle:freezemenu = CreateMenu(FreezeHandle, MenuAction:28);
			SetMenuTitle(freezemenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var65;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					if (!FreezeStatus[i])
					{
						AddMenuItem(freezemenu, name, name, 0);
					}
					if (FreezeStatus[i] == 1)
					{
						StrCat(FreezeString, 64, name);
						AddMenuItem(freezemenu, name, FreezeString, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(freezemenu, true);
			DisplayMenu(freezemenu, client, 0);
		}
		if (!(strcmp(info, "Kick", true)))
		{
			new Handle:kickmenu = CreateMenu(KickHandle, MenuAction:28);
			SetMenuTitle(kickmenu, "Кого кикаем?");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				if (IsClientInGame(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(kickmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(kickmenu, true);
			DisplayMenu(kickmenu, client, 0);
		}
		if (!(strcmp(info, "Mute", true)))
		{
			new Handle:mutemenu = CreateMenu(MuteHandle, MenuAction:28);
			SetMenuTitle(mutemenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				if (IsClientInGame(i))
				{
					GetClientName(i, name, 64);
					if (!MuteStatus[i])
					{
						AddMenuItem(mutemenu, name, name, 0);
					}
					if (MuteStatus[i] == 1)
					{
						StrCat(MuteString, 64, name);
						AddMenuItem(mutemenu, name, MuteString, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(mutemenu, true);
			DisplayMenu(mutemenu, client, 0);
		}
		if (!(strcmp(info, "Slay", true)))
		{
			new Handle:slaymenu = CreateMenu(SlayHandle, MenuAction:28);
			SetMenuTitle(slaymenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var66;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(slaymenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(slaymenu, true);
			DisplayMenu(slaymenu, client, 0);
		}
		if (!(strcmp(info, "Swap to Opposite Team", true)))
		{
			new Handle:swapmenu = CreateMenu(SwapHandle, MenuAction:28);
			SetMenuTitle(swapmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				if (IsClientInGame(i))
				{
					GetClientName(i, name, 64);
					ClientTeam = GetClientTeam(i);
					if (ClientTeam == 2)
					{
						StrCat(TeamPrefix, 64, name);
						AddMenuItem(swapmenu, name, TeamPrefix, 0);
					}
					if (ClientTeam == 3)
					{
						StrCat(TeamPrefix, 64, name);
						AddMenuItem(swapmenu, name, TeamPrefix, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(swapmenu, true);
			DisplayMenu(swapmenu, client, 0);
		}
		if (!(strcmp(info, "Swap to Spectator", true)))
		{
			new Handle:specmenu = CreateMenu(SpecHandle, MenuAction:28);
			SetMenuTitle(specmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				if (IsClientInGame(i))
				{
					GetClientName(i, name, 64);
					ClientTeam = GetClientTeam(i);
					if (ClientTeam != 1)
					{
						AddMenuItem(specmenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(specmenu, true);
			DisplayMenu(specmenu, client, 0);
		}
		if (!(strcmp(info, "Blind", true)))
		{
			new Handle:blindmenu = CreateMenu(BlindHandle, MenuAction:28);
			SetMenuTitle(blindmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var67;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (!BlindAlpha[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(blindmenu, name, name, 0);
					}
					if (BlindAlpha[i] == 200)
					{
						GetClientName(i, name, 64);
						StrCat(BlindPrefix, 64, name);
						AddMenuItem(blindmenu, name, BlindPrefix, 0);
					}
					if (BlindAlpha[i] == 255)
					{
						GetClientName(i, name, 64);
						StrCat(BlindPrefix, 64, name);
						AddMenuItem(blindmenu, name, BlindPrefix, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(blindmenu, true);
			DisplayMenu(blindmenu, client, 0);
		}
		if (!(strcmp(info, "Burn", true)))
		{
			new Handle:burnmenu = CreateMenu(BurnHandle, MenuAction:28);
			SetMenuTitle(burnmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var68;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(burnmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(burnmenu, true);
			DisplayMenu(burnmenu, client, 0);
		}
		if (!(strcmp(info, "Burymain", true)))
		{
			new Handle:burymainmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(burymainmenu, "Выберите игрока");
			AddMenuItem(burymainmenu, "Bury", "Закопать", 0);
			AddMenuItem(burymainmenu, "Unbury", "Раскопать", 0);
			SetMenuExitBackButton(burymainmenu, true);
			DisplayMenu(burymainmenu, client, 0);
		}
		if (!(strcmp(info, "Bury", true)))
		{
			new Handle:burymenu = CreateMenu(BuryHandle, MenuAction:28);
			SetMenuTitle(burymenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var69;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(burymenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(burymenu, true);
			DisplayMenu(burymenu, client, 0);
		}
		if (!(strcmp(info, "Unbury", true)))
		{
			new Handle:unburymenu = CreateMenu(UnburyHandle, MenuAction:28);
			SetMenuTitle(unburymenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var70;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(unburymenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(unburymenu, true);
			DisplayMenu(unburymenu, client, 0);
		}
		if (!(strcmp(info, "Disarm", true)))
		{
			new Handle:disarmmenu = CreateMenu(DisarmHandle, MenuAction:28);
			SetMenuTitle(disarmmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var71;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(disarmmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(disarmmenu, true);
			DisplayMenu(disarmmenu, client, 0);
		}
		if (!(strcmp(info, "Disguise", true)))
		{
			new Handle:disguisemenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(disguisemenu, "Выберите модель");
			AddMenuItem(disguisemenu, "Undisguise", "Без модели", 0);
			AddMenuItem(disguisemenu, "models/advisor.mdl", "Монстр (Advisor)", 0);
			AddMenuItem(disguisemenu, "models/antlion.mdl", "Монстр (Antlion)", 0);
			AddMenuItem(disguisemenu, "models/props_wasteland/barricade001a.mdl", "Заграждение", 0);
			AddMenuItem(disguisemenu, "models/props_c17/oildrum001.mdl", "Бочка", 0);
			AddMenuItem(disguisemenu, "models/props_lab/bewaredog.mdl", "Знак (Beware of Dog)", 0);
			AddMenuItem(disguisemenu, "models/props_junk/bicycle01a.mdl", "Велосипед", 0);
			AddMenuItem(disguisemenu, "models/props/de_inferno/cactus.mdl", "Кактус", 0);
			AddMenuItem(disguisemenu, "models/combine_super_soldier.mdl", "Элитный Комбайн (Combine из HL2)", 0);
			AddMenuItem(disguisemenu, "models/combine_soldier.mdl", "Солдат (Combine)", 0);
			AddMenuItem(disguisemenu, "models/crow.mdl", "Ворона", 0);
			AddMenuItem(disguisemenu, "models/props/cs_militia/fern01.mdl", "Заросли", 0);
			AddMenuItem(disguisemenu, "models/props/de_nuke/lifepreserver.mdl", "Спасательное колесо", 0);
			AddMenuItem(disguisemenu, "models/props/de_inferno/flower_barrel.mdl", "Горшок с цветком", 0);
			AddMenuItem(disguisemenu, "models/props/de_inferno/crate_fruit_break.mdl", "Ящик с апельсинами", 0);
			AddMenuItem(disguisemenu, "models/headcrabclassic.mdl", "Хедкраб", 0);
			AddMenuItem(disguisemenu, "models/player.mdl", "Мистический человек", 0);
			AddMenuItem(disguisemenu, "models/pigeon.mdl", "Голубь", 0);
			AddMenuItem(disguisemenu, "models/headcrabblack.mdl", "Ядовитый хэдкраб", 0);
			AddMenuItem(disguisemenu, "models/props/de_inferno/de_inferno_boulder_01.mdl", "Камень", 0);
			AddMenuItem(disguisemenu, "models/seagull.mdl", "Чайка", 0);
			AddMenuItem(disguisemenu, "models/props_combine/breenbust.mdl", "Маленькая статуя", 0);
			AddMenuItem(disguisemenu, "models/props/cs_office/snowman_face.mdl", "Голова снеговика", 0);
			AddMenuItem(disguisemenu, "models/combine_turrets/floor_turret.mdl", "Туррель", 0);
			AddMenuItem(disguisemenu, "models/props/de_inferno/wine_barrel.mdl", "Винная бочка", 0);
			AddMenuItem(disguisemenu, "models/zombie/classic.mdl", "Зомби", 0);
			SetMenuExitBackButton(disguisemenu, true);
			DisplayMenu(disguisemenu, client, 0);
		}
		if (!(strcmp(info, "Undisguise", true)))
		{
			new Handle:undisguise = CreateMenu(UndisguiseHandle, MenuAction:28);
			SetMenuTitle(undisguise, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var72;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(undisguise, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(undisguise, true);
			DisplayMenu(undisguise, client, 0);
		}
		if (!(strcmp(info, "models/advisor.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var73;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/antlion.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var74;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/props_wasteland/barricade001a.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var75;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/props_c17/oildrum001.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var76;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/props_lab/bewaredog.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var77;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/props_junk/bicycle01a.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var78;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/props/de_inferno/cactus.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var79;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/combine_super_soldier.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var80;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/combine_soldier.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var81;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/crow.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var82;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/props/cs_militia/fern01.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var83;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/props/de_nuke/lifepreserver.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var84;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/props/de_inferno/flower_barrel.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var85;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/props/de_inferno/crate_fruit_break.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var86;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/headcrabclassic.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var87;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/player.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var88;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/pigeon.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var89;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/headcrabblack.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var90;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/props/de_inferno/de_inferno_boulder_01.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var91;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/seagull.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var92;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/props_combine/breenbust.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var93;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/props/cs_office/snowman_face.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var94;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/combine_turrets/floor_turret.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var95;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/props/de_inferno/wine_barrel.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var96;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "models/zombie/classic.mdl", true)))
		{
			new Handle:disguiseplayermenu = CreateMenu(DisguiseHandle, MenuAction:28);
			SetMenuTitle(disguiseplayermenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var97;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						GetClientName(i, name, 64);
						StrCat(DisguisePrefix, 64, name);
						AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
					}
					if (!DisguiseStatus[i])
					{
						GetClientName(i, name, 64);
						AddMenuItem(disguiseplayermenu, name, name, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(disguiseplayermenu, true);
			DisplayMenu(disguiseplayermenu, client, 0);
		}
		if (!(strcmp(info, "Drug", true)))
		{
			new Handle:drugmenu = CreateMenu(DrugHandle, MenuAction:28);
			SetMenuTitle(drugmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var98;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					if (!DrugStatus[i])
					{
						AddMenuItem(drugmenu, name, name, 0);
					}
					if (DrugStatus[i] == 1)
					{
						StrCat(DrugString, 64, name);
						AddMenuItem(drugmenu, name, DrugString, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(drugmenu, true);
			DisplayMenu(drugmenu, client, 0);
		}
		if (!(strcmp(info, "Godmode", true)))
		{
			new Handle:godmenu = CreateMenu(GodHandle, MenuAction:28);
			SetMenuTitle(godmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var99;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					if (!GodStatus[i])
					{
						AddMenuItem(godmenu, name, name, 0);
					}
					if (GodStatus[i] == 1)
					{
						StrCat(GodString, 64, name);
						AddMenuItem(godmenu, name, GodString, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(godmenu, true);
			DisplayMenu(godmenu, client, 0);
		}
		if (!(strcmp(info, "Invisible", true)))
		{
			new Handle:invismenu = CreateMenu(InvisHandle, MenuAction:28);
			SetMenuTitle(invismenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var100;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					if (!InvisStatus[i])
					{
						AddMenuItem(invismenu, name, name, 0);
					}
					if (InvisStatus[i] == 1)
					{
						StrCat(InvisString, 64, name);
						AddMenuItem(invismenu, name, InvisString, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(invismenu, true);
			DisplayMenu(invismenu, client, 0);
		}
		if (!(strcmp(info, "Jetpack", true)))
		{
			new Handle:jetmenu = CreateMenu(JetHandle, MenuAction:28);
			SetMenuTitle(jetmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var101;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					if (!JetStatus[i])
					{
						AddMenuItem(jetmenu, name, name, 0);
					}
					if (JetStatus[i] == 1)
					{
						StrCat(JetString, 64, name);
						AddMenuItem(jetmenu, name, JetString, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(jetmenu, true);
			DisplayMenu(jetmenu, client, 0);
		}
		if (!(strcmp(info, "Noclip", true)))
		{
			new Handle:clipmenu = CreateMenu(ClipHandle, MenuAction:28);
			SetMenuTitle(clipmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var102;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					if (!ClipStatus[i])
					{
						AddMenuItem(clipmenu, name, name, 0);
					}
					if (ClipStatus[i] == 1)
					{
						StrCat(ClipString, 64, name);
						AddMenuItem(clipmenu, name, ClipString, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(clipmenu, true);
			DisplayMenu(clipmenu, client, 0);
		}
		if (!(strcmp(info, "Regeneration", true)))
		{
			new Handle:regenmenu = CreateMenu(RegenHandle, MenuAction:28);
			SetMenuTitle(regenmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var103;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					if (!RegenStatus[i])
					{
						AddMenuItem(regenmenu, name, name, 0);
					}
					if (RegenStatus[i] == 1)
					{
						StrCat(RegenString, 64, name);
						AddMenuItem(regenmenu, name, RegenString, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(regenmenu, true);
			DisplayMenu(regenmenu, client, 0);
		}
		if (!(strcmp(info, "Respawn", true)))
		{
			new Handle:revive = CreateMenu(ReviveHandle, MenuAction:28);
			SetMenuTitle(revive, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var104;
				if (IsClientInGame(i) && !IsPlayerAlive(i) && GetClientTeam(i) != 1)
				{
					GetClientName(i, name, 64);
					AddMenuItem(revive, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(revive, true);
			DisplayMenu(revive, client, 0);
		}
		if (!(strcmp(info, "Rocket", true)))
		{
			new Handle:rocketmenu = CreateMenu(RocketHandle, MenuAction:28);
			SetMenuTitle(rocketmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var105;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					if (!RocketStatus[i])
					{
						AddMenuItem(rocketmenu, name, name, 0);
					}
					if (RocketStatus[i] == 1)
					{
						StrCat(RocketString, 64, name);
						AddMenuItem(rocketmenu, name, RocketString, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(rocketmenu, true);
			DisplayMenu(rocketmenu, client, 0);
		}
		if (!(strcmp(info, "Slap", true)))
		{
			new Handle:slapmainmenu = CreateMenu(MenuHandler1, MenuAction:28);
			SetMenuTitle(slapmainmenu, "Урон шлепка");
			AddMenuItem(slapmainmenu, "slap0", "0", 0);
			AddMenuItem(slapmainmenu, "slap1", "1", 0);
			AddMenuItem(slapmainmenu, "slap5", "5", 0);
			AddMenuItem(slapmainmenu, "slap10", "10", 0);
			AddMenuItem(slapmainmenu, "slap50", "50", 0);
			AddMenuItem(slapmainmenu, "slap100", "100", 0);
			AddMenuItem(slapmainmenu, "slap500", "500", 0);
			SetMenuExitBackButton(slapmainmenu, true);
			DisplayMenu(slapmainmenu, client, 0);
		}
		if (!(strcmp(info, "slap0", true)))
		{
			slapdamage[client] = 0;
			new Handle:slapmenu = CreateMenu(SlapMenu, MenuAction:28);
			SetMenuTitle(slapmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var106;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(slapmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(slapmenu, true);
			DisplayMenu(slapmenu, client, 0);
		}
		if (!(strcmp(info, "slap1", true)))
		{
			slapdamage[client] = 1;
			new Handle:slapmenu = CreateMenu(SlapMenu, MenuAction:28);
			SetMenuTitle(slapmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var107;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(slapmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(slapmenu, true);
			DisplayMenu(slapmenu, client, 0);
		}
		if (!(strcmp(info, "slap5", true)))
		{
			slapdamage[client] = 5;
			new Handle:slapmenu = CreateMenu(SlapMenu, MenuAction:28);
			SetMenuTitle(slapmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var108;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(slapmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(slapmenu, true);
			DisplayMenu(slapmenu, client, 0);
		}
		if (!(strcmp(info, "slap10", true)))
		{
			slapdamage[client] = 10;
			new Handle:slapmenu = CreateMenu(SlapMenu, MenuAction:28);
			SetMenuTitle(slapmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var109;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(slapmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(slapmenu, true);
			DisplayMenu(slapmenu, client, 0);
		}
		if (!(strcmp(info, "slap50", true)))
		{
			slapdamage[client] = 50;
			new Handle:slapmenu = CreateMenu(SlapMenu, MenuAction:28);
			SetMenuTitle(slapmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var110;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(slapmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(slapmenu, true);
			DisplayMenu(slapmenu, client, 0);
		}
		if (!(strcmp(info, "slap100", true)))
		{
			slapdamage[client] = 100;
			new Handle:slapmenu = CreateMenu(SlapMenu, MenuAction:28);
			SetMenuTitle(slapmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var111;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(slapmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(slapmenu, true);
			DisplayMenu(slapmenu, client, 0);
		}
		if (!(strcmp(info, "slap500", true)))
		{
			slapdamage[client] = 500;
			new Handle:slapmenu = CreateMenu(SlapMenu, MenuAction:28);
			SetMenuTitle(slapmenu, "Выберите игрока");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var112;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					AddMenuItem(slapmenu, name, name, 0);
				}
				i++;
			}
			SetMenuExitBackButton(slapmenu, true);
			DisplayMenu(slapmenu, client, 0);
		}
		if (strcmp(info, "Speed", true))
		{
		}
		else
		{
			new Handle:speedmenu = CreateMenu(SpeedHandle, MenuAction:28);
			SetMenuTitle(speedmenu, "Select Player to Change Speed");
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var113;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					GetClientName(i, name, 64);
					if (!SpeedIndex[i])
					{
						AddMenuItem(speedmenu, name, name, 0);
					}
					if (SpeedIndex[i] == 1)
					{
						StrCat(SpeedString, 64, name);
						AddMenuItem(speedmenu, name, SpeedString, 0);
					}
					if (SpeedIndex[i] == 2)
					{
						StrCat(SpeedString, 64, name);
						AddMenuItem(speedmenu, name, SpeedString, 0);
					}
					if (SpeedIndex[i] == 3)
					{
						StrCat(SpeedString, 64, name);
						AddMenuItem(speedmenu, name, SpeedString, 0);
					}
					if (SpeedIndex[i] == 4)
					{
						StrCat(SpeedString, 64, name);
						AddMenuItem(speedmenu, name, SpeedString, 0);
					}
				}
				i++;
			}
			SetMenuExitBackButton(speedmenu, true);
			DisplayMenu(speedmenu, client, 0);
		}
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				RemoveAllMenuItems(menu);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public BanHandle(Handle:banmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		new String:authstring[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(banmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			if (IsClientInGame(i))
			{
				GetClientName(i, loopname, 64);
				new var1;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					GetClientAuthString(i, authstring, 64);
					new String:bannedname[64];
					GetClientName(i, bannedname, 64);
					BanIdentity(authstring, BanDuration[client], 4, "Забанен администратором!", "", any:0);
					if (!BanDuration[client])
					{
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s забанил игрока %s навечно", nameclient1, bannedname);
					}
					if (BanDuration[client])
					{
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s забанил игрока %s на %i минут(у)", nameclient1, bannedname, BanDuration[client]);
					}
					KickClient(i, "Забанен администратором!");
				}
			}
			i++;
		}
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public FreezeHandle(Handle:freezemenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(freezemenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					new tempstring;
					if (!FreezeStatus[i])
					{
						SetEntityMoveType(i, MoveType:0);
						FreezeStatus[i] = 1;
						JetStatus[i] = 0;
						ClipStatus[i] = 0;
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s заморозил игрока %s", nameclient1, nameclient2);
						tempstring = 1;
					}
					if (FreezeStatus[i] == 1)
					{
						if (!tempstring)
						{
							SetEntityMoveType(i, MoveType:2);
							FreezeStatus[i] = 0;
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s разморозил игрока %s", nameclient1, nameclient2);
						}
					}
				}
			}
			i++;
		}
		RemoveAllMenuItems(freezemenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				if (!FreezeStatus[i])
				{
					AddMenuItem(freezemenu, name, name, 0);
				}
				if (FreezeStatus[i] == 1)
				{
					StrCat(FreezeString, 64, name);
					AddMenuItem(freezemenu, name, FreezeString, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(freezemenu, true);
		DisplayMenu(freezemenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public KickHandle(Handle:kickmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(kickmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			if (IsClientInGame(i))
			{
				GetClientName(i, loopname, 64);
				new var1;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					new String:kickname[64];
					GetClientName(i, kickname, 64);
					KickClient(i, "Кикнут администратором");
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s кикнул игрока %s", nameclient1, kickname);
				}
			}
			i++;
		}
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public MuteHandle(Handle:mutemenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(mutemenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			if (IsClientInGame(i))
			{
				GetClientName(i, loopname, 64);
				new var1;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					new tempstring;
					if (!MuteStatus[i])
					{
						MuteStatus[i] = 1;
						ServerCommand("sm_mute %s", nameclient2);
						ServerCommand("sm_gag %s", nameclient2);
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s заткнул игрока %s", nameclient1, nameclient2);
						tempstring = 1;
					}
					if (MuteStatus[i] == 1)
					{
						if (!tempstring)
						{
							MuteStatus[i] = 0;
							ServerCommand("sm_unmute %s", nameclient2);
							ServerCommand("sm_ungag %s", nameclient2);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s включил чат и микрофон игроку %s", nameclient1, nameclient2);
						}
					}
				}
			}
			i++;
		}
		RemoveAllMenuItems(mutemenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			if (IsClientInGame(i))
			{
				GetClientName(i, name, 64);
				if (!MuteStatus[i])
				{
					AddMenuItem(mutemenu, name, name, 0);
				}
				if (MuteStatus[i] == 1)
				{
					StrCat(MuteString, 64, name);
					AddMenuItem(mutemenu, name, MuteString, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(mutemenu, true);
		DisplayMenu(mutemenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public SlayHandle(Handle:slaymenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(slaymenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					new String:slayname[64];
					SlapPlayer(i, 64000, true);
					GetClientName(i, slayname, 64);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s убил игрока %s", nameclient1, slayname);
				}
			}
			i++;
		}
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public SwapHandle(Handle:swapmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(swapmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && ClientTeam != 1)
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					new tempstring;
					if (ClientTeam == 2)
					{
						CS_SwitchTeam(i, 3);
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s переместил игрока %s в команду CT", nameclient1, nameclient2);
						tempstring = 1;
					}
					if (ClientTeam == 3)
					{
						if (!tempstring)
						{
							CS_SwitchTeam(i, 2);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s переместил игрока %s в команду T", nameclient1, nameclient2);
							tempstring = 1;
						}
					}
				}
			}
			i++;
		}
		RemoveAllMenuItems(swapmenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				ClientTeam = GetClientTeam(i);
				if (ClientTeam == 2)
				{
					StrCat(TeamPrefix, 64, name);
					AddMenuItem(swapmenu, name, TeamPrefix, 0);
				}
				if (ClientTeam == 3)
				{
					StrCat(TeamPrefix, 64, name);
					AddMenuItem(swapmenu, name, TeamPrefix, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(swapmenu, true);
		DisplayMenu(swapmenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public SpecHandle(Handle:specmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(specmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && ClientTeam != 1)
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					ChangeClientTeam(i, 1);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s переместил игрока %s в наблюдатели", nameclient1, nameclient2);
				}
			}
			i++;
		}
		RemoveAllMenuItems(specmenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				ClientTeam = GetClientTeam(i);
				if (ClientTeam != 1)
				{
					AddMenuItem(specmenu, name, name, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(specmenu, true);
		DisplayMenu(specmenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public BlindHandle(Handle:blindmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(blindmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new userid = GetClientUserId(i);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					if (BlindAlpha[i])
					{
						if (BlindAlpha[i] == 200)
						{
							BlindAlpha[i] = 255;
							ServerCommand("sm_blind #%i %i", userid, BlindAlpha[i]);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s полностью ослепил игрока %s", nameclient1, nameclient2);
							RemoveAllMenuItems(blindmenu);
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									if (!BlindAlpha[i])
									{
										GetClientName(i, name, 64);
										AddMenuItem(blindmenu, name, name, 0);
									}
									if (BlindAlpha[i] == 200)
									{
										GetClientName(i, name, 64);
										StrCat(BlindPrefix, 64, name);
										AddMenuItem(blindmenu, name, BlindPrefix, 0);
									}
									if (BlindAlpha[i] == 255)
									{
										GetClientName(i, name, 64);
										StrCat(BlindPrefix, 64, name);
										AddMenuItem(blindmenu, name, BlindPrefix, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(blindmenu, true);
							DisplayMenu(blindmenu, client, 0);
						}
						if (BlindAlpha[i] == 255)
						{
							BlindAlpha[i] = 0;
							ServerCommand("sm_blind #%i %i", userid, BlindAlpha[i]);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s убрал ослепление у игрока %s", nameclient1, nameclient2);
							RemoveAllMenuItems(blindmenu);
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									if (!BlindAlpha[i])
									{
										GetClientName(i, name, 64);
										AddMenuItem(blindmenu, name, name, 0);
									}
									if (BlindAlpha[i] == 200)
									{
										GetClientName(i, name, 64);
										StrCat(BlindPrefix, 64, name);
										AddMenuItem(blindmenu, name, BlindPrefix, 0);
									}
									if (BlindAlpha[i] == 255)
									{
										GetClientName(i, name, 64);
										StrCat(BlindPrefix, 64, name);
										AddMenuItem(blindmenu, name, BlindPrefix, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(blindmenu, true);
							DisplayMenu(blindmenu, client, 0);
						}
					}
					BlindAlpha[i] = 200;
					ServerCommand("sm_blind #%i %i", userid, BlindAlpha[i]);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s ослепил наполовину игрока %s", nameclient1, nameclient2);
					RemoveAllMenuItems(blindmenu);
					new i = 1;
					while (GetMaxClients() >= i)
					{
						new var3;
						if (IsClientInGame(i) && IsPlayerAlive(i))
						{
							if (!BlindAlpha[i])
							{
								GetClientName(i, name, 64);
								AddMenuItem(blindmenu, name, name, 0);
							}
							if (BlindAlpha[i] == 200)
							{
								GetClientName(i, name, 64);
								StrCat(BlindPrefix, 64, name);
								AddMenuItem(blindmenu, name, BlindPrefix, 0);
							}
							if (BlindAlpha[i] == 255)
							{
								GetClientName(i, name, 64);
								StrCat(BlindPrefix, 64, name);
								AddMenuItem(blindmenu, name, BlindPrefix, 0);
							}
						}
						i++;
					}
					SetMenuExitBackButton(blindmenu, true);
					DisplayMenu(blindmenu, client, 0);
				}
			}
			i++;
		}
		RemoveAllMenuItems(blindmenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				if (!BlindAlpha[i])
				{
					GetClientName(i, name, 64);
					AddMenuItem(blindmenu, name, name, 0);
				}
				if (BlindAlpha[i] == 200)
				{
					GetClientName(i, name, 64);
					StrCat(BlindPrefix, 64, name);
					AddMenuItem(blindmenu, name, BlindPrefix, 0);
				}
				if (BlindAlpha[i] == 255)
				{
					GetClientName(i, name, 64);
					StrCat(BlindPrefix, 64, name);
					AddMenuItem(blindmenu, name, BlindPrefix, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(blindmenu, true);
		DisplayMenu(blindmenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public BurnHandle(Handle:burnmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(burnmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					new String:burnname[64];
					GetClientName(i, burnname, 64);
					IgniteEntity(i, 15.0, false, 0.0, false);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s пожджег игрока %s", nameclient1, burnname);
				}
			}
			i++;
		}
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public BuryHandle(Handle:burymenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(burymenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					new Float:buryvec[3] = 0.0;
					GetClientAbsOrigin(i, buryvec);
					buryvec[2] = buryvec[2] - 50;
					TeleportEntity(i, buryvec, NULL_VECTOR, NULL_VECTOR);
					new String:buryname[64];
					GetClientName(i, buryname, 64);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s закопал игрока %s", nameclient1, buryname);
				}
			}
			i++;
		}
		RemoveAllMenuItems(burymenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				AddMenuItem(burymenu, name, name, 0);
			}
			i++;
		}
		SetMenuExitBackButton(burymenu, true);
		DisplayMenu(burymenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public UnburyHandle(Handle:unburymenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(unburymenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					new Float:buryvec[3] = 0.0;
					GetClientAbsOrigin(i, buryvec);
					buryvec[2] = buryvec[2] + 50;
					TeleportEntity(i, buryvec, NULL_VECTOR, NULL_VECTOR);
					new String:buryname[64];
					GetClientName(i, buryname, 64);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s раскопал игрока %s", nameclient1, buryname);
				}
			}
			i++;
		}
		RemoveAllMenuItems(unburymenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				AddMenuItem(unburymenu, name, name, 0);
			}
			i++;
		}
		SetMenuExitBackButton(unburymenu, true);
		DisplayMenu(unburymenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public DisarmHandle(Handle:disarmmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(disarmmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					new weaponid = GetPlayerWeaponSlot(i, 0);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 1);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 2);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 3);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 4);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 5);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 6);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 7);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 8);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 9);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 10);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 11);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 0);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 1);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 2);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 3);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 4);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 5);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 6);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 7);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 8);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 9);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 10);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 11);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 0);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 1);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 2);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 3);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 4);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 5);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 6);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 7);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 8);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 9);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 10);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 11);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 0);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 1);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 2);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 3);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 4);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 5);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 6);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 7);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 8);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 9);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 10);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 11);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					new String:disarmname[64];
					GetClientName(i, disarmname, 64);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s обезоружил игрока %s", nameclient1, disarmname);
				}
			}
			i++;
		}
		RemoveAllMenuItems(disarmmenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				AddMenuItem(disarmmenu, name, name, 0);
			}
			i++;
		}
		SetMenuExitBackButton(disarmmenu, true);
		DisplayMenu(disarmmenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public DisguiseHandle(Handle:disguiseplayermenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(disguiseplayermenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					if (DisguiseStatus[i])
					{
						if (DisguiseStatus[i] == 1)
						{
							PrecacheModel(DisguiseAdminString[client], false);
							SetEntityModel(i, DisguiseAdminString[client]);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s замаскировал игрока %s под облик %s", nameclient1, nameclient2, DisguiseMessage[client]);
							RemoveAllMenuItems(disguiseplayermenu);
							SetMenuTitle(disguiseplayermenu, "Выберите игрока");
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									if (DisguiseStatus[i] == 1)
									{
										GetClientName(i, name, 64);
										StrCat(DisguisePrefix, 64, name);
										AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
									}
									if (!DisguiseStatus[i])
									{
										GetClientName(i, name, 64);
										AddMenuItem(disguiseplayermenu, name, name, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(disguiseplayermenu, true);
							DisplayMenu(disguiseplayermenu, client, 0);
						}
					}
					GetClientModel(i, playermodel[i], 100);
					PrecacheModel(DisguiseAdminString[client], false);
					SetEntityModel(i, DisguiseAdminString[client]);
					DisguiseStatus[i] = 1;
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s замаскировал игрока %s под облик %s", nameclient1, nameclient2, DisguiseMessage[client]);
					RemoveAllMenuItems(disguiseplayermenu);
					SetMenuTitle(disguiseplayermenu, "Выберите игрока");
					new i = 1;
					while (GetMaxClients() >= i)
					{
						new var3;
						if (IsClientInGame(i) && IsPlayerAlive(i))
						{
							if (DisguiseStatus[i] == 1)
							{
								GetClientName(i, name, 64);
								StrCat(DisguisePrefix, 64, name);
								AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
							}
							if (!DisguiseStatus[i])
							{
								GetClientName(i, name, 64);
								AddMenuItem(disguiseplayermenu, name, name, 0);
							}
						}
						i++;
					}
					SetMenuExitBackButton(disguiseplayermenu, true);
					DisplayMenu(disguiseplayermenu, client, 0);
				}
			}
			i++;
		}
		RemoveAllMenuItems(disguiseplayermenu);
		SetMenuTitle(disguiseplayermenu, "Выберите игрока");
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				if (DisguiseStatus[i] == 1)
				{
					GetClientName(i, name, 64);
					StrCat(DisguisePrefix, 64, name);
					AddMenuItem(disguiseplayermenu, name, DisguisePrefix, 0);
				}
				if (!DisguiseStatus[i])
				{
					GetClientName(i, name, 64);
					AddMenuItem(disguiseplayermenu, name, name, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(disguiseplayermenu, true);
		DisplayMenu(disguiseplayermenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public UndisguiseHandle(Handle:undisguise, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(undisguise, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					if (DisguiseStatus[i] == 1)
					{
						PrecacheModel(playermodel[i], false);
						SetEntityModel(i, playermodel[i]);
						DisguiseStatus[i] = 0;
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s убрал модель с игрока %s", nameclient1, nameclient2);
					}
					if (!DisguiseStatus[i])
					{
						PrintToChat(client, "\x03[\x04FSA\x03] \x01Игрок не замаскиррован...");
					}
				}
			}
			i++;
		}
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public DrugHandle(Handle:drugmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(drugmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					if (DrugStatus[i])
					{
						if (DrugStatus[i] == 1)
						{
							DrugStatus[i] = 0;
							new druguserid = GetClientUserId(i);
							ServerCommand("sm_drug #%i", druguserid);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s убрал опьянение с игрока %s", nameclient1, nameclient2);
							RemoveAllMenuItems(drugmenu);
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									GetClientName(i, name, 64);
									if (!DrugStatus[i])
									{
										AddMenuItem(drugmenu, name, name, 0);
									}
									if (DrugStatus[i] == 1)
									{
										StrCat(DrugString, 64, name);
										AddMenuItem(drugmenu, name, DrugString, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(drugmenu, true);
							DisplayMenu(drugmenu, client, 0);
						}
					}
					DrugStatus[i] = 1;
					new druguserid = GetClientUserId(i);
					ServerCommand("sm_drug #%i", druguserid);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s опьянил игрока %s", nameclient1, nameclient2);
					RemoveAllMenuItems(drugmenu);
					new i = 1;
					while (GetMaxClients() >= i)
					{
						new var3;
						if (IsClientInGame(i) && IsPlayerAlive(i))
						{
							GetClientName(i, name, 64);
							if (!DrugStatus[i])
							{
								AddMenuItem(drugmenu, name, name, 0);
							}
							if (DrugStatus[i] == 1)
							{
								StrCat(DrugString, 64, name);
								AddMenuItem(drugmenu, name, DrugString, 0);
							}
						}
						i++;
					}
					SetMenuExitBackButton(drugmenu, true);
					DisplayMenu(drugmenu, client, 0);
				}
			}
			i++;
		}
		RemoveAllMenuItems(drugmenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				if (!DrugStatus[i])
				{
					AddMenuItem(drugmenu, name, name, 0);
				}
				if (DrugStatus[i] == 1)
				{
					StrCat(DrugString, 64, name);
					AddMenuItem(drugmenu, name, DrugString, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(drugmenu, true);
		DisplayMenu(drugmenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public GodHandle(Handle:godmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(godmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					if (GodStatus[i])
					{
						if (GodStatus[i] == 1)
						{
							GodStatus[i] = 0;
							SetEntProp(i, PropType:1, "m_takedamage", any:2, 1);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s убрал у игрока %s режим бессмертия", nameclient1, nameclient2);
							RemoveAllMenuItems(godmenu);
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									GetClientName(i, name, 64);
									if (!GodStatus[i])
									{
										AddMenuItem(godmenu, name, name, 0);
									}
									if (GodStatus[i] == 1)
									{
										StrCat(GodString, 64, name);
										AddMenuItem(godmenu, name, GodString, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(godmenu, true);
							DisplayMenu(godmenu, client, 0);
						}
					}
					GodStatus[i] = 1;
					SetEntProp(i, PropType:1, "m_takedamage", any:0, 1);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s установил игроку %s режим БЕССМЕРТИЯ", nameclient1, nameclient2);
					RemoveAllMenuItems(godmenu);
					new i = 1;
					while (GetMaxClients() >= i)
					{
						new var3;
						if (IsClientInGame(i) && IsPlayerAlive(i))
						{
							GetClientName(i, name, 64);
							if (!GodStatus[i])
							{
								AddMenuItem(godmenu, name, name, 0);
							}
							if (GodStatus[i] == 1)
							{
								StrCat(GodString, 64, name);
								AddMenuItem(godmenu, name, GodString, 0);
							}
						}
						i++;
					}
					SetMenuExitBackButton(godmenu, true);
					DisplayMenu(godmenu, client, 0);
				}
			}
			i++;
		}
		RemoveAllMenuItems(godmenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				if (!GodStatus[i])
				{
					AddMenuItem(godmenu, name, name, 0);
				}
				if (GodStatus[i] == 1)
				{
					StrCat(GodString, 64, name);
					AddMenuItem(godmenu, name, GodString, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(godmenu, true);
		DisplayMenu(godmenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public InvisHandle(Handle:invismenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(invismenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					if (InvisStatus[i])
					{
						if (InvisStatus[i] == 1)
						{
							InvisStatus[i] = 0;
							SetEntityRenderMode(i, RenderMode:0);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s сделал %s видимым", nameclient1, nameclient2);
							RemoveAllMenuItems(invismenu);
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									GetClientName(i, name, 64);
									if (!InvisStatus[i])
									{
										AddMenuItem(invismenu, name, name, 0);
									}
									if (InvisStatus[i] == 1)
									{
										StrCat(InvisString, 64, name);
										AddMenuItem(invismenu, name, InvisString, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(invismenu, true);
							DisplayMenu(invismenu, client, 0);
						}
					}
					InvisStatus[i] = 1;
					SetEntityRenderMode(i, RenderMode:10);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s сделал %s невидимым", nameclient1, nameclient2);
					RemoveAllMenuItems(invismenu);
					new i = 1;
					while (GetMaxClients() >= i)
					{
						new var3;
						if (IsClientInGame(i) && IsPlayerAlive(i))
						{
							GetClientName(i, name, 64);
							if (!InvisStatus[i])
							{
								AddMenuItem(invismenu, name, name, 0);
							}
							if (InvisStatus[i] == 1)
							{
								StrCat(InvisString, 64, name);
								AddMenuItem(invismenu, name, InvisString, 0);
							}
						}
						i++;
					}
					SetMenuExitBackButton(invismenu, true);
					DisplayMenu(invismenu, client, 0);
				}
			}
			i++;
		}
		RemoveAllMenuItems(invismenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				if (!InvisStatus[i])
				{
					AddMenuItem(invismenu, name, name, 0);
				}
				if (InvisStatus[i] == 1)
				{
					StrCat(InvisString, 64, name);
					AddMenuItem(invismenu, name, InvisString, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(invismenu, true);
		DisplayMenu(invismenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public JetHandle(Handle:jetmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(jetmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					if (JetStatus[i])
					{
						if (JetStatus[i] == 1)
						{
							JetStatus[i] = 0;
							SetEntityMoveType(i, MoveType:2);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s убрал Jetpack у %s", nameclient1, nameclient2);
							RemoveAllMenuItems(jetmenu);
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									GetClientName(i, name, 64);
									if (!JetStatus[i])
									{
										AddMenuItem(jetmenu, name, name, 0);
									}
									if (JetStatus[i] == 1)
									{
										StrCat(JetString, 64, name);
										AddMenuItem(jetmenu, name, JetString, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(jetmenu, true);
							DisplayMenu(jetmenu, client, 0);
						}
					}
					JetStatus[i] = 1;
					FreezeStatus[i] = 0;
					ClipStatus[i] = 0;
					SetEntityMoveType(i, MoveType:4);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s дал игроку %s Jetpack", nameclient1, nameclient2);
					RemoveAllMenuItems(jetmenu);
					new i = 1;
					while (GetMaxClients() >= i)
					{
						new var3;
						if (IsClientInGame(i) && IsPlayerAlive(i))
						{
							GetClientName(i, name, 64);
							if (!JetStatus[i])
							{
								AddMenuItem(jetmenu, name, name, 0);
							}
							if (JetStatus[i] == 1)
							{
								StrCat(JetString, 64, name);
								AddMenuItem(jetmenu, name, JetString, 0);
							}
						}
						i++;
					}
					SetMenuExitBackButton(jetmenu, true);
					DisplayMenu(jetmenu, client, 0);
				}
			}
			i++;
		}
		RemoveAllMenuItems(jetmenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				if (!JetStatus[i])
				{
					AddMenuItem(jetmenu, name, name, 0);
				}
				if (JetStatus[i] == 1)
				{
					StrCat(JetString, 64, name);
					AddMenuItem(jetmenu, name, JetString, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(jetmenu, true);
		DisplayMenu(jetmenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public ClipHandle(Handle:clipmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(clipmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					if (ClipStatus[i])
					{
						if (ClipStatus[i] == 1)
						{
							ClipStatus[i] = 0;
							SetEntityMoveType(i, MoveType:2);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s выключил игроку %s Noclip", nameclient1, nameclient2);
							RemoveAllMenuItems(clipmenu);
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									GetClientName(i, name, 64);
									if (!ClipStatus[i])
									{
										AddMenuItem(clipmenu, name, name, 0);
									}
									if (ClipStatus[i] == 1)
									{
										StrCat(ClipString, 64, name);
										AddMenuItem(clipmenu, name, ClipString, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(clipmenu, true);
							DisplayMenu(clipmenu, client, 0);
						}
					}
					ClipStatus[i] = 1;
					FreezeStatus[i] = 0;
					JetStatus[i] = 0;
					SetEntityMoveType(i, MoveType:8);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s включил игроку %s Noclip", nameclient1, nameclient2);
					RemoveAllMenuItems(clipmenu);
					new i = 1;
					while (GetMaxClients() >= i)
					{
						new var3;
						if (IsClientInGame(i) && IsPlayerAlive(i))
						{
							GetClientName(i, name, 64);
							if (!ClipStatus[i])
							{
								AddMenuItem(clipmenu, name, name, 0);
							}
							if (ClipStatus[i] == 1)
							{
								StrCat(ClipString, 64, name);
								AddMenuItem(clipmenu, name, ClipString, 0);
							}
						}
						i++;
					}
					SetMenuExitBackButton(clipmenu, true);
					DisplayMenu(clipmenu, client, 0);
				}
			}
			i++;
		}
		RemoveAllMenuItems(clipmenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				if (!ClipStatus[i])
				{
					AddMenuItem(clipmenu, name, name, 0);
				}
				if (ClipStatus[i] == 1)
				{
					StrCat(ClipString, 64, name);
					AddMenuItem(clipmenu, name, ClipString, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(clipmenu, true);
		DisplayMenu(clipmenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public RegenHandle(Handle:regenmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(regenmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					if (RegenStatus[i])
					{
						if (RegenStatus[i] == 1)
						{
							RegenStatus[i] = 0;
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s removed %s's Regeneration", nameclient1, nameclient2);
							RemoveAllMenuItems(regenmenu);
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									GetClientName(i, name, 64);
									if (!RegenStatus[i])
									{
										AddMenuItem(regenmenu, name, name, 0);
									}
									if (RegenStatus[i] == 1)
									{
										StrCat(RegenString, 64, name);
										AddMenuItem(regenmenu, name, RegenString, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(regenmenu, true);
							DisplayMenu(regenmenu, client, 0);
						}
					}
					RegenStatus[i] = 1;
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s gave %s Regeneration", nameclient1, nameclient2);
					RemoveAllMenuItems(regenmenu);
					new i = 1;
					while (GetMaxClients() >= i)
					{
						new var3;
						if (IsClientInGame(i) && IsPlayerAlive(i))
						{
							GetClientName(i, name, 64);
							if (!RegenStatus[i])
							{
								AddMenuItem(regenmenu, name, name, 0);
							}
							if (RegenStatus[i] == 1)
							{
								StrCat(RegenString, 64, name);
								AddMenuItem(regenmenu, name, RegenString, 0);
							}
						}
						i++;
					}
					SetMenuExitBackButton(regenmenu, true);
					DisplayMenu(regenmenu, client, 0);
				}
			}
			i++;
		}
		RemoveAllMenuItems(regenmenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				if (!RegenStatus[i])
				{
					AddMenuItem(regenmenu, name, name, 0);
				}
				if (RegenStatus[i] == 1)
				{
					StrCat(RegenString, 64, name);
					AddMenuItem(regenmenu, name, RegenString, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(regenmenu, true);
		DisplayMenu(regenmenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public ReviveHandle(Handle:revive, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameplayer[64];
		new String:loopname[64];
		GetMenuItem(revive, param2, nameplayer, 64, 0, "", 0);
		new String:clientname[64];
		GetClientName(client, clientname, 64);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			if (IsClientInGame(i))
			{
				GetClientName(i, loopname, 64);
				new var1;
				if (StrEqual(loopname, nameplayer, true) && IsClientInGame(i))
				{
					CS_RespawnPlayer(i);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s создал %s", clientname, nameplayer);
				}
			}
			i++;
		}
		RemoveAllMenuItems(revive);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var2;
			if (IsClientInGame(i) && !IsPlayerAlive(i) && GetClientTeam(i) != 1)
			{
				GetClientName(i, name, 64);
				AddMenuItem(revive, name, name, 0);
			}
			i++;
		}
		SetMenuExitBackButton(revive, true);
		DisplayMenu(revive, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public RocketHandle(Handle:rocketmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(rocketmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					if (RocketStatus[i])
					{
						if (RocketStatus[i] == 1)
						{
							RocketStatus[i] = 0;
							if (RocketType == 1)
							{
								SetEntityGravity(i, 1.0);
							}
							if (RocketType == 2)
							{
								SetEntityMoveType(i, MoveType:2);
							}
							new k = 1;
							while (GetMaxClients() + 1 >= k)
							{
								StopSound(k, 6, "weapons/rpg/rocket1.wav");
								k++;
							}
							AcceptEntityInput(sprite[i], "Kill", -1, -1, 0);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s removed %s's rocket transformation", nameclient1, nameclient2);
							RemoveAllMenuItems(rocketmenu);
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									GetClientName(i, name, 64);
									if (!RocketStatus[i])
									{
										AddMenuItem(rocketmenu, name, name, 0);
									}
									if (RocketStatus[i] == 1)
									{
										StrCat(RocketString, 64, name);
										AddMenuItem(rocketmenu, name, RocketString, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(rocketmenu, true);
							DisplayMenu(rocketmenu, client, 0);
						}
					}
					RocketStatus[i] = 1;
					if (RocketType == 1)
					{
						SetEntityGravity(i, -0.1);
						new Float:ABSORIGIN[3] = 0.0;
						GetClientAbsOrigin(i, ABSORIGIN);
						ABSORIGIN[2] = ABSORIGIN[2] + 5;
						TeleportEntity(i, ABSORIGIN, NULL_VECTOR, NULL_VECTOR);
					}
					if (RocketType == 2)
					{
						SetEntityMoveType(i, MoveType:0);
					}
					sprite[i] = CreateEntityByName("env_spritetrail", -1);
					new Float:spriteorigin[3] = 0.0;
					GetClientAbsOrigin(i, spriteorigin);
					DispatchKeyValue(i, "targetname", nameclient2);
					PrecacheModel("sprites/sprite_fire01.vmt", false);
					DispatchKeyValue(sprite[i], "model", "sprites/sprite_fire01.vmt");
					DispatchKeyValue(sprite[i], "endwidth", "2.0");
					DispatchKeyValue(sprite[i], "lifetime", "2.0");
					DispatchKeyValue(sprite[i], "startwidth", "16.0");
					DispatchKeyValue(sprite[i], "renderamt", "255");
					DispatchKeyValue(sprite[i], "rendercolor", "255 255 255");
					DispatchKeyValue(sprite[i], "rendermode", "5");
					DispatchKeyValue(sprite[i], "parentname", nameclient2);
					DispatchSpawn(sprite[i]);
					TeleportEntity(sprite[i], spriteorigin, NULL_VECTOR, NULL_VECTOR);
					SetVariantString(nameclient2);
					AcceptEntityInput(sprite[i], "SetParent", -1, -1, 0);
					PrecacheSound("weapons/rpg/rocketfire1.wav", false);
					EmitSoundToAll("weapons/rpg/rocketfire1.wav", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
					CreateTimer(0.25, RocketLaunchTimer, any:0, 0);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s посадил игрока %s на ракету", nameclient1, nameclient2);
					RemoveAllMenuItems(rocketmenu);
					new i = 1;
					while (GetMaxClients() >= i)
					{
						new var3;
						if (IsClientInGame(i) && IsPlayerAlive(i))
						{
							GetClientName(i, name, 64);
							if (!RocketStatus[i])
							{
								AddMenuItem(rocketmenu, name, name, 0);
							}
							if (RocketStatus[i] == 1)
							{
								StrCat(RocketString, 64, name);
								AddMenuItem(rocketmenu, name, RocketString, 0);
							}
						}
						i++;
					}
					SetMenuExitBackButton(rocketmenu, true);
					DisplayMenu(rocketmenu, client, 0);
				}
			}
			i++;
		}
		RemoveAllMenuItems(rocketmenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				if (!RocketStatus[i])
				{
					AddMenuItem(rocketmenu, name, name, 0);
				}
				if (RocketStatus[i] == 1)
				{
					StrCat(RocketString, 64, name);
					AddMenuItem(rocketmenu, name, RocketString, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(rocketmenu, true);
		DisplayMenu(rocketmenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public SlapMenu(Handle:slapmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(slapmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					new String:slayname[64];
					SlapPlayer(i, slapdamage[client], true);
					GetClientName(i, slayname, 64);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s шлепнул игрока %s с повреждением в %i хп", nameclient1, slayname, slapdamage[client]);
				}
			}
			i++;
		}
		RemoveAllMenuItems(slapmenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				AddMenuItem(slapmenu, name, name, 0);
			}
			i++;
		}
		SetMenuExitBackButton(slapmenu, true);
		DisplayMenu(slapmenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public SpeedHandle(Handle:speedmenu, MenuAction:action, client, param2)
{
	if (action == MenuAction:4)
	{
		new String:nameclient1[64];
		new String:nameclient2[64];
		new String:loopname[64];
		GetClientName(client, nameclient1, 64);
		GetMenuItem(speedmenu, param2, nameclient2, 64, 0, "", 0);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var1;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, loopname, 64);
				new var2;
				if (StrEqual(loopname, nameclient2, true) && IsClientInGame(i))
				{
					if (SpeedIndex[i])
					{
						if (SpeedIndex[i] == 1)
						{
							SpeedIndex[i] = 2;
							SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 3.0);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s увеличил скорость игрока %s в три раза", nameclient1, nameclient2);
							RemoveAllMenuItems(speedmenu);
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									GetClientName(i, name, 64);
									if (!SpeedIndex[i])
									{
										AddMenuItem(speedmenu, name, name, 0);
									}
									if (SpeedIndex[i] == 1)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
									if (SpeedIndex[i] == 2)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
									if (SpeedIndex[i] == 3)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
									if (SpeedIndex[i] == 4)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(speedmenu, true);
							DisplayMenu(speedmenu, client, 0);
						}
						if (SpeedIndex[i] == 2)
						{
							SpeedIndex[i] = 3;
							SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 4.0);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s увеличил скорость игрока %s в четыре раза", nameclient1, nameclient2);
							RemoveAllMenuItems(speedmenu);
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									GetClientName(i, name, 64);
									if (!SpeedIndex[i])
									{
										AddMenuItem(speedmenu, name, name, 0);
									}
									if (SpeedIndex[i] == 1)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
									if (SpeedIndex[i] == 2)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
									if (SpeedIndex[i] == 3)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
									if (SpeedIndex[i] == 4)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(speedmenu, true);
							DisplayMenu(speedmenu, client, 0);
						}
						if (SpeedIndex[i] == 3)
						{
							SpeedIndex[i] = 4;
							SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 0.5);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s уменьшил скорость игрока %s в два раза", nameclient1, nameclient2);
							RemoveAllMenuItems(speedmenu);
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									GetClientName(i, name, 64);
									if (!SpeedIndex[i])
									{
										AddMenuItem(speedmenu, name, name, 0);
									}
									if (SpeedIndex[i] == 1)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
									if (SpeedIndex[i] == 2)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
									if (SpeedIndex[i] == 3)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
									if (SpeedIndex[i] == 4)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(speedmenu, true);
							DisplayMenu(speedmenu, client, 0);
						}
						if (SpeedIndex[i] == 4)
						{
							SpeedIndex[i] = 0;
							SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 1.0);
							PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s установил игроку %s нормальную скорость", nameclient1, nameclient2);
							RemoveAllMenuItems(speedmenu);
							new i = 1;
							while (GetMaxClients() >= i)
							{
								new var3;
								if (IsClientInGame(i) && IsPlayerAlive(i))
								{
									GetClientName(i, name, 64);
									if (!SpeedIndex[i])
									{
										AddMenuItem(speedmenu, name, name, 0);
									}
									if (SpeedIndex[i] == 1)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
									if (SpeedIndex[i] == 2)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
									if (SpeedIndex[i] == 3)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
									if (SpeedIndex[i] == 4)
									{
										StrCat(SpeedString, 64, name);
										AddMenuItem(speedmenu, name, SpeedString, 0);
									}
								}
								i++;
							}
							SetMenuExitBackButton(speedmenu, true);
							DisplayMenu(speedmenu, client, 0);
						}
					}
					SpeedIndex[i] = 1;
					SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 2.0);
					PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s увеличил скорость игрока %s в два раза", nameclient1, nameclient2);
					RemoveAllMenuItems(speedmenu);
					new i = 1;
					while (GetMaxClients() >= i)
					{
						new var3;
						if (IsClientInGame(i) && IsPlayerAlive(i))
						{
							GetClientName(i, name, 64);
							if (!SpeedIndex[i])
							{
								AddMenuItem(speedmenu, name, name, 0);
							}
							if (SpeedIndex[i] == 1)
							{
								StrCat(SpeedString, 64, name);
								AddMenuItem(speedmenu, name, SpeedString, 0);
							}
							if (SpeedIndex[i] == 2)
							{
								StrCat(SpeedString, 64, name);
								AddMenuItem(speedmenu, name, SpeedString, 0);
							}
							if (SpeedIndex[i] == 3)
							{
								StrCat(SpeedString, 64, name);
								AddMenuItem(speedmenu, name, SpeedString, 0);
							}
							if (SpeedIndex[i] == 4)
							{
								StrCat(SpeedString, 64, name);
								AddMenuItem(speedmenu, name, SpeedString, 0);
							}
						}
						i++;
					}
					SetMenuExitBackButton(speedmenu, true);
					DisplayMenu(speedmenu, client, 0);
				}
			}
			i++;
		}
		RemoveAllMenuItems(speedmenu);
		new i = 1;
		while (GetMaxClients() >= i)
		{
			new var3;
			if (IsClientInGame(i) && IsPlayerAlive(i))
			{
				GetClientName(i, name, 64);
				if (!SpeedIndex[i])
				{
					AddMenuItem(speedmenu, name, name, 0);
				}
				if (SpeedIndex[i] == 1)
				{
					StrCat(SpeedString, 64, name);
					AddMenuItem(speedmenu, name, SpeedString, 0);
				}
				if (SpeedIndex[i] == 2)
				{
					StrCat(SpeedString, 64, name);
					AddMenuItem(speedmenu, name, SpeedString, 0);
				}
				if (SpeedIndex[i] == 3)
				{
					StrCat(SpeedString, 64, name);
					AddMenuItem(speedmenu, name, SpeedString, 0);
				}
				if (SpeedIndex[i] == 4)
				{
					StrCat(SpeedString, 64, name);
					AddMenuItem(speedmenu, name, SpeedString, 0);
				}
			}
			i++;
		}
		SetMenuExitBackButton(speedmenu, true);
		DisplayMenu(speedmenu, client, 0);
	}
	else
	{
		if (action == MenuAction:8)
		{
			if (param2 == -6)
			{
				new Handle:menu = CreateMenu(MenuHandler1, MenuAction:28);
				SetMenuTitle(menu, "Главное меню");
				AddMenuItem(menu, "Player Management", "Управление игроками", 0);
				AddMenuItem(menu, "Fun Commands", "Забавные команды", 0);
				AddMenuItem(menu, "Prop Menu", "Управление предметами", 0);
				AddMenuItem(menu, "Play Music", "Проигрывание музыки", 0);
				SetMenuExitButton(menu, true);
				SetMenuExitBackButton(menu, false);
				DisplayMenu(menu, client, 0);
			}
		}
	}
	return 0;
}

public bool:TraceRayDontHitSelf(entity, mask, any:data)
{
	if (data == entity)
	{
		return false;
	}
	return true;
}

public prop_physics_create(client)
{
	new Float:VecOrigin[3] = 0.0;
	new Float:VecAngles[3] = 0.0;
	new prop = CreateEntityByName("prop_physics_override", -1);
	DispatchKeyValue(prop, "model", modelname);
	if (PropHealth == 1)
	{
		DispatchKeyValue(prop, "health", "1");
	}
	if (Explode == 1)
	{
		DispatchKeyValue(prop, "exploderadius", "1000");
		DispatchKeyValue(prop, "explodedamage", "1");
	}
	GetClientEyePosition(client, VecOrigin);
	GetClientEyeAngles(client, VecAngles);
	TR_TraceRayFilter(VecOrigin, VecAngles, 33570827, RayType:1, TraceRayDontHitSelf, client);
	TR_GetEndPosition(VecOrigin, Handle:0);
	VecAngles[0] = 0.0;
	VecAngles[2] = 0.0;
	VecOrigin[2] = VecOrigin[2] + 10;
	DispatchKeyValue(prop, "StartDisabled", "false");
	DispatchKeyValue(prop, "Solid", "6");
	AcceptEntityInput(prop, "TurnOn", prop, prop, 0);
	SetEntProp(prop, PropType:1, "m_CollisionGroup", any:5, 4);
	SetEntProp(prop, PropType:1, "m_nSolidType", any:6, 4);
	SetEntityMoveType(prop, MoveType:6);
	DispatchSpawn(prop);
	TeleportEntity(prop, VecOrigin, VecAngles, NULL_VECTOR);
	AcceptEntityInput(prop, "EnableCollision", -1, -1, 0);
	GetClientName(client, name, 64);
	PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s создал %s", name, phrase);
	return 0;
}

public prop_dynamic_create(client)
{
	new Float:VecOrigin[3] = 0.0;
	new Float:VecAngles[3] = 0.0;
	new Float:normal[3] = 0.0;
	new prop = CreateEntityByName("prop_dynamic_override", -1);
	DispatchKeyValue(prop, "model", modelname);
	GetClientEyePosition(client, VecOrigin);
	GetClientEyeAngles(client, VecAngles);
	TR_TraceRayFilter(VecOrigin, VecAngles, 33570827, RayType:1, TraceRayDontHitSelf, client);
	TR_GetEndPosition(VecOrigin, Handle:0);
	TR_GetPlaneNormal(Handle:0, normal);
	GetVectorAngles(normal, normal);
	normal[0] = normal[0] + 90.0;
	DispatchKeyValue(prop, "StartDisabled", "false");
	DispatchKeyValue(prop, "Solid", "6");
	SetEntProp(prop, PropType:1, "m_nSolidType", any:6, 4);
	DispatchKeyValue(prop, "spawnflags", "8");
	SetEntProp(prop, PropType:1, "m_CollisionGroup", any:5, 4);
	TeleportEntity(prop, VecOrigin, normal, NULL_VECTOR);
	DispatchSpawn(prop);
	AcceptEntityInput(prop, "EnableCollision", -1, -1, 0);
	AcceptEntityInput(prop, "TurnOn", prop, prop, 0);
	GetClientName(client, name, 64);
	PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s создал %s", name, phrase);
	return 0;
}

public prop_npc_create(client)
{
	new Float:VecOrigin[3] = 0.0;
	new Float:VecAngles[3] = 0.0;
	new Float:normal[3] = 0.0;
	new prop = CreateEntityByName("prop_dynamic_override", -1);
	DispatchKeyValue(prop, "model", modelname);
	GetClientEyePosition(client, VecOrigin);
	GetClientEyeAngles(client, VecAngles);
	TR_TraceRayFilter(VecOrigin, VecAngles, 33570827, RayType:1, TraceRayDontHitSelf, client);
	TR_GetEndPosition(VecOrigin, Handle:0);
	TR_GetPlaneNormal(Handle:0, normal);
	GetVectorAngles(normal, normal);
	normal[0] = normal[0] + 90.0;
	DispatchKeyValue(prop, "StartDisabled", "false");
	DispatchKeyValue(prop, "Solid", "6");
	SetEntProp(prop, PropType:1, "m_nSolidType", any:6, 4);
	DispatchKeyValue(prop, "spawnflags", "8");
	SetEntProp(prop, PropType:1, "m_CollisionGroup", any:5, 4);
	TeleportEntity(prop, VecOrigin, normal, NULL_VECTOR);
	DispatchSpawn(prop);
	AcceptEntityInput(prop, "EnableCollision", -1, -1, 0);
	AcceptEntityInput(prop, "TurnOn", prop, prop, 0);
	GetClientName(client, name, 64);
	PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s создал %s", name, phrase);
	return 0;
}

public Action:GameStart(Handle:Event, String:Name[], bool:Broadcast)
{
	new i = 1;
	while (GetMaxClients() + 1 >= i)
	{
		if (IsValidEntity(i))
		{
			FreezeStatus[i] = 0;
			DisguiseStatus[i] = 0;
			DrugStatus[i] = 0;
			GodStatus[i] = 0;
			InvisStatus[i] = 0;
			JetStatus[i] = 0;
			RocketStatus[i] = 0;
			RegenStatus[i] = 0;
			SetEntityGravity(i, 1.0);
			SpeedIndex[i] = 0;
		}
		i++;
	}
	return Action:0;
}

public Action:StealCookies(client, args)
{
	new String:StolenCookies[64];
	new Target_List[64];
	new String:processed[64];
	new bool:thebool;
	GetClientName(client, name, 64);
	if (args < 1)
	{
		PrintToConsole(client, "Используйте: stealcookies <ник игрока>");
	}
	if (args > 1)
	{
		PrintToConsole(client, "Используйте: stealcookies <ник игрока>");
	}
	if (args == 1)
	{
		GetCmdArg(1, StolenCookies, 64);
		if (ProcessTargetString(StolenCookies, client, Target_List, 64, 4, processed, 64, thebool) == 1)
		{
			ProcessTargetString(StolenCookies, client, Target_List, 64, 4, processed, 64, thebool);
			PrintToChatAll("\x04%s stole %s's cookies!", name, processed);
		}
		if (ProcessTargetString(StolenCookies, client, Target_List, 64, 4, processed, 64, thebool) != 1)
		{
			PrintToChat(client, "[Ошибка] Совпадений не найдено или же допущена синтаксическая ошибка");
		}
	}
	return Action:0;
}

public Action:TimerRepeat(Handle:timer)
{
	new i = 1;
	while (GetMaxClients() + 1 >= i)
	{
		new var1;
		if (RegenStatus[i] == 1 && GetClientHealth(i) <= 10000 && IsClientInGame(i) && IsPlayerAlive(i))
		{
			new HealthHP = GetClientHealth(i);
			new ResultingHP = HealthHP + 500;
			SetEntityHealth(i, ResultingHP);
		}
		i++;
	}
	return Action:0;
}

public Action:RocketTimer(Handle:timer)
{
	new i = 1;
	while (GetMaxClients() + 1 >= i)
	{
		new var1;
		if (RocketStatus[i] == 1 && IsClientInGame(i) && IsPlayerAlive(i))
		{
			if (Rocket1[i] == 1)
			{
				GetClientAbsOrigin(i, RocketVec1[i]);
				RocketZ1[i] = RocketVec1[i][2];
				if (RocketZ1[i] == RocketZ2[i])
				{
					new Handle:rocketwillkill = FindConVar("fsa_rocket_will_kill");
					new RocketWillKill = GetConVarInt(rocketwillkill);
					if (RocketWillKill == 1)
					{
						ForcePlayerSuicide(i);
					}
					new k = 1;
					while (GetMaxClients() + 1 >= k)
					{
						StopSound(k, 6, "weapons/rpg/rocket1.wav");
						k++;
					}
					AcceptEntityInput(sprite[i], "Kill", -1, -1, 0);
					PrecacheSound("weapons/explode3.wav", false);
					EmitSoundToAll("weapons/explode3.wav", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
				}
				Rocket1[i] = 0;
			}
			if (!Rocket1[i])
			{
				GetClientAbsOrigin(i, RocketVec2[i]);
				RocketZ2[i] = RocketVec2[i][2];
				if (RocketZ2[i] == RocketZ1[i])
				{
					new Handle:rocketwillkill = FindConVar("fsa_rocket_will_kill");
					new RocketWillKill = GetConVarInt(rocketwillkill);
					if (RocketWillKill == 1)
					{
						ForcePlayerSuicide(i);
					}
					new k = 1;
					while (GetMaxClients() + 1 >= k)
					{
						StopSound(k, 6, "weapons/rpg/rocket1.wav");
						k++;
					}
					AcceptEntityInput(sprite[i], "Kill", -1, -1, 0);
					PrecacheSound("weapons/explode3.wav", false);
					EmitSoundToAll("weapons/explode3.wav", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
				}
				Rocket1[i] = 1;
			}
		}
		i++;
	}
	return Action:0;
}

public Action:RocketTimer2(Handle:timer)
{
	new i = 1;
	while (GetMaxClients() + 1 >= i)
	{
		new var1;
		if (RocketStatus[i] == 1 && IsClientInGame(i) && IsPlayerAlive(i))
		{
			new Float:RocketAbsOrigin[3] = 0.0;
			new Float:RocketEndOrigin[3] = 0.0;
			GetClientEyePosition(i, RocketAbsOrigin);
			new Float:AbsAngle[3] = 0.0;
			AbsAngle[0] = -90.0;
			AbsAngle[1] = 0.0;
			AbsAngle[2] = 0.0;
			TR_TraceRayFilter(RocketAbsOrigin, AbsAngle, 33570827, RayType:1, TraceRayDontHitSelf, any:0);
			TR_GetEndPosition(RocketEndOrigin, Handle:0);
			new Handle:rocketspeed = FindConVar("fsa_rocket_speed");
			new Float:rocketspeedfloat = GetConVarFloat(rocketspeed);
			new Float:DistanceBetween = RocketEndOrigin[2] - RocketAbsOrigin[2];
			if (DistanceBetween <= rocketspeedfloat + 0.1)
			{
				new Handle:rocketwillkill = FindConVar("fsa_rocket_will_kill");
				new RocketWillKill = GetConVarInt(rocketwillkill);
				if (RocketWillKill == 1)
				{
					ForcePlayerSuicide(i);
				}
				new k = 1;
				while (GetMaxClients() + 1 >= k)
				{
					StopSound(k, 6, "weapons/rpg/rocket1.wav");
					k++;
				}
				AcceptEntityInput(sprite[i], "Kill", -1, -1, 0);
				PrecacheSound("weapons/explode3.wav", false);
				EmitSoundToAll("weapons/explode3.wav", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
				if (IsPlayerAlive(i))
				{
					RocketStatus[i] = 0;
					SetEntityMoveType(i, MoveType:2);
					new Float:ClientOrigin[3] = 0.0;
					GetClientAbsOrigin(i, ClientOrigin);
					ClientOrigin[2] = ClientOrigin[2] - 5.0;
					TeleportEntity(i, ClientOrigin, NULL_VECTOR, NULL_VECTOR);
				}
			}
			else
			{
				if (DistanceBetween >= rocketspeedfloat + 0.1)
				{
					new Float:ClientOrigin[3] = 0.0;
					GetClientAbsOrigin(i, ClientOrigin);
					ClientOrigin[2] = ClientOrigin[2] + rocketspeedfloat;
					TeleportEntity(i, ClientOrigin, NULL_VECTOR, NULL_VECTOR);
				}
			}
		}
		i++;
	}
	return Action:0;
}

public Action:PlayerDeath(Handle:Event, String:Name[], bool:Broadcast)
{
	new dieduserid = GetEventInt(Event, "userid");
	new diedindex = GetClientOfUserId(dieduserid);
	RocketStatus[diedindex] = 0;
	FreezeStatus[diedindex] = 0;
	ClipStatus[diedindex] = 0;
	JetStatus[diedindex] = 0;
	DrugStatus[diedindex] = 0;
	DisguiseID[diedindex] = 0;
	RegenStatus[diedindex] = 0;
	GodStatus[diedindex] = 0;
	InvisStatus[diedindex] = 0;
	SetEntityGravity(diedindex, 1.0);
	SpeedIndex[diedindex] = 0;
	return Action:0;
}

public OnClientPostAdminCheck(client)
{
	PrintToChat(client, "\x03[\x04FSA\x03] \x01Этот сервер использует расширенное админ меню \x03FireWaLL Super Admin \x01 скачаное с \x04www.AzleY.Ru");
	return 0;
}

public Action:BuryChat(client, args)
{
	new String:ChatString[64];
	new Target_List[64];
	new String:processed[64];
	new bool:thebool;
	GetClientName(client, name, 64);
	if (args < 1)
	{
		PrintToChat(client, "Используйте: !bury <ник игрока>");
	}
	if (args > 1)
	{
		PrintToChat(client, "Используйте: !bury <ник игрока>");
	}
	if (args == 1)
	{
		GetCmdArg(1, ChatString, 64);
		if (StrEqual(ChatString, "#all", false))
		{
			new String:nameclient1[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var1;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					new Float:buryvec[3] = 0.0;
					GetClientAbsOrigin(i, buryvec);
					buryvec[2] = buryvec[2] - 50;
					TeleportEntity(i, buryvec, NULL_VECTOR, NULL_VECTOR);
				}
				i++;
			}
			PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s закопал всех", nameclient1);
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) == 1)
		{
			ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool);
			new String:nameclient1[64];
			new String:nameclient2[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				GetClientName(i, nameclient2, 64);
				new var2;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					new var3;
					if (StrEqual(processed, nameclient2, true) && IsClientInGame(i))
					{
						new Float:buryvec[3] = 0.0;
						GetClientAbsOrigin(i, buryvec);
						buryvec[2] = buryvec[2] - 50;
						TeleportEntity(i, buryvec, NULL_VECTOR, NULL_VECTOR);
						new String:buryname[64];
						GetClientName(i, buryname, 64);
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s закопал игрока %s", nameclient1, nameclient2);
					}
				}
				i++;
			}
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) != 1)
		{
			PrintToChat(client, "[Ошибка] Совпадений не найдено или же допущена синтаксическая ошибка");
		}
	}
	return Action:0;
}

public Action:UnburyChat(client, args)
{
	new String:ChatString[64];
	new Target_List[64];
	new String:processed[64];
	new bool:thebool;
	GetClientName(client, name, 64);
	if (args < 1)
	{
		PrintToChat(client, "Используйте: !unbury <ник игрока>");
	}
	if (args > 1)
	{
		PrintToChat(client, "Используйте: !unbury <ник игрока>");
	}
	if (args == 1)
	{
		GetCmdArg(1, ChatString, 64);
		if (StrEqual(ChatString, "#all", false))
		{
			new String:nameclient1[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var1;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					new Float:buryvec[3] = 0.0;
					GetClientAbsOrigin(i, buryvec);
					buryvec[2] = buryvec[2] + 50;
					TeleportEntity(i, buryvec, NULL_VECTOR, NULL_VECTOR);
				}
				i++;
			}
			PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s раскопал всех", nameclient1);
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) == 1)
		{
			ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool);
			new String:nameclient1[64];
			new String:nameclient2[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				GetClientName(i, nameclient2, 64);
				new var2;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					new var3;
					if (StrEqual(processed, nameclient2, true) && IsClientInGame(i))
					{
						new Float:buryvec[3] = 0.0;
						GetClientAbsOrigin(i, buryvec);
						buryvec[2] = buryvec[2] + 50;
						TeleportEntity(i, buryvec, NULL_VECTOR, NULL_VECTOR);
						new String:buryname[64];
						GetClientName(i, buryname, 64);
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s раскопал игрока %s", nameclient1, nameclient2);
					}
				}
				i++;
			}
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) != 1)
		{
			PrintToChat(client, "[Ошибка] Совпадений не найдено или же допущена синтаксическая ошибка");
		}
	}
	return Action:0;
}

public Action:DisarmChat(client, args)
{
	new String:ChatString[64];
	new Target_List[64];
	new String:processed[64];
	new bool:thebool;
	GetClientName(client, name, 64);
	if (args < 1)
	{
		PrintToChat(client, "Используйте: !disarm <ник игрока>");
	}
	if (args > 1)
	{
		PrintToChat(client, "Используйте: !disarm <ник игрока>");
	}
	if (args == 1)
	{
		GetCmdArg(1, ChatString, 64);
		if (StrEqual(ChatString, "#all", false))
		{
			new String:nameclient1[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var1;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					new weaponid = GetPlayerWeaponSlot(i, 0);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 1);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 2);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 3);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 4);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 5);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 6);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 7);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 8);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 9);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 10);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 11);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 0);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 1);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 2);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 3);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 4);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 5);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 6);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 7);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 8);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 9);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 10);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 11);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 0);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 1);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 2);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 3);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 4);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 5);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 6);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 7);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 8);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 9);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 10);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 11);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 0);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 1);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 2);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 3);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 4);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 5);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 6);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 7);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 8);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 9);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 10);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
					weaponid = GetPlayerWeaponSlot(i, 11);
					if (weaponid != -1)
					{
						RemovePlayerItem(i, weaponid);
					}
				}
				i++;
			}
			PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s обезоружил всех", nameclient1);
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) == 1)
		{
			ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool);
			new String:nameclient1[64];
			new String:nameclient2[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				GetClientName(i, nameclient2, 64);
				new var2;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					new var3;
					if (StrEqual(processed, nameclient2, true) && IsClientInGame(i))
					{
						new weaponid = GetPlayerWeaponSlot(i, 0);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 1);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 2);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 3);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 4);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 5);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 6);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 7);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 8);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 9);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 10);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 11);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 0);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 1);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 2);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 3);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 4);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 5);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 6);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 7);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 8);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 9);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 10);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 11);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 0);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 1);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 2);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 3);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 4);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 5);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 6);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 7);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 8);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 9);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 10);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 11);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 0);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 1);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 2);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 3);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 4);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 5);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 6);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 7);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 8);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 9);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 10);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						weaponid = GetPlayerWeaponSlot(i, 11);
						if (weaponid != -1)
						{
							RemovePlayerItem(i, weaponid);
						}
						new String:disarmname[64];
						GetClientName(i, disarmname, 64);
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s обезоружил игрока %s", nameclient1, disarmname);
					}
				}
				i++;
			}
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) != 1)
		{
			PrintToChat(client, "[Ошибка] Совпадений не найдено или же допущена синтаксическая ошибка");
		}
	}
	return Action:0;
}

public Action:GodChat(client, args)
{
	new String:ChatString[64];
	new Target_List[64];
	new String:processed[64];
	new bool:thebool;
	GetClientName(client, name, 64);
	if (args < 1)
	{
		PrintToChat(client, "Используйте: !god <ник игрока>");
	}
	if (args > 1)
	{
		PrintToChat(client, "Используйте: !god <ник игрока>");
	}
	if (args == 1)
	{
		GetCmdArg(1, ChatString, 64);
		if (StrEqual(ChatString, "#all", false))
		{
			new String:nameclient1[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var1;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (GodStatus[i])
					{
						if (GodStatus[i] == 1)
						{
							GodStatus[i] = 0;
							SetEntProp(i, PropType:1, "m_takedamage", any:2, 1);
						}
					}
					GodStatus[i] = 1;
					SetEntProp(i, PropType:1, "m_takedamage", any:0, 1);
				}
				i++;
			}
			PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s включил/выключил всем игрокам режим бессмертия", nameclient1);
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) == 1)
		{
			ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool);
			new String:nameclient1[64];
			new String:nameclient2[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				GetClientName(i, nameclient2, 64);
				new var2;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					new var3;
					if (StrEqual(processed, nameclient2, true) && IsClientInGame(i))
					{
						if (GodStatus[i])
						{
							if (GodStatus[i] == 1)
							{
								GodStatus[i] = 0;
								SetEntProp(i, PropType:1, "m_takedamage", any:2, 1);
								PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s отключил у игрока %s режим бессмертия", nameclient1, nameclient2);
							}
						}
						GodStatus[i] = 1;
						SetEntProp(i, PropType:1, "m_takedamage", any:0, 1);
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s включил игроку %s режим БЕССМЕРТИЯ", nameclient1, nameclient2);
					}
				}
				i++;
			}
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) != 1)
		{
			PrintToChat(client, "[Ошибка] Совпадений не найдено или же допущена синтаксическая ошибка");
		}
	}
	return Action:0;
}

public Action:InvisChat(client, args)
{
	new String:ChatString[64];
	new Target_List[64];
	new String:processed[64];
	new bool:thebool;
	GetClientName(client, name, 64);
	if (args < 1)
	{
		PrintToChat(client, "Используйте: !invis <ник игрока>");
	}
	if (args > 1)
	{
		PrintToChat(client, "Используйте: !invis <ник игрока>");
	}
	if (args == 1)
	{
		GetCmdArg(1, ChatString, 64);
		if (StrEqual(ChatString, "#all", false))
		{
			new String:nameclient1[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var1;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (InvisStatus[i])
					{
						if (InvisStatus[i] == 1)
						{
							InvisStatus[i] = 0;
							SetEntityRenderMode(i, RenderMode:0);
						}
					}
					InvisStatus[i] = 1;
					SetEntityRenderMode(i, RenderMode:10);
				}
				i++;
			}
			PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s сделал всех видимыми/невидимыми", nameclient1);
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) == 1)
		{
			ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool);
			new String:nameclient1[64];
			new String:nameclient2[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				GetClientName(i, nameclient2, 64);
				new var2;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					new var3;
					if (StrEqual(processed, nameclient2, true) && IsClientInGame(i))
					{
						if (InvisStatus[i])
						{
							if (InvisStatus[i] == 1)
							{
								InvisStatus[i] = 0;
								SetEntityRenderMode(i, RenderMode:0);
								PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s сделал игрока %s видимым", nameclient1, nameclient2);
							}
						}
						InvisStatus[i] = 1;
						SetEntityRenderMode(i, RenderMode:10);
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s сделал игрока %s невидимым", nameclient1, nameclient2);
					}
				}
				i++;
			}
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) != 1)
		{
			PrintToChat(client, "[Ошибка] Совпадений не найдено или же допущена синтаксическая ошибка");
		}
	}
	return Action:0;
}

public Action:JetChat(client, args)
{
	new String:ChatString[64];
	new Target_List[64];
	new String:processed[64];
	new bool:thebool;
	GetClientName(client, name, 64);
	if (args < 1)
	{
		PrintToChat(client, "Используйте: !jet <ник игрока>");
	}
	if (args > 1)
	{
		PrintToChat(client, "Используйте: !jet <ник игрока>");
	}
	if (args == 1)
	{
		GetCmdArg(1, ChatString, 64);
		if (StrEqual(ChatString, "#all", false))
		{
			new String:nameclient1[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var1;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (JetStatus[i])
					{
						if (JetStatus[i] == 1)
						{
							JetStatus[i] = 0;
							SetEntityMoveType(i, MoveType:2);
						}
					}
					JetStatus[i] = 1;
					FreezeStatus[i] = 0;
					ClipStatus[i] = 0;
					SetEntityMoveType(i, MoveType:4);
				}
				i++;
			}
			PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s включил/выключил Jetpack всем игрокам", nameclient1);
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) == 1)
		{
			ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool);
			new String:nameclient1[64];
			new String:nameclient2[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				GetClientName(i, nameclient2, 64);
				new var2;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					new var3;
					if (StrEqual(processed, nameclient2, true) && IsClientInGame(i))
					{
						if (JetStatus[i])
						{
							if (JetStatus[i] == 1)
							{
								JetStatus[i] = 0;
								SetEntityMoveType(i, MoveType:2);
								PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s отключил у игрока %s Jetpack", nameclient1, nameclient2);
							}
						}
						JetStatus[i] = 1;
						FreezeStatus[i] = 0;
						ClipStatus[i] = 0;
						SetEntityMoveType(i, MoveType:4);
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s установил игроку %s Jetpack", nameclient1, nameclient2);
					}
				}
				i++;
			}
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) != 1)
		{
			PrintToChat(client, "[Ошибка] Совпадений не найдено или же допущена синтаксическая ошибка");
		}
	}
	return Action:0;
}

public Action:ClipChat(client, args)
{
	new String:ChatString[64];
	new Target_List[64];
	new String:processed[64];
	new bool:thebool;
	GetClientName(client, name, 64);
	if (args < 1)
	{
		PrintToChat(client, "Используйте: !clip <ник игрока>");
	}
	if (args > 1)
	{
		PrintToChat(client, "Используйте: !clip <ник игрока>");
	}
	if (args == 1)
	{
		GetCmdArg(1, ChatString, 64);
		if (StrEqual(ChatString, "#all", false))
		{
			new String:nameclient1[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var1;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (ClipStatus[i])
					{
						if (ClipStatus[i] == 1)
						{
							ClipStatus[i] = 0;
							SetEntityMoveType(i, MoveType:2);
						}
					}
					ClipStatus[i] = 1;
					FreezeStatus[i] = 0;
					JetStatus[i] = 0;
					SetEntityMoveType(i, MoveType:8);
				}
				i++;
			}
			PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s gave/removed everyone's Noclip", nameclient1);
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) == 1)
		{
			ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool);
			new String:nameclient1[64];
			new String:nameclient2[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				GetClientName(i, nameclient2, 64);
				new var2;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					new var3;
					if (StrEqual(processed, nameclient2, true) && IsClientInGame(i))
					{
						if (ClipStatus[i])
						{
							if (ClipStatus[i] == 1)
							{
								ClipStatus[i] = 0;
								SetEntityMoveType(i, MoveType:2);
								PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s убрал у игрока %s Noclip", nameclient1, nameclient2);
							}
						}
						ClipStatus[i] = 1;
						FreezeStatus[i] = 0;
						JetStatus[i] = 0;
						SetEntityMoveType(i, MoveType:8);
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s установил игроку %s Noclip", nameclient1, nameclient2);
					}
				}
				i++;
			}
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) != 1)
		{
			PrintToChat(client, "[Ошибка] Совпадений не найдено или же допущена синтаксическая ошибка");
		}
	}
	return Action:0;
}

public Action:RegenChat(client, args)
{
	new String:ChatString[64];
	new Target_List[64];
	new String:processed[64];
	new bool:thebool;
	GetClientName(client, name, 64);
	if (args < 1)
	{
		PrintToChat(client, "Используйте: !regen <ник игрока>");
	}
	if (args > 1)
	{
		PrintToChat(client, "Используйте: !regen <ник игрока>");
	}
	if (args == 1)
	{
		GetCmdArg(1, ChatString, 64);
		if (StrEqual(ChatString, "#all", false))
		{
			new String:nameclient1[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var1;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (RegenStatus[i])
					{
						if (RegenStatus[i] == 1)
						{
							RegenStatus[i] = 0;
						}
					}
					RegenStatus[i] = 1;
				}
				i++;
			}
			PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s установил/снял регенирацию у всех", nameclient1);
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) == 1)
		{
			ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool);
			new String:nameclient1[64];
			new String:nameclient2[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				GetClientName(i, nameclient2, 64);
				new var2;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					new var3;
					if (StrEqual(processed, nameclient2, true) && IsClientInGame(i))
					{
						if (RegenStatus[i])
						{
							if (RegenStatus[i] == 1)
							{
								RegenStatus[i] = 0;
								PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s убрал ргенирацию у игрока %s", nameclient1, nameclient2);
							}
						}
						RegenStatus[i] = 1;
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s установил игроку %s регенирацию здоровья", nameclient1, nameclient2);
					}
				}
				i++;
			}
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) != 1)
		{
			PrintToChat(client, "[Ошибка] Совпадений не найдено или же допущена синтаксическая ошибка");
		}
	}
	return Action:0;
}

public Action:RespawnChat(client, args)
{
	new String:ChatString[64];
	new Target_List[64];
	new String:processed[64];
	new bool:thebool;
	GetClientName(client, name, 64);
	if (args < 1)
	{
		PrintToChat(client, "Используйте: !respawn <ник игрока>");
	}
	if (args > 1)
	{
		PrintToChat(client, "Используйте: !respawn <ник игрока>");
	}
	if (args == 1)
	{
		GetCmdArg(1, ChatString, 64);
		if (StrEqual(ChatString, "#all", false))
		{
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var1;
				if (IsClientInGame(i) && !IsPlayerAlive(i) && GetClientTeam(i) != 1)
				{
					CS_RespawnPlayer(i);
				}
				i++;
			}
			PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s возродил всех", name);
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) == 1)
		{
			ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool);
			new String:nameclient1[64];
			new String:nameclient2[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				GetClientName(i, nameclient2, 64);
				new var2;
				if (IsClientInGame(i) && !IsPlayerAlive(i) && GetClientTeam(i) != 1)
				{
					new var3;
					if (StrEqual(processed, nameclient2, true) && IsClientInGame(i))
					{
						CS_RespawnPlayer(i);
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s возродил игрока %s", nameclient1, nameclient2);
					}
				}
				i++;
			}
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) != 1)
		{
			PrintToChat(client, "[Ошибка] Совпадений не найдено или же допущена синтаксическая ошибка");
		}
	}
	return Action:0;
}

public Action:RocketChat(client, args)
{
	new String:ChatString[64];
	new Target_List[64];
	new String:processed[64];
	new bool:thebool;
	GetClientName(client, name, 64);
	if (args < 1)
	{
		PrintToChat(client, "Используйте: !rocket <ник игрока>");
	}
	if (args > 1)
	{
		PrintToChat(client, "Используйте: !rocket <ник игрока>");
	}
	if (args == 1)
	{
		GetCmdArg(1, ChatString, 64);
		if (StrEqual(ChatString, "#all", false))
		{
			new String:nameclient1[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var1;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (RocketStatus[i])
					{
						if (RocketStatus[i] == 1)
						{
							RocketStatus[i] = 0;
							if (RocketType == 1)
							{
								SetEntityGravity(i, 1.0);
							}
							if (RocketType == 2)
							{
								SetEntityMoveType(i, MoveType:2);
							}
							new k = 1;
							while (GetMaxClients() + 1 >= k)
							{
								StopSound(k, 6, "weapons/rpg/rocket1.wav");
								k++;
							}
							AcceptEntityInput(sprite[i], "Kill", -1, -1, 0);
						}
					}
					RocketStatus[i] = 1;
					if (RocketType == 1)
					{
						SetEntityGravity(i, -0.1);
						new Float:ABSORIGIN[3] = 0.0;
						GetClientAbsOrigin(i, ABSORIGIN);
						ABSORIGIN[2] = ABSORIGIN[2] + 5;
						TeleportEntity(i, ABSORIGIN, NULL_VECTOR, NULL_VECTOR);
						new String:nameclient2[64];
						GetClientName(client, nameclient2, 64);
						sprite[i] = CreateEntityByName("env_spritetrail", -1);
						new Float:spriteorigin[3] = 0.0;
						GetClientAbsOrigin(i, spriteorigin);
						DispatchKeyValue(i, "targetname", nameclient2);
						PrecacheModel("sprites/sprite_fire01.vmt", false);
						DispatchKeyValue(sprite[i], "model", "sprites/sprite_fire01.vmt");
						DispatchKeyValue(sprite[i], "endwidth", "2.0");
						DispatchKeyValue(sprite[i], "lifetime", "2.0");
						DispatchKeyValue(sprite[i], "startwidth", "16.0");
						DispatchKeyValue(sprite[i], "renderamt", "255");
						DispatchKeyValue(sprite[i], "rendercolor", "255 255 255");
						DispatchKeyValue(sprite[i], "rendermode", "5");
						DispatchKeyValue(sprite[i], "parentname", nameclient2);
						DispatchSpawn(sprite[i]);
						TeleportEntity(sprite[i], spriteorigin, NULL_VECTOR, NULL_VECTOR);
						SetVariantString(nameclient2);
						AcceptEntityInput(sprite[i], "SetParent", -1, -1, 0);
					}
					if (RocketType == 2)
					{
						SetEntityMoveType(i, MoveType:0);
						new String:nameclient2[64];
						GetClientName(client, nameclient2, 64);
						sprite[i] = CreateEntityByName("env_spritetrail", -1);
						new Float:spriteorigin[3] = 0.0;
						GetClientAbsOrigin(i, spriteorigin);
						DispatchKeyValue(i, "targetname", nameclient2);
						PrecacheModel("sprites/sprite_fire01.vmt", false);
						DispatchKeyValue(sprite[i], "model", "sprites/sprite_fire01.vmt");
						DispatchKeyValue(sprite[i], "endwidth", "2.0");
						DispatchKeyValue(sprite[i], "lifetime", "2.0");
						DispatchKeyValue(sprite[i], "startwidth", "16.0");
						DispatchKeyValue(sprite[i], "renderamt", "255");
						DispatchKeyValue(sprite[i], "rendercolor", "255 255 255");
						DispatchKeyValue(sprite[i], "rendermode", "5");
						DispatchKeyValue(sprite[i], "parentname", nameclient2);
						DispatchSpawn(sprite[i]);
						TeleportEntity(sprite[i], spriteorigin, NULL_VECTOR, NULL_VECTOR);
						SetVariantString(nameclient2);
						AcceptEntityInput(sprite[i], "SetParent", -1, -1, 0);
					}
				}
				i++;
			}
			PrecacheSound("weapons/rpg/rocketfire1.wav", false);
			EmitSoundToAll("weapons/rpg/rocketfire1.wav", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
			PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s посадил всех на ракету", nameclient1);
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) == 1)
		{
			ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool);
			new String:nameclient1[64];
			new String:nameclient2[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				GetClientName(i, nameclient2, 64);
				new var2;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					new var3;
					if (StrEqual(processed, nameclient2, true) && IsClientInGame(i))
					{
						if (RocketStatus[i])
						{
							if (RocketStatus[i] == 1)
							{
								RocketStatus[i] = 0;
								if (RocketType == 1)
								{
									SetEntityGravity(i, 1.0);
								}
								if (RocketType == 2)
								{
									SetEntityMoveType(i, MoveType:2);
								}
								new k = 1;
								while (GetMaxClients() + 1 >= k)
								{
									StopSound(k, 6, "weapons/rpg/rocket1.wav");
									k++;
								}
								AcceptEntityInput(sprite[i], "Kill", -1, -1, 0);
								PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s снял %s с ракеты", nameclient1, nameclient2);
							}
						}
						RocketStatus[i] = 1;
						if (RocketType == 1)
						{
							SetEntityGravity(i, -0.1);
							new Float:ABSORIGIN[3] = 0.0;
							GetClientAbsOrigin(i, ABSORIGIN);
							ABSORIGIN[2] = ABSORIGIN[2] + 5;
							TeleportEntity(i, ABSORIGIN, NULL_VECTOR, NULL_VECTOR);
						}
						if (RocketType == 2)
						{
							SetEntityMoveType(i, MoveType:0);
						}
						GetClientName(client, nameclient2, 64);
						sprite[i] = CreateEntityByName("env_spritetrail", -1);
						new Float:spriteorigin[3] = 0.0;
						GetClientAbsOrigin(i, spriteorigin);
						DispatchKeyValue(i, "targetname", nameclient2);
						PrecacheModel("sprites/sprite_fire01.vmt", false);
						DispatchKeyValue(sprite[i], "model", "sprites/sprite_fire01.vmt");
						DispatchKeyValue(sprite[i], "endwidth", "2.0");
						DispatchKeyValue(sprite[i], "lifetime", "2.0");
						DispatchKeyValue(sprite[i], "startwidth", "16.0");
						DispatchKeyValue(sprite[i], "renderamt", "255");
						DispatchKeyValue(sprite[i], "rendercolor", "255 255 255");
						DispatchKeyValue(sprite[i], "rendermode", "5");
						DispatchKeyValue(sprite[i], "parentname", nameclient2);
						DispatchSpawn(sprite[i]);
						TeleportEntity(sprite[i], spriteorigin, NULL_VECTOR, NULL_VECTOR);
						SetVariantString(nameclient2);
						AcceptEntityInput(sprite[i], "SetParent", -1, -1, 0);
						PrecacheSound("weapons/rpg/rocketfire1.wav", false);
						EmitSoundToAll("weapons/rpg/rocketfire1.wav", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
						CreateTimer(0.25, RocketLaunchTimer, any:0, 0);
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s посадил игрока %s на ракету", nameclient1, nameclient2);
					}
				}
				i++;
			}
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) != 1)
		{
			PrintToChat(client, "[Ошибка] Совпадений не найдено или же допущена синтаксическая ошибка");
		}
	}
	return Action:0;
}

public Action:SpeedChat(client, args)
{
	new String:ChatString[64];
	new Target_List[64];
	new String:processed[64];
	new bool:thebool;
	GetClientName(client, name, 64);
	if (args < 1)
	{
		PrintToChat(client, "Используйте: !speed <ник игрока>");
	}
	if (args > 1)
	{
		PrintToChat(client, "Используйте: !speed <ник игрока>");
	}
	if (args == 1)
	{
		GetCmdArg(1, ChatString, 64);
		if (StrEqual(ChatString, "#all", false))
		{
			new String:nameclient1[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				new var1;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					if (SpeedIndex[i])
					{
						if (SpeedIndex[i] == 1)
						{
							SpeedIndex[i] = 2;
							SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 3.0);
						}
						if (SpeedIndex[i] == 2)
						{
							SpeedIndex[i] = 3;
							SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 4.0);
						}
						if (SpeedIndex[i] == 3)
						{
							SpeedIndex[i] = 4;
							SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 0.5);
						}
						if (SpeedIndex[i] == 4)
						{
							SpeedIndex[i] = 0;
							SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 1.0);
						}
					}
					SpeedIndex[i] = 1;
					SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 2.0);
				}
				i++;
			}
			PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s изменил скорость всем игрокам", nameclient1);
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) == 1)
		{
			ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool);
			new String:nameclient1[64];
			new String:nameclient2[64];
			GetClientName(client, nameclient1, 64);
			new i = 1;
			while (GetMaxClients() >= i)
			{
				GetClientName(i, nameclient2, 64);
				new var2;
				if (IsClientInGame(i) && IsPlayerAlive(i))
				{
					new var3;
					if (StrEqual(processed, nameclient2, true) && IsClientInGame(i))
					{
						if (SpeedIndex[i])
						{
							if (SpeedIndex[i] == 1)
							{
								SpeedIndex[i] = 2;
								SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 3.0);
								PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s увеличил скорость игрока %s в три раза", nameclient1, nameclient2);
							}
							if (SpeedIndex[i] == 2)
							{
								SpeedIndex[i] = 3;
								SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 4.0);
								PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s увеличил скорость игрока %s в четыре раза", nameclient1, nameclient2);
							}
							if (SpeedIndex[i] == 3)
							{
								SpeedIndex[i] = 4;
								SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 0.5);
								PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s уменьшил скорость игрока %s в два раза", nameclient1, nameclient2);
							}
							if (SpeedIndex[i] == 4)
							{
								SpeedIndex[i] = 0;
								SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 1.0);
								PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s изменил скорость игроку %s на нормальную", nameclient1, nameclient2);
							}
						}
						SpeedIndex[i] = 1;
						SetEntPropFloat(i, PropType:1, "m_flLaggedMovementValue", 2.0);
						PrintToChatAll("\x03[\x04FSA\x03] \x01(ADMIN) %s увеличил скорость игрока %s в два раза", nameclient1, nameclient2);
					}
				}
				i++;
			}
		}
		if (ProcessTargetString(ChatString, client, Target_List, 64, 4, processed, 64, thebool) != 1)
		{
			PrintToChat(client, "[Ошибка] Совпадений не найдено или же допущена синтаксическая ошибка");
		}
	}
	return Action:0;
}

public Action:RocketLaunchTimer(Handle:timer)
{
	PrecacheSound("weapons/rpg/rocket1.wav", false);
	EmitSoundToAll("weapons/rpg/rocket1.wav", -2, 6, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
	return Action:0;
}

