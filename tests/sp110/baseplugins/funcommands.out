new MaxClients;
new NULL_STRING;
new NULL_VECTOR;
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
public Extension:__ext_sdktools =
{
	name = "SDKTools",
	file = "sdktools.ext",
	autoload = 1,
	required = 1,
};
public Extension:__ext_topmenus =
{
	name = "TopMenus",
	file = "topmenus.ext",
	autoload = 1,
	required = 0,
};
public SharedPlugin:__pl_adminmenu =
{
	name = "adminmenu",
	file = "adminmenu.smx",
	required = 0,
};
public PlVers:__version =
{
	version = 5,
	filevers = "1.10.0.6484",
	date = "04/21/2020",
	time = "18:15:19"
};
public Plugin:myinfo =
{
	name = "Fun Commands",
	description = "Fun Commands",
	author = "AlliedModders LLC",
	version = "1.10.0.6484",
	url = "http://www.sourcemod.net/"
};
new g_var15e8;
new g_var1a5c;
new g_var1de8;
new g_var24a8;
new g_var15e4;
new g_var9e0;
new g_vara28;
new g_vara70;
new g_var16f8;
new g_var1a60;
new g_var1a64;
new g_var1de4;
new g_var1dec;
new g_var1df0;
new g_var24a4;
new g_var24ac;
new g_var24b0;
new g_varae8;
new g_var106c;
new g_var1570 = -1;
new g_var1574 = -1;
new g_var1580 = -1;
new g_var157c = -1;
new g_var1578 = -1;
new g_var15ec;
void:DisplayBeaconMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(167, 28);
	new var2 = 0;
	Format(var2, 100, "%T:", "Beacon player", _arg0);
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	AddTargetsToMenu(var1, _arg0, true, true);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

void:CreateTimeBomb(_arg0)
{
	g_var15e8 += 1;
	6220[_arg0] = g_var15e8;
	CreateTimer(1.0, 207, g_var15e8 << 7 | _arg0, 3);
	6484[_arg0] = ConVar.IntValue.get(g_var1a5c);
	return 0;
}

void:KillTimeBomb(_arg0)
{
	6220[_arg0] = 0;
	if (IsClientInGame(_arg0))
	{
		SetEntityRenderColor(_arg0, 255, 255, 255, 255);
	}
	return 0;
}

void:KillAllTimeBombs()
{
	new var1 = 1;
	while (var1 <= MaxClients)
	{
		KillTimeBomb(var1);
		var1++;
	}
	return 0;
}

void:PerformTimeBomb(_arg0, _arg1)
{
	if (6220[_arg1])
	{
		KillTimeBomb(_arg1);
		SetEntityRenderColor(_arg0, 255, 255, 255, 255);
		LogAction(_arg0, _arg1, "\"%L\" removed a TimeBomb on \"%L\"", _arg0, _arg1);
	}
	else
	{
		CreateTimeBomb(_arg1);
		LogAction(_arg0, _arg1, "\"%L\" set a TimeBomb on \"%L\"", _arg0, _arg1);
	}
	return 0;
}

void:DisplayTimeBombMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(187, 28);
	new var2 = 0;
	Format(var2, 100, "%T:", "TimeBomb player", _arg0);
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	AddTargetsToMenu(var1, _arg0, true, true);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

void:CreateFireBomb(_arg0)
{
	g_var15e8 += 1;
	7124[_arg0] = g_var15e8;
	CreateTimer(1.0, 201, g_var15e8 << 7 | _arg0, 3);
	7388[_arg0] = ConVar.IntValue.get(g_var1de8);
	return 0;
}

void:KillFireBomb(_arg0)
{
	7124[_arg0] = 0;
	if (IsClientInGame(_arg0))
	{
		SetEntityRenderColor(_arg0, 255, 255, 255, 255);
	}
	return 0;
}

void:KillAllFireBombs()
{
	new var1 = 1;
	while (var1 <= MaxClients)
	{
		KillFireBomb(var1);
		var1++;
	}
	return 0;
}

void:PerformBurn(_arg0, _arg1, Float:_arg2)
{
	IgniteEntity(_arg1, _arg2, false, 0.0, false);
	LogAction(_arg0, _arg1, "\"%L\" ignited \"%L\" (seconds \"%f\")", _arg0, _arg1, _arg2);
	return 0;
}

void:PerformFireBomb(_arg0, _arg1)
{
	if (7124[_arg0])
	{
		KillFireBomb(_arg1);
		SetEntityRenderColor(_arg0, 255, 255, 255, 255);
		LogAction(_arg0, _arg1, "\"%L\" removed a FireBomb on \"%L\"", _arg0, _arg1);
	}
	else
	{
		CreateFireBomb(_arg1);
		LogAction(_arg0, _arg1, "\"%L\" set a FireBomb on \"%L\"", _arg0, _arg1);
	}
	return 0;
}

void:DisplayBurnMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(171, 28);
	new var2 = 0;
	Format(var2, 100, "%T:", "Burn player", _arg0);
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	AddTargetsToMenu(var1, _arg0, true, true);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

void:DisplayFireBombMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(175, 28);
	new var2 = 0;
	Format(var2, 100, "%T:", "FireBomb player", _arg0);
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	AddTargetsToMenu(var1, _arg0, true, true);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

void:FreezeClient(_arg0, _arg1)
{
	if (8324[_arg0])
	{
		UnfreezeClient(_arg0);
		return 0;
	}
	SetEntityMoveType(_arg0, 0);
	SetEntityRenderColor(_arg0, 0, 128, 255, 192);
	if (5232/* ERROR unknown load Constant */)
	{
		new var1 = 0;
		GetClientEyePosition(_arg0, var1);
		EmitAmbientSound("", var1, _arg0, 130, 0, 1.0, 100, 0.0);
	}
	8852[_arg0] = _arg1;
	g_var15e8 += 1;
	8324[_arg0] = g_var15e8;
	CreateTimer(1.0, 203, g_var15e8 << 7 | _arg0, 3);
	return 0;
}

void:UnfreezeClient(_arg0)
{
	8324[_arg0] = 0;
	8852[_arg0] = 0;
	if (IsClientInGame(_arg0))
	{
		if (5232/* ERROR unknown load Constant */)
		{
			new var1 = 0;
			GetClientAbsOrigin(_arg0, var1);
			new var2 = var1 + 8;
			var2 = 5+0(var2, 10);
			GetClientEyePosition(_arg0, var1);
			EmitAmbientSound("", var1, _arg0, 130, 0, 1.0, 100, 0.0);
		}
		SetEntityMoveType(_arg0, 2);
		SetEntityRenderColor(_arg0, 255, 255, 255, 255);
	}
	return 0;
}

void:CreateFreezeBomb(_arg0)
{
	if (8588[_arg0])
	{
		KillFreezeBomb(_arg0);
		return 0;
	}
	9116[_arg0] = ConVar.IntValue.get(g_var24a8);
	g_var15e8 += 1;
	8588[_arg0] = g_var15e8;
	CreateTimer(1.0, 205, g_var15e8 << 7 | _arg0, 3);
	return 0;
}

void:KillFreezeBomb(_arg0)
{
	8588[_arg0] = 0;
	9116[_arg0] = 0;
	if (IsClientInGame(_arg0))
	{
		SetEntityRenderColor(_arg0, 255, 255, 255, 255);
	}
	return 0;
}

void:KillAllFreezes()
{
	new var1 = 1;
	while (var1 <= MaxClients)
	{
		if (8324[var1])
		{
			UnfreezeClient(var1);
		}
		if (8588[var1])
		{
			KillFreezeBomb(var1);
		}
		var1++;
	}
	return 0;
}

void:PerformFreeze(_arg0, _arg1, _arg2)
{
	FreezeClient(_arg1, _arg2);
	LogAction(_arg0, _arg1, "\"%L\" froze \"%L\"", _arg0, _arg1);
	return 0;
}

void:PerformFreezeBomb(_arg0, _arg1)
{
	if (8588[_arg1])
	{
		KillFreezeBomb(_arg1);
		LogAction(_arg0, _arg1, "\"%L\" removed a FreezeBomb on \"%L\"", _arg0, _arg1);
	}
	else
	{
		CreateFreezeBomb(_arg1);
		LogAction(_arg0, _arg1, "\"%L\" set a FreezeBomb on \"%L\"", _arg0, _arg1);
	}
	return 0;
}

Float:5*0(Float:_arg0, _arg1)
{
	return _arg0 * float(_arg1);
}

Float:5+0(Float:_arg0, _arg1)
{
	return _arg0 + float(_arg1);
}

Protobuf:UserMessageToProtobuf(Handle:_arg0)
{
	if (GetUserMessageType() != 1)
	{
		return 0;
	}
	return _arg0;
}

BfWrite:UserMessageToBfWrite(Handle:_arg0)
{
	if (GetUserMessageType() == 1)
	{
		return 0;
	}
	return _arg0;
}

void:PrintCenterTextAll(String:_arg0[], any:_arg1)
{
	new var1 = 0;
	new var2 = 1;
	while (var2 <= MaxClients)
	{
		if (IsClientInGame(var2))
		{
			SetGlobalTransTarget(var2);
			VFormat(var1, 254, _arg0[0], 2);
			PrintCenterText(var2, "%s", var1);
		}
		var2++;
	}
	return 0;
}

void:DisplayFreezeMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(177, 28);
	new var2 = 0;
	Format(var2, 100, "%T:", "Freeze player", _arg0);
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	AddTargetsToMenu(var1, _arg0, true, true);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

void:DisplayFreezeBombMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(179, 28);
	new var2 = 0;
	Format(var2, 100, "%T:", "FreezeBomb player", _arg0);
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	AddTargetsToMenu(var1, _arg0, true, true);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

void:ReplyToTargetError(_arg0, _arg1)
{
	switch (_arg1)
	{
		case -7:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2496);
		}
		case -6:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2468);
		}
		case -5:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2440);
		}
		case -4:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2412);
		}
		case -3:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2380);
		}
		case -2:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2352);
		}
		case -1:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2320);
		}
		case 0:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2292);
		}
		default:
		{
		}
	}
	return 0;
}

void:PerformGravity(_arg0, _arg1, Float:_arg2)
{
	SetEntityGravity(_arg1, _arg2);
	LogAction(_arg0, _arg1, "\"%L\" set gravity on \"%L\" (amount \"%f\")", _arg0, _arg1, _arg2);
	return 0;
}

void:DisplayGravityMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(181, 28);
	new var2 = 0;
	Format(var2, 100, "%T:", "Gravity player", _arg0);
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	AddTargetsToMenu(var1, _arg0, true, true);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

void:DisplayGravityAmountMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(183, 28);
	new var2 = 0;
	Format(var2, 100, "%T: %N", "Gravity amount", _arg0, GetClientOfUserId(10148[_arg0]));
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	AddTranslatedMenuItem(var1, "4.0", "Gravity Very High", _arg0);
	AddTranslatedMenuItem(var1, "2.0", "Gravity High", _arg0);
	AddTranslatedMenuItem(var1, "1.0", "Gravity Normal", _arg0);
	AddTranslatedMenuItem(var1, "0.5", "Gravity Low", _arg0);
	AddTranslatedMenuItem(var1, "0.1", "Gravity Very Low", _arg0);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

Handle:FindPluginByFile(String:_arg0[])
{
	new var1 = 0;
	new var2;
	var2 = GetPluginIterator();
	new var3 = 0;
	while (MorePlugins(var2))
	{
		var3 = ReadPlugin(var2);
		GetPluginFilename(var3, var1, 256);
		if (!(strcmp(var1, _arg0[0], false)))
		{
			CloseHandle(var2);
			return var3;
		}
	}
	CloseHandle(var2);
	return 0;
}

void:PerformBlind(_arg0, _arg1, _arg2)
{
	new var1 = 0;
	var1 = _arg1;
	new var2 = 1536;
	new var3 = 1536;
	new var4 = 0;
	if (_arg2)
	{
		var4 = 10;
	}
	else
	{
		var4 = 17;
	}
	new var5 = 0;
	var5 + 12/* ERROR unknown load Binary */ = _arg2;
	new var6;
	var6 = StartMessageEx(g_var15e4, var1, 1, 0);
	if (GetUserMessageType() == 1)
	{
		new var7;
		var7 = UserMessageToProtobuf(var6);
		Protobuf.SetInt(var7, "duration", var2, -1);
		Protobuf.SetInt(var7, "hold_time", var3, -1);
		Protobuf.SetInt(var7, "flags", var4, -1);
		Protobuf.SetColor(var7, "clr", var5, -1);
	}
	else
	{
		new var8;
		var8 = UserMessageToBfWrite(var6);
		BfWrite.WriteShort(var8, var2);
		BfWrite.WriteShort(var8, var3);
		BfWrite.WriteShort(var8, var4);
		BfWrite.WriteByte(var8, var5);
		BfWrite.WriteByte(var8, var5 + 4/* ERROR unknown load Binary */);
		BfWrite.WriteByte(var8, var5 + 8/* ERROR unknown load Binary */);
		BfWrite.WriteByte(var8, var5 + 12/* ERROR unknown load Binary */);
	}
	EndMessage();
	LogAction(_arg0, _arg1, "\"%L\" set blind on \"%L\" (amount \"%d\")", _arg0, _arg1, _arg2);
	return 0;
}

GetEntSendPropOffs(_arg0, String:_arg1[], bool:_arg2)
{
	new var1 = 0;
	if (GetEntityNetClass(_arg0, var1, 64))
	{
		new var2 = -1;
		new var3;
		var3 = FindSendPropInfo(var1, _arg1[0], 0, 0, var2);
		if (_arg2)
		{
			return var3;
		}
		return var2;
	}
	return -1;
}

void:DisplayBlindMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(169, 28);
	new var2 = 0;
	Format(var2, 100, "%T:", "Blind player", _arg0);
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	AddTargetsToMenu(var1, _arg0, true, true);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

void:DisplayAmountMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(165, 28);
	new var2 = 0;
	Format(var2, 100, "%T: %N", "Blind amount", _arg0, GetClientOfUserId(10936[_arg0]));
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	AddTranslatedMenuItem(var1, "255", "Fully blind", _arg0);
	AddTranslatedMenuItem(var1, "240", "Half blind", _arg0);
	AddTranslatedMenuItem(var1, "0", "No blind", _arg0);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

MoveType:GetEntityMoveType(_arg0)
{
	if (!g_var9e0)
	{
		new var1;
		var1 = GameData.GameData("core.games");
		new var2;
		var2 = GameData.GetKeyValue(var1, "m_MoveType", "", 32);
		CloseHandle(var1);
		var1 = 0;
		if (!var2)
		{
			strcopy("", 32, "m_MoveType");
		}
		g_var9e0 = 1;
	}
	return GetEntProp(_arg0, 1, "", 4, 0);
}

void:PerformNoClip(_arg0, _arg1)
{
	new var1;
	var1 = GetEntityMoveType(_arg1);
	if (var1 != 8)
	{
		SetEntityMoveType(_arg1, 8);
	}
	else
	{
		SetEntityMoveType(_arg1, 2);
	}
	LogAction(_arg0, _arg1, "\"%L\" toggled noclip on \"%L\"", _arg0, _arg1);
	return 0;
}

void:DisplayNoClipMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(185, 28);
	new var2 = 0;
	Format(var2, 100, "%T:", "NoClip player", _arg0);
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	AddTargetsToMenu(var1, _arg0, true, true);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

void:SetEntityMoveType(_arg0, MoveType:_arg1)
{
	if (!g_vara28)
	{
		new var1;
		var1 = GameData.GameData("core.games");
		new var2;
		var2 = GameData.GetKeyValue(var1, "m_MoveType", "", 32);
		CloseHandle(var1);
		var1 = 0;
		if (!var2)
		{
			strcopy("", 32, "m_MoveType");
		}
		g_vara28 = 1;
	}
	SetEntProp(_arg0, 1, "", _arg1, 4, 0);
	return 0;
}

void:CreateDrug(_arg0)
{
	11992[_arg0] = CreateTimer(1.0, 199, _arg0, 1);
	return 0;
}

void:KillDrug(_arg0)
{
	KillDrugTimer(_arg0);
	new var1 = 0;
	GetClientEyeAngles(_arg0, var1);
	var1 + 8/* ERROR unknown load Binary */ = 0;
	TeleportEntity(_arg0, NULL_VECTOR, var1, NULL_VECTOR);
	new var2 = 0;
	var2 = _arg0;
	new var3 = 1536;
	new var4 = 1536;
	new var5 = 17;
	new var6 = 0;
	new var7;
	var7 = StartMessageEx(g_var15e4, var2, 1, 0);
	if (GetUserMessageType() == 1)
	{
		new var8;
		var8 = UserMessageToProtobuf(var7);
		Protobuf.SetInt(var8, "duration", var3, -1);
		Protobuf.SetInt(var8, "hold_time", var4, -1);
		Protobuf.SetInt(var8, "flags", var5, -1);
		Protobuf.SetColor(var8, "clr", var6, -1);
	}
	else
	{
		new var9;
		var9 = UserMessageToBfWrite(var7);
		BfWrite.WriteShort(var9, var3);
		BfWrite.WriteShort(var9, var4);
		BfWrite.WriteShort(var9, var5);
		BfWrite.WriteByte(var9, var6);
		BfWrite.WriteByte(var9, var6 + 4/* ERROR unknown load Binary */);
		BfWrite.WriteByte(var9, var6 + 8/* ERROR unknown load Binary */);
		BfWrite.WriteByte(var9, var6 + 12/* ERROR unknown load Binary */);
	}
	EndMessage();
	return 0;
}

void:KillDrugTimer(_arg0)
{
	KillTimer(11992[_arg0], false);
	11992[_arg0] = 0;
	return 0;
}

void:KillAllDrugs()
{
	new var1 = 1;
	while (var1 <= MaxClients)
	{
		if (11992[var1])
		{
			if (IsClientInGame(var1))
			{
				KillDrug(var1);
			}
			KillDrugTimer(var1);
		}
		var1++;
	}
	return 0;
}

void:PerformDrug(_arg0, _arg1, _arg2)
{
	switch (_arg2)
	{
		case 0:
		{
			if (11992[_arg1])
			{
				KillDrug(_arg1);
				LogAction(_arg0, _arg1, "\"%L\" undrugged \"%L\"", _arg0, _arg1);
			}
		}
		case 1:
		{
			if (11992[_arg1])
			{
			}
			else
			{
				CreateDrug(_arg1);
				LogAction(_arg0, _arg1, "\"%L\" drugged \"%L\"", _arg0, _arg1);
			}
		}
		case 2:
		{
			if (11992[_arg1])
			{
				KillDrug(_arg1);
				LogAction(_arg0, _arg1, "\"%L\" undrugged \"%L\"", _arg0, _arg1);
			}
			else
			{
				CreateDrug(_arg1);
				LogAction(_arg0, _arg1, "\"%L\" drugged \"%L\"", _arg0, _arg1);
			}
		}
		default:
		{
		}
	}
	return 0;
}

void:SetEntityRenderColor(_arg0, _arg1, _arg2, _arg3, _arg4)
{
	if (!g_vara70)
	{
		new var1;
		var1 = GameData.GameData("core.games");
		new var2;
		var2 = GameData.GetKeyValue(var1, "m_clrRender", "", 32);
		CloseHandle(var1);
		var1 = 0;
		if (!var2)
		{
			strcopy("", 32, "m_clrRender");
		}
		g_vara70 = 1;
	}
	new var3;
	var3 = GetEntSendPropOffs(_arg0, "", false);
	if (0 >= var3)
	{
		ThrowError("SetEntityRenderColor not supported by this mod");
	}
	SetEntData(_arg0, var3, _arg1, 1, true);
	SetEntData(_arg0, var3 + 1, _arg2, 1, true);
	SetEntData(_arg0, var3 + 2, _arg3, 1, true);
	SetEntData(_arg0, var3 + 3, _arg4, 1, true);
	return 0;
}

void:DisplayDrugMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(173, 28);
	new var2 = 0;
	Format(var2, 100, "%T:", "Drug player", _arg0);
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	AddTargetsToMenu(var1, _arg0, true, true);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

void:RegisterCvars()
{
	g_var16f8 = CreateConVar("sm_beacon_radius", "375", "Sets the radius for beacon's light rings.", 0, true, 50.0, true, 1500.0);
	g_var1a5c = CreateConVar("sm_timebomb_ticks", "10.0", "Sets how long the timebomb fuse is.", 0, true, 5.0, true, 120.0);
	g_var1a60 = CreateConVar("sm_timebomb_radius", "600", "Sets the bomb blast radius.", 0, true, 50.0, true, 3000.0);
	g_var1a64 = CreateConVar("sm_timebomb_mode", "0", "Who is killed by the timebomb? 0 = Target only, 1 = Target's team, 2 = Everyone", 0, true, 0.0, true, 2.0);
	g_var1de4 = CreateConVar("sm_burn_duration", "20.0", "Sets the default duration of sm_burn and firebomb victims.", 0, true, 0.5, true, 20.0);
	g_var1de8 = CreateConVar("sm_firebomb_ticks", "10.0", "Sets how long the FireBomb fuse is.", 0, true, 5.0, true, 120.0);
	g_var1dec = CreateConVar("sm_firebomb_radius", "600", "Sets the bomb blast radius.", 0, true, 50.0, true, 3000.0);
	g_var1df0 = CreateConVar("sm_firebomb_mode", "0", "Who is targetted by the FireBomb? 0 = Target only, 1 = Target's team, 2 = Everyone", 0, true, 0.0, true, 2.0);
	g_var24a4 = CreateConVar("sm_freeze_duration", "10.0", "Sets the default duration for sm_freeze and freezebomb victims", 0, true, 1.0, true, 120.0);
	g_var24a8 = CreateConVar("sm_freezebomb_ticks", "10.0", "Sets how long the freezebomb fuse is.", 0, true, 5.0, true, 120.0);
	g_var24ac = CreateConVar("sm_freezebomb_radius", "600", "Sets the freezebomb blast radius.", 0, true, 50.0, true, 3000.0);
	g_var24b0 = CreateConVar("sm_freezebomb_mode", "0", "Who is targetted by the freezebomb? 0 = Target only, 1 = Target's team, 2 = Everyone", 0, true, 0.0, true, 2.0);
	AutoExecConfig(true, "funcommands", "sourcemod");
	return 0;
}

void:RegisterCmds()
{
	RegAdminCmd("sm_beacon", 143, 32, "sm_beacon <#userid|name> [0/1]", "", 0);
	RegAdminCmd("sm_timebomb", 161, 32, "sm_timebomb <#userid|name> [0/1]", "", 0);
	RegAdminCmd("sm_burn", 147, 32, "sm_burn <#userid|name> [time]", "", 0);
	RegAdminCmd("sm_firebomb", 151, 32, "sm_firebomb <#userid|name> [0/1]", "", 0);
	RegAdminCmd("sm_freeze", 153, 32, "sm_freeze <#userid|name> [time]", "", 0);
	RegAdminCmd("sm_freezebomb", 155, 32, "sm_freezebomb <#userid|name> [0/1]", "", 0);
	RegAdminCmd("sm_gravity", 157, 32, "sm_gravity <#userid|name> [amount] - Leave amount off to reset. Amount is 0.0 through 5.0", "", 0);
	RegAdminCmd("sm_blind", 145, 32, "sm_blind <#userid|name> [amount] - Leave amount off to reset.", "", 0);
	RegAdminCmd("sm_noclip", 159, 8224, "sm_noclip <#userid|name>", "", 0);
	RegAdminCmd("sm_drug", 149, 32, "sm_drug <#userid|name> [0/1]", "", 0);
	return 0;
}

void:HookEvents()
{
	new var1 = 0;
	GetGameFolderName(var1, 64);
	if (strcmp(var1, "tf", true))
	{
		if (strcmp(var1, "nucleardawn", true))
		{
			HookEvent("round_end", 163, 2);
		}
		HookEvent("round_win", 163, 2);
	}
	else
	{
		HookEvent("teamplay_win_panel", 163, 2);
		HookEvent("teamplay_restart_round", 163, 2);
		HookEvent("arena_win_panel", 163, 2);
	}
	return 0;
}

void:SetEntityGravity(_arg0, Float:_arg1)
{
	if (!g_varae8)
	{
		new var1;
		var1 = GameData.GameData("core.games");
		new var2;
		var2 = GameData.GetKeyValue(var1, "m_flGravity", "", 32);
		CloseHandle(var1);
		var1 = 0;
		if (!var2)
		{
			strcopy("", 32, "m_flGravity");
		}
		g_varae8 = 1;
	}
	SetEntPropFloat(_arg0, 1, "", _arg1, 0);
	return 0;
}

void:AddTranslatedMenuItem(Menu:_arg0, String:_arg1[], String:_arg2[], _arg3)
{
	new var1 = 0;
	Format(var1, 128, "%T", _arg2[0], _arg3);
	Menu.AddItem(_arg0, _arg1[0], var1, 0);
	return 0;
}

void:TE_SendToAll(Float:_arg0)
{
	new var1 = 0;

/* ERROR! null */
 function "TE_SendToAll" (number 52)

void:TE_SetupGlowSprite(Float:_arg0[3], _arg1, Float:_arg2, Float:_arg3, _arg4)
{
	TE_Start("GlowSprite");
	TE_WriteVector("m_vecOrigin", _arg0[0]);
	TE_WriteNum("m_nModelIndex", _arg1);
	TE_WriteFloat("m_fScale", _arg3);
	TE_WriteFloat("m_fLife", _arg2);
	TE_WriteNum("m_nBrightness", _arg4);
	return 0;
}

void:TE_SetupExplosion(Float:_arg0[3], _arg1, Float:_arg2, _arg3, _arg4, _arg5, _arg6, Float:_arg7[3], _arg8)
{
	TE_Start("Explosion");
	TE_WriteVector("m_vecOrigin[0]", _arg0[0]);
	TE_WriteVector("m_vecNormal", _arg7[0]);
	TE_WriteNum("m_nModelIndex", _arg1);
	TE_WriteFloat("m_fScale", _arg2);
	TE_WriteNum("m_nFrameRate", _arg3);
	TE_WriteNum("m_nFlags", _arg4);
	TE_WriteNum("m_nRadius", _arg5);
	TE_WriteNum("m_nMagnitude", _arg6);
	TE_WriteNum("m_chMaterialType", _arg8);
	return 0;
}

void:TE_SetupBeamRingPoint(Float:_arg0[3], Float:_arg1, Float:_arg2, _arg3, _arg4, _arg5, _arg6, Float:_arg7, Float:_arg8, Float:_arg9, _arg10[4], _arg11, _arg12)
{
	TE_Start("BeamRingPoint");
	TE_WriteVector("m_vecCenter", _arg0[0]);
	TE_WriteFloat("m_flStartRadius", _arg1);
	TE_WriteFloat("m_flEndRadius", _arg2);
	TE_WriteNum("m_nModelIndex", _arg3);
	TE_WriteNum("m_nHaloIndex", _arg4);
	TE_WriteNum("m_nStartFrame", _arg5);
	TE_WriteNum("m_nFrameRate", _arg6);
	TE_WriteFloat("m_fLife", _arg7);
	TE_WriteFloat("m_fWidth", _arg8);
	TE_WriteFloat("m_fEndWidth", _arg8);
	TE_WriteFloat("m_fAmplitude", _arg9);
	TE_WriteNum("r", _arg10[0]);
	TE_WriteNum("g", _arg10[0] + 4/* ERROR unknown load Binary */);
	TE_WriteNum("b", _arg10[0] + 8/* ERROR unknown load Binary */);
	TE_WriteNum("a", _arg10[0] + 12/* ERROR unknown load Binary */);
	TE_WriteNum("m_nSpeed", _arg11);
	TE_WriteNum("m_nFlags", _arg12);
	TE_WriteNum("m_nFadeLength", 0);
	return 0;
}

void:TE_SetupBeamPoints(Float:_arg0[3], Float:_arg1[3], _arg2, _arg3, _arg4, _arg5, Float:_arg6, Float:_arg7, Float:_arg8, _arg9, Float:_arg10, _arg11[4], _arg12)
{
	TE_Start("BeamPoints");
	TE_WriteVector("m_vecStartPoint", _arg0[0]);
	TE_WriteVector("m_vecEndPoint", _arg1[0]);
	TE_WriteNum("m_nModelIndex", _arg2);
	TE_WriteNum("m_nHaloIndex", _arg3);
	TE_WriteNum("m_nStartFrame", _arg4);
	TE_WriteNum("m_nFrameRate", _arg5);
	TE_WriteFloat("m_fLife", _arg6);
	TE_WriteFloat("m_fWidth", _arg7);
	TE_WriteFloat("m_fEndWidth", _arg8);
	TE_WriteFloat("m_fAmplitude", _arg10);
	TE_WriteNum("r", _arg11[0]);
	TE_WriteNum("g", _arg11[0] + 4/* ERROR unknown load Binary */);
	TE_WriteNum("b", _arg11[0] + 8/* ERROR unknown load Binary */);
	TE_WriteNum("a", _arg11[0] + 12/* ERROR unknown load Binary */);
	TE_WriteNum("m_nSpeed", _arg12);
	TE_WriteNum("m_nFadeLength", _arg9);
	return 0;
}

void:CreateBeacon(_arg0)
{
	g_var15e8 += 1;
	5616[_arg0] = g_var15e8;
	CreateTimer(1.0, 197, g_var15e8 << 7 | _arg0, 3);
	return 0;
}

void:KillBeacon(_arg0)
{
	5616[_arg0] = 0;
	if (IsClientInGame(_arg0))
	{
		SetEntityRenderColor(_arg0, 255, 255, 255, 255);
	}
	return 0;
}

void:KillAllBeacons()
{
	new var1 = 1;
	while (var1 <= MaxClients)
	{
		KillBeacon(var1);
		var1++;
	}
	return 0;
}

void:PerformBeacon(_arg0, _arg1)
{
	if (5616[_arg1])
	{
		KillBeacon(_arg1);
		LogAction(_arg0, _arg1, "\"%L\" removed a beacon on \"%L\"", _arg0, _arg1);
	}
	else
	{
		CreateBeacon(_arg1);
		LogAction(_arg0, _arg1, "\"%L\" set a beacon on \"%L\"", _arg0, _arg1);
	}
	return 0;
}

public void:AdminMenu_Beacon(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	if (_arg1)
	{
		if (_arg1 == 2)
		{
			DisplayBeaconMenu(_arg3);
		}
	}
	else
	{
		Format(_arg4[0], _arg5, "%T", "Beacon player", _arg3);
	}
	return 0;
}

public void:AdminMenu_Blind(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	if (_arg1)
	{
		if (_arg1 == 2)
		{
			DisplayBlindMenu(_arg3);
		}
		if (_arg1 == 3)
		{
			new var1;
			if (g_var15e4 == -1)
			{
				var1 = 6;
			}
			else
			{
				var1 = 0;
			}
			_arg4[0] = var1;
		}
	}
	else
	{
		Format(_arg4[0], _arg5, "%T", "Blind player", _arg3);
	}
	return 0;
}

public void:AdminMenu_Burn(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	if (_arg1)
	{
		if (_arg1 == 2)
		{
			DisplayBurnMenu(_arg3);
		}
	}
	else
	{
		Format(_arg4[0], _arg5, "%T", "Burn player", _arg3);
	}
	return 0;
}

public void:AdminMenu_Drug(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	if (_arg1)
	{
		if (_arg1 == 2)
		{
			DisplayDrugMenu(_arg3);
		}
	}
	else
	{
		Format(_arg4[0], _arg5, "%T", "Drug player", _arg3);
	}
	return 0;
}

public void:AdminMenu_FireBomb(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	if (_arg1)
	{
		if (_arg1 == 2)
		{
			DisplayFireBombMenu(_arg3);
		}
	}
	else
	{
		Format(_arg4[0], _arg5, "%T", "FireBomb player", _arg3);
	}
	return 0;
}

public void:AdminMenu_Freeze(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	if (_arg1)
	{
		if (_arg1 == 2)
		{
			DisplayFreezeMenu(_arg3);
		}
	}
	else
	{
		Format(_arg4[0], _arg5, "%T", "Freeze player", _arg3);
	}
	return 0;
}

public void:AdminMenu_FreezeBomb(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	if (_arg1)
	{
		if (_arg1 == 2)
		{
			DisplayFreezeBombMenu(_arg3);
		}
	}
	else
	{
		Format(_arg4[0], _arg5, "%T", "FreezeBomb player", _arg3);
	}
	return 0;
}

public void:AdminMenu_Gravity(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	if (_arg1)
	{
		if (_arg1 == 2)
		{
			DisplayGravityMenu(_arg3);
		}
	}
	else
	{
		Format(_arg4[0], _arg5, "%T", "Gravity player", _arg3);
	}
	return 0;
}

public void:AdminMenu_NoClip(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	if (_arg1)
	{
		if (_arg1 == 2)
		{
			DisplayNoClipMenu(_arg3);
		}
	}
	else
	{
		Format(_arg4[0], _arg5, "%T", "NoClip player", _arg3);
	}
	return 0;
}

public void:AdminMenu_TimeBomb(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	if (_arg1)
	{
		if (_arg1 == 2)
		{
			DisplayTimeBombMenu(_arg3);
		}
	}
	else
	{
		Format(_arg4[0], _arg5, "%T", "TimeBomb player", _arg3);
	}
	return 0;
}

public Action:Command_Beacon(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_beacon <#userid|name>");
		return 3;
	}
	new var1 = 0;
	GetCmdArg(1, var1, 65);
	new var2 = 0;
	new var3 = 0;
	new var4 = 0;
	new var5 = 0;
	if (0 >= (var4 = ProcessTargetString(var1, _arg0, var3, 65, 1, var2, 64, var5)))
	{
		ReplyToTargetError(_arg0, var4);
		return 3;
	}
	new var6 = 0;
	while (var6 < var4)
	{
		PerformBeacon(_arg0, var3[var6]);
		var6++;
	}
	if (var5)
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Toggled beacon on target", var2);
	}
	else
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Toggled beacon on target", "_s", var2);
	}
	return 3;
}

public Action:Command_Blind(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_blind <#userid|name> [amount]");
		return 3;
	}
	new var1 = 0;
	GetCmdArg(1, var1, 65);
	new var2 = 0;
	if (_arg1 > 1)
	{
		new var3 = 0;
		GetCmdArg(2, var3, 20);
		if (StringToIntEx(var3, var2, 10))
		{
			if (0 > var2)
			{
				var2 = 0;
			}
			if (var2 > 255)
			{
				var2 = 255;
			}
		}
		ReplyToCommand(_arg0, "[SM] %t", 11608);
		return 3;
	}
	new var4 = 0;
	new var5 = 0;
	new var6 = 0;
	new var7 = 0;
	if (0 >= (var6 = ProcessTargetString(var1, _arg0, var5, 65, 1, var4, 64, var7)))
	{
		ReplyToTargetError(_arg0, var6);
		return 3;
	}
	new var8 = 0;
	while (var8 < var6)
	{
		PerformBlind(_arg0, var5[var8], var2);
		var8++;
	}
	if (var7)
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Set blind on target", var4);
	}
	else
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Set blind on target", "_s", var4);
	}
	return 3;
}

public Action:Command_Burn(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_burn <#userid|name> [time]");
		return 3;
	}
	new var1 = 0;
	GetCmdArg(1, var1, 65);
	new var2;
	var2 = ConVar.FloatValue.get(g_var1de4);
	if (_arg1 > 1)
	{
		new var3 = 0;
		GetCmdArg(2, var3, 20);
		if (!(StringToFloatEx(var3, var2)))
		{
			ReplyToCommand(_arg0, "[SM] %t", 8116);
			return 3;
		}
	}
	new var4 = 0;
	new var5 = 0;
	new var6 = 0;
	new var7 = 0;
	if (0 >= (var6 = ProcessTargetString(var1, _arg0, var5, 65, 1, var4, 64, var7)))
	{
		ReplyToTargetError(_arg0, var6);
		return 3;
	}
	new var8 = 0;
	while (var8 < var6)
	{
		PerformBurn(_arg0, var5[var8], var2);
		var8++;
	}
	if (var7)
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Set target on fire", var4);
	}
	else
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Set target on fire", "_s", var4);
	}
	return 3;
}

public Action:Command_Drug(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_drug <#userid|name> [0/1]");
		return 3;
	}
	new var1 = 0;
	GetCmdArg(1, var1, 65);
	new var2 = 2;
	if (_arg1 > 1)
	{
		new var3 = 0;
		GetCmdArg(2, var3, 2);
		if (StringToInt(var3, 10))
		{
			var2 = 1;
		}
		else
		{
			var2 = 0;
		}
	}
	new var4 = 0;
	new var5 = 0;
	new var6 = 0;
	new var7 = 0;
	if (0 >= (var6 = ProcessTargetString(var1, _arg0, var5, 65, 1, var4, 64, var7)))
	{
		ReplyToTargetError(_arg0, var6);
		return 3;
	}
	new var8 = 0;
	while (var8 < var6)
	{
		PerformDrug(_arg0, var5[var8], var2);
		var8++;
	}
	if (var7)
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Toggled drug on target", var4);
	}
	else
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Toggled drug on target", "_s", var4);
	}
	return 3;
}

public Action:Command_FireBomb(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_firebomb <#userid|name>");
		return 3;
	}
	new var1 = 0;
	GetCmdArg(1, var1, 65);
	new var2 = 0;
	new var3 = 0;
	new var4 = 0;
	new var5 = 0;
	if (0 >= (var4 = ProcessTargetString(var1, _arg0, var3, 65, 1, var2, 64, var5)))
	{
		ReplyToTargetError(_arg0, var4);
		return 3;
	}
	new var6 = 0;
	while (var6 < var4)
	{
		PerformFireBomb(_arg0, var3[var6]);
		var6++;
	}
	if (var5)
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Toggled FireBomb on target", var2);
	}
	else
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Toggled FireBomb on target", "_s", var2);
	}
	return 3;
}

public Action:Command_Freeze(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_freeze <#userid|name> [time]");
		return 3;
	}
	new var1 = 0;
	GetCmdArg(1, var1, 65);
	new var2;
	var2 = ConVar.IntValue.get(g_var24a4);
	if (_arg1 > 1)
	{
		new var3 = 0;
		GetCmdArg(2, var3, 20);
		if (!(StringToIntEx(var3, var2, 10)))
		{
			ReplyToCommand(_arg0, "[SM] %t", 9936);
			return 3;
		}
	}
	new var4 = 0;
	new var5 = 0;
	new var6 = 0;
	new var7 = 0;
	if (0 >= (var6 = ProcessTargetString(var1, _arg0, var5, 65, 1, var4, 64, var7)))
	{
		ReplyToTargetError(_arg0, var6);
		return 3;
	}
	new var8 = 0;
	while (var8 < var6)
	{
		PerformFreeze(_arg0, var5[var8], var2);
		var8++;
	}
	if (var7)
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Froze target", var4);
	}
	else
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Froze target", "_s", var4);
	}
	return 3;
}

public Action:Command_FreezeBomb(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_freezebomb <#userid|name>");
		return 3;
	}
	new var1 = 0;
	GetCmdArg(1, var1, 65);
	new var2 = 0;
	new var3 = 0;
	new var4 = 0;
	new var5 = 0;
	if (0 >= (var4 = ProcessTargetString(var1, _arg0, var3, 65, 1, var2, 64, var5)))
	{
		ReplyToTargetError(_arg0, var4);
		return 3;
	}
	new var6 = 0;
	while (var6 < var4)
	{
		PerformFreezeBomb(_arg0, var3[var6]);
		var6++;
	}
	if (var5)
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Toggled FreezeBomb on target", var2);
	}
	else
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Toggled FreezeBomb on target", "_s", var2);
	}
	return 3;
}

public Action:Command_Gravity(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_gravity <#userid|name> [amount]");
		return 3;
	}
	new var1 = 0;
	GetCmdArg(1, var1, 65);
	new var2 = 1065353216;
	if (_arg1 > 1)
	{
		new var3 = 0;
		GetCmdArg(2, var3, 20);
		if (StringToFloatEx(var3, var2))
		{
			if (var2 < 0.0)
			{
				var2 = 0;
			}
		}
		ReplyToCommand(_arg0, "[SM] %t", 10844);
		return 3;
	}
	new var4 = 0;
	new var5 = 0;
	new var6 = 0;
	new var7 = 0;
	if (0 >= (var6 = ProcessTargetString(var1, _arg0, var5, 65, 1, var4, 64, var7)))
	{
		ReplyToTargetError(_arg0, var6);
		return 3;
	}
	new var8 = 0;
	while (var8 < var6)
	{
		PerformGravity(_arg0, var5[var8], var2);
		var8++;
	}
	if (var7)
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Set gravity on target", var4);
	}
	else
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Set gravity on target", "_s", var4);
	}
	return 3;
}

public Action:Command_NoClip(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_noclip <#userid|name>");
		return 3;
	}
	new var1 = 0;
	GetCmdArg(1, var1, 65);
	new var2 = 0;
	new var3 = 0;
	new var4 = 0;
	new var5 = 0;
	if (0 >= (var4 = ProcessTargetString(var1, _arg0, var3, 65, 1, var2, 64, var5)))
	{
		ReplyToTargetError(_arg0, var4);
		return 3;
	}
	new var6 = 0;
	while (var6 < var4)
	{
		PerformNoClip(_arg0, var3[var6]);
		var6++;
	}
	if (var5)
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Toggled noclip on target", var2);
	}
	else
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Toggled noclip on target", "_s", var2);
	}
	return 3;
}

public Action:Command_TimeBomb(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_timebomb <#userid|name>");
		return 3;
	}
	new var1 = 0;
	GetCmdArg(1, var1, 65);
	new var2 = 0;
	new var3 = 0;
	new var4 = 0;
	new var5 = 0;
	if (0 >= (var4 = ProcessTargetString(var1, _arg0, var3, 65, 1, var2, 64, var5)))
	{
		ReplyToTargetError(_arg0, var4);
		return 3;
	}
	new var6 = 0;
	while (var6 < var4)
	{
		PerformTimeBomb(_arg0, var3[var6]);
		var6++;
	}
	if (var5)
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Toggled TimeBomb on target", var2);
	}
	else
	{
		ShowActivity2(_arg0, "[SM] ", "%t", "Toggled TimeBomb on target", "_s", var2);
	}
	return 3;
}

public Action:Event_RoundEnd(Event:_arg0, String:_arg1[], bool:_arg2)
{
	KillAllBeacons();
	KillAllTimeBombs();
	KillAllFireBombs();
	KillAllFreezes();
	KillAllDrugs();
	return 0;
}

public MenuHandler_Amount(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && g_var106c)
			{
				TopMenu.Display(g_var106c, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var3 = 0;
			new var4 = 0;
			new var5 = 0;
			Menu.GetItem(_arg0, _arg3, var3, 32, 0, "", 0);
			var4 = StringToInt(var3, 10);
			if ((var5 = GetClientOfUserId(10936[_arg2])))
			{
				if (CanUserTarget(_arg2, var5))
				{
					new var6 = 0;
					GetClientName(var5, var6, 128);
					PerformBlind(_arg2, var5, var4);
					ShowActivity2(_arg2, "[SM] ", "%t", "Set blind on target", "_s", var6, var4);
				}
				PrintToChat(_arg2, "[SM] %t", 11496);
			}
			else
			{
				PrintToChat(_arg2, "[SM] %t", 11460);
			}
			new var2;
			if (IsClientInGame(_arg2) && IsClientInKickQueue(_arg2))
			{
				DisplayBlindMenu(_arg2);
			}
		}
	}
	return 0;
}

public MenuHandler_Beacon(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && g_var106c)
			{
				TopMenu.Display(g_var106c, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var3 = 0;
			new var4 = 0;
			new var5 = 0;
			Menu.GetItem(_arg0, _arg3, var3, 32, 0, "", 0);
			var4 = StringToInt(var3, 10);
			if ((var5 = GetClientOfUserId(var4)))
			{
				if (CanUserTarget(_arg2, var5))
				{
					new var6 = 0;
					GetClientName(var5, var6, 128);
					PerformBeacon(_arg2, var5);
					ShowActivity2(_arg2, "[SM] ", "%t", "Toggled beacon on target", "_s", var6);
				}
				PrintToChat(_arg2, "[SM] %t", 6032);
			}
			else
			{
				PrintToChat(_arg2, "[SM] %t", 5996);
			}
			new var2;
			if (IsClientInGame(_arg2) && IsClientInKickQueue(_arg2))
			{
				DisplayBeaconMenu(_arg2);
			}
		}
	}
	return 0;
}

public MenuHandler_Blind(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && g_var106c)
			{
				TopMenu.Display(g_var106c, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var3 = 0;
			new var4 = 0;
			new var5 = 0;
			Menu.GetItem(_arg0, _arg3, var3, 32, 0, "", 0);
			var4 = StringToInt(var3, 10);
			if ((var5 = GetClientOfUserId(var4)))
			{
				if (CanUserTarget(_arg2, var5))
				{
					10936[_arg2] = var4;
					DisplayAmountMenu(_arg2);
					return 0;
				}
				PrintToChat(_arg2, "[SM] %t", 11432);
			}
			else
			{
				PrintToChat(_arg2, "[SM] %t", 11396);
			}
			new var2;
			if (IsClientInGame(_arg2) && IsClientInKickQueue(_arg2))
			{
				DisplayBlindMenu(_arg2);
			}
		}
	}
	return 0;
}

public MenuHandler_Burn(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && g_var106c)
			{
				TopMenu.Display(g_var106c, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var3 = 0;
			new var4 = 0;
			new var5 = 0;
			Menu.GetItem(_arg0, _arg3, var3, 32, 0, "", 0);
			var4 = StringToInt(var3, 10);
			if ((var5 = GetClientOfUserId(var4)))
			{
				if (CanUserTarget(_arg2, var5))
				{
					new var6 = 0;
					GetClientName(var5, var6, 128);
					PerformBurn(_arg2, var5, 20.0);
					ShowActivity2(_arg2, "[SM] ", "%t", "Set target on fire", "_s", var6);
				}
				PrintToChat(_arg2, "[SM] %t", 7900);
			}
			else
			{
				PrintToChat(_arg2, "[SM] %t", 7864);
			}
			new var2;
			if (IsClientInGame(_arg2) && IsClientInKickQueue(_arg2))
			{
				DisplayBurnMenu(_arg2);
			}
		}
	}
	return 0;
}

public MenuHandler_Drug(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && g_var106c)
			{
				TopMenu.Display(g_var106c, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var3 = 0;
			new var4 = 0;
			new var5 = 0;
			Menu.GetItem(_arg0, _arg3, var3, 32, 0, "", 0);
			var4 = StringToInt(var3, 10);
			if ((var5 = GetClientOfUserId(var4)))
			{
				if (CanUserTarget(_arg2, var5))
				{
					new var6 = 0;
					GetClientName(var5, var6, 128);
					PerformDrug(_arg2, var5, 2);
					ShowActivity2(_arg2, "[SM] ", "%t", "Toggled drug on target", "_s", var6);
				}
				PrintToChat(_arg2, "[SM] %t", 12580);
			}
			else
			{
				PrintToChat(_arg2, "[SM] %t", 12544);
			}
			new var2;
			if (IsClientInGame(_arg2) && IsClientInKickQueue(_arg2))
			{
				DisplayDrugMenu(_arg2);
			}
		}
	}
	return 0;
}

public MenuHandler_FireBomb(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && g_var106c)
			{
				TopMenu.Display(g_var106c, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var3 = 0;
			new var4 = 0;
			new var5 = 0;
			Menu.GetItem(_arg0, _arg3, var3, 32, 0, "", 0);
			var4 = StringToInt(var3, 10);
			if ((var5 = GetClientOfUserId(var4)))
			{
				if (CanUserTarget(_arg2, var5))
				{
					new var6 = 0;
					GetClientName(var5, var6, 128);
					PerformFireBomb(_arg2, var5);
					ShowActivity2(_arg2, "[SM] ", "%t", "Toggled FireBomb on target", "_s", var6);
				}
				PrintToChat(_arg2, "[SM] %t", 8000);
			}
			else
			{
				PrintToChat(_arg2, "[SM] %t", 7964);
			}
			new var2;
			if (IsClientInGame(_arg2) && IsClientInKickQueue(_arg2))
			{
				DisplayFireBombMenu(_arg2);
			}
		}
	}
	return 0;
}

public MenuHandler_Freeze(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && g_var106c)
			{
				TopMenu.Display(g_var106c, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var3 = 0;
			new var4 = 0;
			new var5 = 0;
			Menu.GetItem(_arg0, _arg3, var3, 32, 0, "", 0);
			var4 = StringToInt(var3, 10);
			if ((var5 = GetClientOfUserId(var4)))
			{
				if (CanUserTarget(_arg2, var5))
				{
					new var6 = 0;
					GetClientName(var5, var6, 128);
					PerformFreeze(_arg2, var5, ConVar.IntValue.get(g_var24a4));
					ShowActivity2(_arg2, "[SM] ", "%t", "Froze target", "_s", var6);
				}
				PrintToChat(_arg2, "[SM] %t", 9720);
			}
			else
			{
				PrintToChat(_arg2, "[SM] %t", 9684);
			}
			new var2;
			if (IsClientInGame(_arg2) && IsClientInKickQueue(_arg2))
			{
				DisplayFreezeMenu(_arg2);
			}
		}
	}
	return 0;
}

public MenuHandler_FreezeBomb(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && g_var106c)
			{
				TopMenu.Display(g_var106c, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var3 = 0;
			new var4 = 0;
			new var5 = 0;
			Menu.GetItem(_arg0, _arg3, var3, 32, 0, "", 0);
			var4 = StringToInt(var3, 10);
			if ((var5 = GetClientOfUserId(var4)))
			{
				if (CanUserTarget(_arg2, var5))
				{
					new var6 = 0;
					GetClientName(var5, var6, 128);
					PerformFreezeBomb(_arg2, var5);
					ShowActivity2(_arg2, "[SM] ", "%t", "Toggled FreezeBomb on target", "_s", var6);
				}
				PrintToChat(_arg2, "[SM] %t", 9816);
			}
			else
			{
				PrintToChat(_arg2, "[SM] %t", 9780);
			}
			new var2;
			if (IsClientInGame(_arg2) && IsClientInKickQueue(_arg2))
			{
				DisplayFreezeBombMenu(_arg2);
			}
		}
	}
	return 0;
}

public MenuHandler_Gravity(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && g_var106c)
			{
				TopMenu.Display(g_var106c, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var3 = 0;
			new var4 = 0;
			new var5 = 0;
			Menu.GetItem(_arg0, _arg3, var3, 32, 0, "", 0);
			var4 = StringToInt(var3, 10);
			if ((var5 = GetClientOfUserId(var4)))
			{
				if (CanUserTarget(_arg2, var5))
				{
					10148[_arg2] = var4;
					DisplayGravityAmountMenu(_arg2);
					return 0;
				}
				PrintToChat(_arg2, "[SM] %t", 10664);
			}
			else
			{
				PrintToChat(_arg2, "[SM] %t", 10628);
			}
			new var2;
			if (IsClientInGame(_arg2) && IsClientInKickQueue(_arg2))
			{
				DisplayGravityMenu(_arg2);
			}
		}
	}
	return 0;
}

public MenuHandler_GravityAmount(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && g_var106c)
			{
				TopMenu.Display(g_var106c, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var3 = 0;
			new var4 = 0;
			new var5 = 0;
			Menu.GetItem(_arg0, _arg3, var3, 32, 0, "", 0);
			var4 = StringToFloat(var3);
			if ((var5 = GetClientOfUserId(10148[_arg2])))
			{
				if (CanUserTarget(_arg2, var5))
				{
					new var6 = 0;
					GetClientName(var5, var6, 128);
					PerformGravity(_arg2, var5, var4);
					ShowActivity2(_arg2, "[SM] ", "%t", "Set gravity on target", "_s", var6, var4);
				}
				PrintToChat(_arg2, "[SM] %t", 10728);
			}
			else
			{
				PrintToChat(_arg2, "[SM] %t", 10692);
			}
			new var2;
			if (IsClientInGame(_arg2) && IsClientInKickQueue(_arg2))
			{
				DisplayGravityMenu(_arg2);
			}
		}
	}
	return 0;
}

public MenuHandler_NoClip(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && g_var106c)
			{
				TopMenu.Display(g_var106c, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var3 = 0;
			new var4 = 0;
			new var5 = 0;
			Menu.GetItem(_arg0, _arg3, var3, 32, 0, "", 0);
			var4 = StringToInt(var3, 10);
			if ((var5 = GetClientOfUserId(var4)))
			{
				if (CanUserTarget(_arg2, var5))
				{
					new var6 = 0;
					GetClientName(var5, var6, 128);
					PerformNoClip(_arg2, var5);
					ShowActivity2(_arg2, "[SM] ", "%t", "Toggled noclip on target", "_s", var6);
				}
				PrintToChat(_arg2, "[SM] %t", 11804);
			}
			else
			{
				PrintToChat(_arg2, "[SM] %t", 11768);
			}
			new var2;
			if (IsClientInGame(_arg2) && IsClientInKickQueue(_arg2))
			{
				DisplayNoClipMenu(_arg2);
			}
		}
	}
	return 0;
}

public MenuHandler_TimeBomb(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && g_var106c)
			{
				TopMenu.Display(g_var106c, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var3 = 0;
			new var4 = 0;
			new var5 = 0;
			Menu.GetItem(_arg0, _arg3, var3, 32, 0, "", 0);
			var4 = StringToInt(var3, 10);
			if ((var5 = GetClientOfUserId(var4)))
			{
				if (CanUserTarget(_arg2, var5))
				{
					new var6 = 0;
					GetClientName(var5, var6, 128);
					PerformTimeBomb(_arg2, var5);
					ShowActivity2(_arg2, "[SM] ", "%t", "Toggled TimeBomb on target", "_s", var6);
				}
				PrintToChat(_arg2, "[SM] %t", 6936);
			}
			else
			{
				PrintToChat(_arg2, "[SM] %t", 6900);
			}
			new var2;
			if (IsClientInGame(_arg2) && IsClientInKickQueue(_arg2))
			{
				DisplayTimeBombMenu(_arg2);
			}
		}
	}
	return 0;
}

public void:OnAdminMenuReady(Handle:_arg0)
{
	new var1;
	var1 = TopMenu.FromHandle(_arg0);
	if (g_var106c == var1)
	{
		return 0;
	}
	g_var106c = var1;
	new var2;
	var2 = TopMenu.FindCategory(g_var106c, "PlayerCommands");
	if (var2)
	{
		TopMenu.AddItem(g_var106c, "sm_beacon", 123, var2, "sm_beacon", 32, "");
		TopMenu.AddItem(g_var106c, "sm_timebomb", 141, var2, "sm_timebomb", 32, "");
		TopMenu.AddItem(g_var106c, "sm_burn", 127, var2, "sm_burn", 32, "");
		TopMenu.AddItem(g_var106c, "sm_firebomb", 131, var2, "sm_firebomb", 32, "");
		TopMenu.AddItem(g_var106c, "sm_freeze", 133, var2, "sm_freeze", 32, "");
		TopMenu.AddItem(g_var106c, "sm_freezebomb", 135, var2, "sm_freezebomb", 32, "");
		TopMenu.AddItem(g_var106c, "sm_gravity", 137, var2, "sm_gravity", 32, "");
		TopMenu.AddItem(g_var106c, "sm_blind", 125, var2, "sm_blind", 32, "");
		TopMenu.AddItem(g_var106c, "sm_noclip", 139, var2, "sm_noclip", 32, "");
		TopMenu.AddItem(g_var106c, "sm_drug", 129, var2, "sm_drug", 32, "");
	}
	return 0;
}

public void:OnMapEnd()
{
	KillAllBeacons();
	KillAllTimeBombs();
	KillAllFireBombs();
	KillAllFreezes();
	KillAllDrugs();
	return 0;
}

public void:OnMapStart()
{
	new var11;
	var11 = GameData.GameData("funcommands.games");
	if (var11)
	{
		new var1;
		if (GameData.GetKeyValue(var11, "SoundBlip", "", 256) && 4208/* ERROR unknown load Constant */)
		{
			PrecacheSound("", true);
		}
		new var2;
		if (GameData.GetKeyValue(var11, "SoundBeep", "", 256) && 4464/* ERROR unknown load Constant */)
		{
			PrecacheSound("", true);
		}
		new var3;
		if (GameData.GetKeyValue(var11, "SoundFinal", "", 256) && 4720/* ERROR unknown load Constant */)
		{
			PrecacheSound("", true);
		}
		new var4;
		if (GameData.GetKeyValue(var11, "SoundBoom", "", 256) && 4976/* ERROR unknown load Constant */)
		{
			PrecacheSound("", true);
		}
		new var5;
		if (GameData.GetKeyValue(var11, "SoundFreeze", "", 256) && 5232/* ERROR unknown load Constant */)
		{
			PrecacheSound("", true);
		}
		new var12 = 0;
		new var6;
		if (GameData.GetKeyValue(var11, "SpriteBeam", var12, 256) && var12)
		{
			g_var1570 = PrecacheModel(var12, false);
		}
		new var7;
		if (GameData.GetKeyValue(var11, "SpriteBeam2", var12, 256) && var12)
		{
			g_var1574 = PrecacheModel(var12, false);
		}
		new var8;
		if (GameData.GetKeyValue(var11, "SpriteExplosion", var12, 256) && var12)
		{
			g_var1580 = PrecacheModel(var12, false);
		}
		new var9;
		if (GameData.GetKeyValue(var11, "SpriteGlow", var12, 256) && var12)
		{
			g_var157c = PrecacheModel(var12, false);
		}
		new var10;
		if (GameData.GetKeyValue(var11, "SpriteHalo", var12, 256) && var12)
		{
			g_var1578 = PrecacheModel(var12, false);
		}
		CloseHandle(var11);
		var11 = 0;
		return 0;
	}
	SetFailState("Unable to load game config funcommands.games");
	return 0;
}

public void:OnPluginStart()
{
	if (FindPluginByFile("basefuncommands.smx"))
	{
		ThrowError("This plugin replaces basefuncommands.  You cannot run both at once.");
	}
	LoadTranslations("common.phrases");
	LoadTranslations("funcommands.phrases");
	g_var15ec = GetEngineVersion();
	g_var15e4 = GetUserMessageId("Fade");
	RegisterCvars();
	RegisterCmds();
	HookEvents();
	new var2 = 0;
	new var1;
	if (LibraryExists("adminmenu") && (var2 = GetAdminTopMenu()))
	{
		OnAdminMenuReady(var2);
	}
	return 0;
}

public Action:Timer_Beacon(Handle:_arg0, any:_arg1)
{
	new var3;
	var3 = _arg1 & 127;
	new var4;
	var4 = _arg1 >>> 7;
	new var1;
	if (IsClientInGame(var3) && IsPlayerAlive(var3) && var4 == 5616[var3])
	{
		KillBeacon(var3);
		return 4;
	}
	new var5;
	var5 = GetClientTeam(var3);
	new var6 = 0;
	GetClientAbsOrigin(var3, var6);
	new var7 = var6 + 8;
	var7 = 5+0(var7, 10);
	new var2;
	if (g_var1570 > -1 && g_var1578 > -1)
	{
		TE_SetupBeamRingPoint(var6, 10.0, ConVar.FloatValue.get(g_var16f8), g_var1570, g_var1578, 0, 15, 0.5, 5.0, 0.0, 5588, 10, 0);
		TE_SendToAll(0.0);
		if (var5 == 2)
		{
			TE_SetupBeamRingPoint(var6, 10.0, ConVar.FloatValue.get(g_var16f8), g_var1570, g_var1578, 0, 10, 0.6, 10.0, 0.5, 5508, 10, 0);
		}
		else
		{
			if (var5 == 3)
			{
				TE_SetupBeamRingPoint(var6, 10.0, ConVar.FloatValue.get(g_var16f8), g_var1570, g_var1578, 0, 10, 0.6, 10.0, 0.5, 5556, 10, 0);
			}
			TE_SetupBeamRingPoint(var6, 10.0, ConVar.FloatValue.get(g_var16f8), g_var1570, g_var1578, 0, 10, 0.6, 10.0, 0.5, 5540, 10, 0);
		}
		TE_SendToAll(0.0);
	}
	if (4208/* ERROR unknown load Constant */)
	{
		GetClientEyePosition(var3, var6);
		EmitAmbientSound("", var6, var3, 130, 0, 1.0, 100, 0.0);
	}
	return 0;
}

public Action:Timer_Drug(Handle:_arg0, any:_arg1)
{
	if (IsClientInGame(_arg1))
	{
		if (IsPlayerAlive(_arg1))
		{
			new var1 = 0;
			GetClientEyeAngles(_arg1, var1);
			var1 + 8/* ERROR unknown load Binary */ = 12256[GetRandomInt(0, 100) % 20];
			TeleportEntity(_arg1, NULL_VECTOR, var1, NULL_VECTOR);
			new var2 = 0;
			var2 = _arg1;
			new var3 = 255;
			new var4 = 255;
			new var5 = 2;
			new var6;
			var6 = GetRandomInt(0, 255);
			var6 + 4/* ERROR unknown load Binary */ = GetRandomInt(0, 255);
			var6 + 8/* ERROR unknown load Binary */ = GetRandomInt(0, 255);
			new var7;
			var7 = StartMessageEx(g_var15e4, var2, 1, 0);
			if (GetUserMessageType() == 1)
			{
				new var8;
				var8 = UserMessageToProtobuf(var7);
				Protobuf.SetInt(var8, "duration", var3, -1);
				Protobuf.SetInt(var8, "hold_time", var4, -1);
				Protobuf.SetInt(var8, "flags", var5, -1);
				Protobuf.SetColor(var8, "clr", var6, -1);
			}
			else
			{
				BfWriteShort(var7, var3);
				BfWriteShort(var7, var4);
				BfWriteShort(var7, var5);
				BfWriteByte(var7, var6);
				BfWriteByte(var7, var6 + 4/* ERROR unknown load Binary */);
				BfWriteByte(var7, var6 + 8/* ERROR unknown load Binary */);
				BfWriteByte(var7, var6 + 12/* ERROR unknown load Binary */);
			}
			EndMessage();
			return 3;
		}
		KillDrug(_arg1);
		return 3;
	}
	KillDrugTimer(_arg1);
	return 3;
}

public Action:Timer_FireBomb(Handle:_arg0, any:_arg1)
{
	new var7;
	var7 = _arg1 & 127;
	new var8;
	var8 = _arg1 >>> 7;
	new var1;
	if (IsClientInGame(var7) && IsPlayerAlive(var7) && var8 == 7124[var7])
	{
		KillFireBomb(var7);
		return 4;
	}
	7388[var7]--;
	new var9 = 0;
	GetClientEyePosition(var7, var9);
	if (0 < 7388[var7])
	{
		new var10 = 0;
		if (7388[var7] > 1)
		{
			var10 = RoundToFloor(5*0(255.0 / ConVar.FloatValue.get(g_var1de8), 7388[var7]));
			if (4464/* ERROR unknown load Constant */)
			{
				EmitAmbientSound("", var9, var7, 130, 0, 1.0, 100, 0.0);
			}
		}
		else
		{
			var10 = 0;
			if (4720/* ERROR unknown load Constant */)
			{
				EmitAmbientSound("", var9, var7, 130, 0, 1.0, 100, 0.0);
			}
		}
		SetEntityRenderColor(var7, 255, var10, var10, 255);
		new var11 = 0;
		GetClientName(var7, var11, 128);
		PrintCenterTextAll("%t", "Till Explodes", var11, 7388[var7]);
		new var2;
		if (g_var1570 > -1 && g_var1578 > -1)
		{
			GetClientAbsOrigin(var7, var9);
			new var12 = var9 + 8;
			var12 = 5+0(var12, 10);
			TE_SetupBeamRingPoint(var9, 10.0, ConVar.FloatValue.get(g_var1dec) / 3.0, g_var1570, g_var1578, 0, 15, 0.5, 5.0, 0.0, 5588, 10, 0);
			TE_SendToAll(0.0);
			TE_SetupBeamRingPoint(var9, 10.0, ConVar.FloatValue.get(g_var1dec) / 3.0, g_var1570, g_var1578, 0, 10, 0.6, 10.0, 0.5, 5572, 10, 0);
			TE_SendToAll(0.0);
		}
		return 0;
	}
	if (g_var1580 > -1)
	{
		TE_SetupExplosion(var9, g_var1580, 0.1, 1, 0, ConVar.IntValue.get(g_var1dec), 5000, 6840, 67);
		TE_SendToAll(0.0);
	}
	new var3;
	if (g_var1570 > -1 && g_var1578 > -1)
	{
		GetClientAbsOrigin(var7, var9);
		new var13 = var9 + 8;
		var13 = 5+0(var13, 10);
		TE_SetupBeamRingPoint(var9, 50.0, ConVar.FloatValue.get(g_var1dec), g_var1570, g_var1578, 0, 10, 0.5, 30.0, 1.5, 5524, 5, 0);
		TE_SendToAll(0.0);
		new var14 = var9 + 8;
		var14 = 5+0(var14, 15);
		TE_SetupBeamRingPoint(var9, 40.0, ConVar.FloatValue.get(g_var1dec), g_var1570, g_var1578, 0, 10, 0.6, 30.0, 1.5, 5524, 5, 0);
		TE_SendToAll(0.0);
		new var15 = var9 + 8;
		var15 = 5+0(var15, 15);
		TE_SetupBeamRingPoint(var9, 30.0, ConVar.FloatValue.get(g_var1dec), g_var1570, g_var1578, 0, 10, 0.7, 30.0, 1.5, 5524, 5, 0);
		TE_SendToAll(0.0);
		new var16 = var9 + 8;
		var16 = 5+0(var16, 15);
		TE_SetupBeamRingPoint(var9, 20.0, ConVar.FloatValue.get(g_var1dec), g_var1570, g_var1578, 0, 10, 0.8, 30.0, 1.5, 5524, 5, 0);
		TE_SendToAll(0.0);
	}
	if (4976/* ERROR unknown load Constant */)
	{
		EmitAmbientSound("", var9, var7, 130, 0, 1.0, 100, 0.0);
	}
	IgniteEntity(var7, ConVar.FloatValue.get(g_var1de4), false, 0.0, false);
	KillFireBomb(var7);
	SetEntityRenderColor(var7, 255, 255, 255, 255);
	if (0 < ConVar.IntValue.get(g_var1df0))
	{
		new var17;
		new var4;
		if (ConVar.IntValue.get(g_var1df0) == 1)
		{
			var4 = 1;
		}
		else
		{
			var4 = 0;
		}
		var17 = var4;
		new var18 = 1;
		while (var18 <= MaxClients)
		{
			new var5;
			if (IsClientInGame(var18) && IsPlayerAlive(var18) && var7 != var18)
			{
			}
			else
			{
				new var6;
				if (!(var17 && GetClientTeam(var7) != GetClientTeam(var18)))
				{
					new var19 = 0;
					GetClientAbsOrigin(var18, var19);
					new var20;
					var20 = GetVectorDistance(var9, var19, false);
					if (!(var20 > ConVar.FloatValue.get(g_var1dec)))
					{
						new var21;
						var21 = ConVar.FloatValue.get(g_var1de4);
						var21 *= ConVar.FloatValue.get(g_var1dec) - var20 / ConVar.FloatValue.get(g_var1dec);
						IgniteEntity(var18, var21, false, 0.0, false);
					}
				}
			}
			var18++;
		}
	}
	return 4;
}

public Action:Timer_Freeze(Handle:_arg0, any:_arg1)
{
	new var2;
	var2 = _arg1 & 127;
	new var3;
	var3 = _arg1 >>> 7;
	new var1;
	if (IsClientInGame(var2) && IsPlayerAlive(var2) && var3 == 8324[var2])
	{
		UnfreezeClient(var2);
		return 4;
	}
	if (8852[var2])
	{
		if (g_var15ec != 5)
		{
			PrintHintText(var2, "%t", "You will be unfrozen", 8852[var2]);
		}
		else
		{
			PrintCenterText(var2, "%t", "You will be unfrozen", 8852[var2]);
		}
		8852[var2]--;
		SetEntityMoveType(var2, 0);
		SetEntityRenderColor(var2, 0, 128, 255, 135);
		new var4 = 0;
		GetClientAbsOrigin(var2, var4);
		new var5 = var4 + 8;
		var5 = 5+0(var5, 10);
		if (g_var157c > -1)
		{
			TE_SetupGlowSprite(var4, g_var157c, 0.95, 1.5, 50);
			TE_SendToAll(0.0);
		}
		else
		{
			if (g_var1578 > -1)
			{
				TE_SetupGlowSprite(var4, g_var1578, 0.95, 1.5, 50);
				TE_SendToAll(0.0);
			}
		}
		return 0;
	}
	UnfreezeClient(var2);
	if (g_var15ec != 5)
	{
		PrintHintText(var2, "%t", 9484);
	}
	else
	{
		PrintCenterText(var2, "%t", 9500);
	}
	return 4;
}

public Action:Timer_FreezeBomb(Handle:_arg0, any:_arg1)
{
	new var6;
	var6 = _arg1 & 127;
	new var7;
	var7 = _arg1 >>> 7;
	new var1;
	if (IsClientInGame(var6) && IsPlayerAlive(var6) && var7 == 8588[var6])
	{
		KillFreezeBomb(var6);
		return 4;
	}
	new var8 = 0;
	GetClientEyePosition(var6, var8);
	9116[var6]--;
	if (0 < 9116[var6])
	{
		new var9 = 0;
		if (9116[var6] > 1)
		{
			var9 = RoundToFloor(5*0(255.0 / ConVar.FloatValue.get(g_var24a8), 9116[var6]));
			if (4464/* ERROR unknown load Constant */)
			{
				EmitAmbientSound("", var8, var6, 130, 0, 1.0, 100, 0.0);
			}
		}
		else
		{
			var9 = 0;
			if (4720/* ERROR unknown load Constant */)
			{
				EmitAmbientSound("", var8, var6, 130, 0, 1.0, 100, 0.0);
			}
		}
		SetEntityRenderColor(var6, var9, var9, 255, 255);
		new var10 = 0;
		GetClientName(var6, var10, 128);
		PrintCenterTextAll("%t", "Till Explodes", var10, 9116[var6]);
		new var2;
		if (g_var1570 > -1 && g_var1578 > -1)
		{
			GetClientAbsOrigin(var6, var8);
			new var11 = var8 + 8;
			var11 = 5+0(var11, 10);
			TE_SetupBeamRingPoint(var8, 10.0, ConVar.FloatValue.get(g_var24ac) / 3.0, g_var1570, g_var1578, 0, 15, 0.5, 5.0, 0.0, 5588, 10, 0);
			TE_SendToAll(0.0);
			TE_SetupBeamRingPoint(var8, 10.0, ConVar.FloatValue.get(g_var24ac) / 3.0, g_var1570, g_var1578, 0, 10, 0.6, 10.0, 0.5, 5572, 10, 0);
			TE_SendToAll(0.0);
		}
		return 0;
	}
	if (g_var1580 > -1)
	{
		TE_SetupExplosion(var8, g_var1580, 5.0, 1, 0, ConVar.IntValue.get(g_var24ac), 5000, 6840, 67);
		TE_SendToAll(0.0);
	}
	if (4976/* ERROR unknown load Constant */)
	{
		EmitAmbientSound("", var8, var6, 130, 0, 1.0, 100, 0.0);
	}
	KillFreezeBomb(var6);
	FreezeClient(var6, ConVar.IntValue.get(g_var24a4));
	if (0 < ConVar.IntValue.get(g_var24b0))
	{
		new var12;
		new var3;
		if (ConVar.IntValue.get(g_var24b0) == 1)
		{
			var3 = 1;
		}
		else
		{
			var3 = 0;
		}
		var12 = var3;
		new var13 = 1;
		while (var13 <= MaxClients)
		{
			new var4;
			if (IsClientInGame(var13) && IsPlayerAlive(var13) && var6 != var13)
			{
			}
			else
			{
				new var5;
				if (!(var12 && GetClientTeam(var6) != GetClientTeam(var13)))
				{
					new var14 = 0;
					GetClientEyePosition(var13, var14);
					new var15;
					var15 = GetVectorDistance(var8, var14, false);
					if (!(var15 > ConVar.FloatValue.get(g_var24ac)))
					{
						if (g_var1578 > -1)
						{
							if (g_var1574 > -1)
							{
								TE_SetupBeamPoints(var8, var14, g_var1574, g_var1578, 0, 1, 0.7, 20.0, 50.0, 1, 1.5, 5556, 10);
								TE_SendToAll(0.0);
							}
							if (g_var1570 > -1)
							{
								TE_SetupBeamPoints(var8, var14, g_var1570, g_var1578, 0, 1, 0.7, 20.0, 50.0, 1, 1.5, 5556, 10);
								TE_SendToAll(0.0);
							}
						}
						FreezeClient(var13, ConVar.IntValue.get(g_var24a4));
					}
				}
			}
			var13++;
		}
	}
	return 4;
}

public Action:Timer_TimeBomb(Handle:_arg0, any:_arg1)
{
	new var6;
	var6 = _arg1 & 127;
	new var7;
	var7 = _arg1 >>> 7;
	new var1;
	if (IsClientInGame(var6) && IsPlayerAlive(var6) && 6220[var6] == var7)
	{
		KillTimeBomb(var6);
		return 4;
	}
	6484[var6]--;
	new var8 = 0;
	GetClientEyePosition(var6, var8);
	if (0 < 6484[var6])
	{
		new var9 = 0;
		if (6484[var6] > 1)
		{
			var9 = RoundToFloor(5*0(128.0 / ConVar.FloatValue.get(g_var1a5c), 6484[var6]));
			if (4464/* ERROR unknown load Constant */)
			{
				EmitAmbientSound("", var8, var6, 130, 0, 1.0, 100, 0.0);
			}
		}
		else
		{
			var9 = 0;
			if (4720/* ERROR unknown load Constant */)
			{
				EmitAmbientSound("", var8, var6, 130, 0, 1.0, 100, 0.0);
			}
		}
		SetEntityRenderColor(var6, 255, 128, var9, 255);
		new var10 = 0;
		GetClientName(var6, var10, 128);
		PrintCenterTextAll("%t", "Till Explodes", var10, 6484[var6]);
		new var2;
		if (g_var1570 > -1 && g_var1578 > -1)
		{
			GetClientAbsOrigin(var6, var8);
			new var11 = var8 + 8;
			var11 = 5+0(var11, 10);
			TE_SetupBeamRingPoint(var8, 10.0, ConVar.FloatValue.get(g_var1a60) / 3.0, g_var1570, g_var1578, 0, 15, 0.5, 5.0, 0.0, 5588, 10, 0);
			TE_SendToAll(0.0);
			TE_SetupBeamRingPoint(var8, 10.0, ConVar.FloatValue.get(g_var1a60) / 3.0, g_var1570, g_var1578, 0, 10, 0.6, 10.0, 0.5, 5572, 10, 0);
			TE_SendToAll(0.0);
		}
		return 0;
	}
	if (g_var1580 > -1)
	{
		TE_SetupExplosion(var8, g_var1580, 5.0, 1, 0, ConVar.IntValue.get(g_var1a60), 5000, 6840, 67);
		TE_SendToAll(0.0);
	}
	if (4976/* ERROR unknown load Constant */)
	{
		EmitAmbientSound("", var8, var6, 130, 0, 1.0, 100, 0.0);
	}
	ForcePlayerSuicide(var6);
	KillTimeBomb(var6);
	SetEntityRenderColor(var6, 255, 255, 255, 255);
	if (0 < ConVar.IntValue.get(g_var1a64))
	{
		new var12;
		new var3;
		if (ConVar.IntValue.get(g_var1a64) == 1)
		{
			var3 = 1;
		}
		else
		{
			var3 = 0;
		}
		var12 = var3;
		new var13 = 1;
		while (var13 <= MaxClients)
		{
			new var4;
			if (IsClientInGame(var13) && IsPlayerAlive(var13) && var6 != var13)
			{
			}
			else
			{
				new var5;
				if (!(var12 && GetClientTeam(var6) != GetClientTeam(var13)))
				{
					new var14 = 0;
					GetClientEyePosition(var13, var14);
					new var15;
					var15 = GetVectorDistance(var8, var14, false);
					if (!(var15 > ConVar.FloatValue.get(g_var1a60)))
					{
						new var16 = 220;
						var16 = RoundToFloor(5*0(ConVar.FloatValue.get(g_var1a60) - var15 / ConVar.FloatValue.get(g_var1a60), var16));
						SlapPlayer(var13, var16, false);
						if (g_var1580 > -1)
						{
							TE_SetupExplosion(var14, g_var1580, 0.05, 1, 0, 1, 1, 6840, 67);
							TE_SendToAll(0.0);
						}
					}
				}
			}
			var13++;
		}
	}
	return 4;
}

public void:__ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.BytesLeft.get");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadInt64");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetInt64");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddInt64");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

public void:__ext_topmenus_SetNTVOptional()
{
	MarkNativeAsOptional("CreateTopMenu");
	MarkNativeAsOptional("LoadTopMenuConfig");
	MarkNativeAsOptional("AddToTopMenu");
	MarkNativeAsOptional("RemoveFromTopMenu");
	MarkNativeAsOptional("DisplayTopMenu");
	MarkNativeAsOptional("DisplayTopMenuCategory");
	MarkNativeAsOptional("FindTopMenuCategory");
	MarkNativeAsOptional("SetTopMenuTitleCaching");
	MarkNativeAsOptional("TopMenu.TopMenu");
	MarkNativeAsOptional("TopMenu.FromHandle");
	MarkNativeAsOptional("TopMenu.LoadConfig");
	MarkNativeAsOptional("TopMenu.AddCategory");
	MarkNativeAsOptional("TopMenu.AddItem");
	MarkNativeAsOptional("TopMenu.GetInfoString");
	MarkNativeAsOptional("TopMenu.GetObjName");
	MarkNativeAsOptional("TopMenu.Remove");
	MarkNativeAsOptional("TopMenu.Display");
	MarkNativeAsOptional("TopMenu.DisplayCategory");
	MarkNativeAsOptional("TopMenu.FindCategory");
	MarkNativeAsOptional("TopMenu.CacheTitles.set");
	return 0;
}

public void:__pl_adminmenu_SetNTVOptional()
{
	MarkNativeAsOptional("GetAdminTopMenu");
	MarkNativeAsOptional("AddTargetsToMenu");
	MarkNativeAsOptional("AddTargetsToMenu2");
	return 0;
}

