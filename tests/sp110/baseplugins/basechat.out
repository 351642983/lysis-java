public PlVers:__version =
{
	version = 5,
	filevers = "1.10.0.6484",
	date = "04/21/2020",
	time = "18:15:17"
};
new Float:NULL_VECTOR[3];
new String:NULL_STRING[16];
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
new MaxClients;
public Plugin:myinfo =
{
	name = "Basic Chat",
	description = "Basic Communication Commands",
	author = "AlliedModders LLC",
	version = "1.10.0.6484",
	url = "http://www.sourcemod.net/"
};
new String:g_ColorNames[12][52] =
{
	"White",
	"Red",
	"Green",
	"Blue",
	"Yellow",
	"Purple",
	"Cyan",
	"Orange",
	"Pink",
	"Olive",
	"Lime",
	"Violet"
};
new g_Colors[3][13] =
{
	{
		255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255
	},
	{
		255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 0, 255
	},
	{
		0, 255, 0, 0, 0, 255, 255, 255, 0, 255, 0, 255, 0
	}
};
new ConVar:g_Cvar_Chatmode;
new EngineVersion:g_GameEngine;
void:SendDialogToOne(_arg0, _arg1, String:_arg2[], any:_arg3)
{
	new var1 = 0;
	VFormat(var1, 100, _arg2[0], 4);
	new var2;
	var2 = KeyValues.KeyValues("Stuff", "title", var1);
	KeyValues.SetColor(var2, "color", g_Colors[_arg1][0], g_Colors[_arg1][1], g_Colors[_arg1][2], 255);
	KeyValues.SetNum(var2, "level", 1);
	KeyValues.SetNum(var2, "time", 10);
	CreateDialog(_arg0, var2, 0);
	CloseHandle(var2);
	var2 = 0;
	return 0;
}

void:SendPrivateChat(_arg0, _arg1, String:_arg2[])
{
	if (_arg0)
	{
		if (_arg0 != _arg1)
		{
			if (g_GameEngine == 12)
			{
				PrintToChat(_arg0, " \x01\x0B\x04%t: \x01%s", "Private say to", _arg1, _arg0, _arg2[0]);
			}
			PrintToChat(_arg0, "\x04%t: \x01%s", "Private say to", _arg1, _arg0, _arg2[0]);
		}
	}
	else
	{
		PrintToServer("(Private to %N) %N: %s", _arg1, _arg0, _arg2[0]);
	}
	if (g_GameEngine == 12)
	{
		PrintToChat(_arg1, " \x01\x0B\x04%t: \x01%s", "Private say to", _arg1, _arg0, _arg2[0]);
	}
	else
	{
		PrintToChat(_arg1, "\x04%t: \x01%s", "Private say to", _arg1, _arg0, _arg2[0]);
	}
	LogAction(_arg0, _arg1, "\"%L\" triggered sm_psay to \"%L\" (text %s)", _arg0, _arg1, _arg2[0]);
	return 0;
}

void:SendPanelToAll(_arg0, String:_arg1[])
{
	new var2 = 0;
	Format(var2, 64, "%N:", _arg0);
	ReplaceString(_arg1[0], 192, "\n", "\n", true);
	new var3;
	var3 = Panel.Panel(0);
	Panel.SetTitle(var3, var2, false);
	Panel.DrawItem(var3, "", 8);
	Panel.DrawText(var3, _arg1[0]);
	Panel.DrawItem(var3, "", 8);
	Panel.CurrentKey.set(var3, GetMaxPageItems(Panel.Style.get(var3)));
	Panel.DrawItem(var3, "Exit", 16);
	new var4 = 1;
	while (var4 <= MaxClients)
	{
		new var1;
		if (IsClientInGame(var4) && IsFakeClient(var4))
		{
			Panel.Send(var3, var4, 33, 10);
		}
		var4++;
	}
	CloseHandle(var3);
	var3 = 0;
	return 0;
}

void:ReplyToTargetError(_arg0, _arg1)
{
	switch (_arg1)
	{
		case -7:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2492);
		}
		case -6:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2464);
		}
		case -5:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2436);
		}
		case -4:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2408);
		}
		case -3:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2376);
		}
		case -2:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2348);
		}
		case -1:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2316);
		}
		case 0:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2288);
		}
		default:
		{
		}
	}
	return 0;
}

FindTarget(_arg0, String:_arg1[], bool:_arg2, bool:_arg3)
{
	new var1 = 0;
	new var2 = 0;
	new var3 = 16;
	if (_arg2)
	{
		var3 |= 32;
	}
	if (!_arg3)
	{
		var3 |= 8;
	}

/* ERROR! lysis.nodes.types.DConstant cannot be cast to lysis.nodes.types.DDeclareLocal */
 function "FindTarget" (number 4)

FindColor(String:_arg0[])
{
	new var1 = 0;
	while (var1 < 13)
	{
		if (!(strcmp(_arg0[0], g_ColorNames[var1], false)))
		{
			return var1;
		}
		var1++;
	}
	return -1;
}

void:SendChatToAll(_arg0, String:_arg1[])
{
	new var2 = 0;
	new var3 = 1;
	while (var3 <= MaxClients)
	{
		new var1;
		if (IsClientInGame(var3) && IsFakeClient(var3))
		{
		}
		else
		{
			FormatActivitySource(_arg0, var3, var2, 128);
			if (g_GameEngine == 12)
			{
				PrintToChat(var3, " \x01\x0B\x04%t: \x01%s", "Say all", var2, _arg1[0]);
			}
			else
			{
				PrintToChat(var3, "\x04%t: \x01%s", "Say all", var2, _arg1[0]);
			}
		}
		var3++;
	}
	return 0;
}

void:DisplayCenterTextToAll(_arg0, String:_arg1[])
{
	new var2 = 0;
	new var3 = 1;
	while (var3 <= MaxClients)
	{
		new var1;
		if (IsClientInGame(var3) && IsFakeClient(var3))
		{
		}
		else
		{
			FormatActivitySource(_arg0, var3, var2, 128);
			PrintCenterText(var3, "%s: %s", var2, _arg1[0]);
		}
		var3++;
	}
	return 0;
}

void:SendChatToAdmins(_arg0, String:_arg1[])
{
	new var5;
	var5 = CheckCommandAccess(_arg0, "sm_chat", 512, false);
	new var6 = 1;
	while (var6 <= MaxClients)
	{
		new var2;
		if (IsClientInGame(var6) && (var6 != _arg0 && CheckCommandAccess(var6, "sm_chat", 512, false)))
		{
			if (g_GameEngine == 12)
			{
				new var3;
				if (var5)
				{
					var3 = 4312;
				}
				else
				{
					var3 = 4324;
				}
				PrintToChat(var6, " \x01\x0B\x04%t: \x01%s", var3, _arg0, _arg1[0]);
			}
			new var4;
			if (var5)
			{
				var4 = 4352;
			}
			else
			{
				var4 = 4364;
			}
			PrintToChat(var6, "\x04%t: \x01%s", var4, _arg0, _arg1[0]);
		}
		var6++;
	}
	return 0;
}

public Action:Command_SmChat(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_chat <message>");
		return 3;
	}
	new var1 = 0;
	GetCmdArgString(var1, 192);
	SendChatToAdmins(_arg0, var1);
	LogAction(_arg0, -1, "\"%L\" triggered sm_chat (text %s)", _arg0, var1);
	return 3;
}

public Action:Command_SmCsay(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_csay <message>");
		return 3;
	}
	new var1 = 0;
	GetCmdArgString(var1, 192);
	DisplayCenterTextToAll(_arg0, var1);
	LogAction(_arg0, -1, "\"%L\" triggered sm_csay (text %s)", _arg0, var1);
	return 3;
}

public Action:Command_SmHsay(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_hsay <message>");
		return 3;
	}
	new var2 = 0;
	GetCmdArgString(var2, 192);
	new var3 = 0;
	new var4 = 1;
	while (var4 <= MaxClients)
	{
		new var1;
		if (IsClientInGame(var4) && IsFakeClient(var4))
		{
		}
		else
		{
			FormatActivitySource(_arg0, var4, var3, 128);
			PrintHintText(var4, "%s: %s", var3, var2);
		}
		var4++;
	}
	LogAction(_arg0, -1, "\"%L\" triggered sm_hsay (text %s)", _arg0, var2);
	return 3;
}

public Action:Command_SmMsay(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_msay <message>");
		return 3;
	}
	new var1 = 0;
	GetCmdArgString(var1, 192);
	SendPanelToAll(_arg0, var1);
	LogAction(_arg0, -1, "\"%L\" triggered sm_msay (text %s)", _arg0, var1);
	return 3;
}

public Action:Command_SmPsay(_arg0, _arg1)
{
	if (_arg1 < 2)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_psay <name or #userid> <message>");
		return 3;
	}
	new var1 = 0;
	new var2 = 0;
	new var3 = 0;
	GetCmdArgString(var1, 192);
	new var4;
	var4 = BreakString(var1, var2, 64);
	BreakString(var4 + var1, var3, 192);
	new var5;
	var5 = FindTarget(_arg0, var2, true, false);
	if (var5 == -1)
	{
		return 3;
	}
	SendPrivateChat(_arg0, var5, var3);
	return 3;
}

public Action:Command_SmSay(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_say <message>");
		return 3;
	}
	new var1 = 0;
	GetCmdArgString(var1, 192);
	SendChatToAll(_arg0, var1);
	LogAction(_arg0, -1, "\"%L\" triggered sm_say (text %s)", _arg0, var1);
	return 3;
}

public Action:Command_SmTsay(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_tsay <message>");
		return 3;
	}
	new var2 = 0;
	new var3 = 0;
	GetCmdArgString(var2, 192);
	new var4;
	var4 = BreakString(var2, var3, 16);
	new var5;
	var5 = FindColor(var3);
	new var6 = 0;
	if (var5 == -1)
	{
		var5 = 0;
		var4 = 0;
	}
	new var7 = 1;
	while (var7 <= MaxClients)
	{
		new var1;
		if (IsClientInGame(var7) && IsFakeClient(var7))
		{
		}
		else
		{
			FormatActivitySource(_arg0, var7, var6, 128);
			SendDialogToOne(var7, var5, "%s: %s", var6, var4 + var2);
		}
		var7++;
	}
	LogAction(_arg0, -1, "\"%L\" triggered sm_tsay (text %s)", _arg0, var2);
	return 3;
}

public Handler_DoNothing(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	return 0;
}

public Action:OnClientSayCommand(_arg0, String:_arg1[], String:_arg2[])
{
	new var4 = 0;
	if (_arg2[0][var4] != '@')
	{
		return 0;
	}
	var4++;
	if (strcmp(_arg1[0], "say", false))
	{
		new var2;
		if (strcmp(_arg1[0], "say_team", false) && strcmp(_arg1[0], "say_squad", false))
		{
			new var3;
			if (CheckCommandAccess(_arg0, "sm_chat", 512, false) && ConVar.BoolValue.get(g_Cvar_Chatmode))
			{
				return 0;
			}
			SendChatToAdmins(_arg0, var4 + _arg2[0]);
			LogAction(_arg0, -1, "\"%L\" triggered sm_chat (text %s)", _arg0, var4 + _arg2[0]);
			return 4;
		}
		return 0;
	}
	if (_arg2[0][var4] != '@')
	{
		if (CheckCommandAccess(_arg0, "sm_say", 512, false))
		{
			SendChatToAll(_arg0, var4 + _arg2[0]);
			LogAction(_arg0, -1, "\"%L\" triggered sm_say (text %s)", _arg0, var4 + _arg2[0]);
			return 4;
		}
		return 0;
	}
	var4++;
	if (_arg2[0][var4] != '@')
	{
		if (CheckCommandAccess(_arg0, "sm_psay", 512, false))
		{
			new var5 = 0;
			new var6;
			var6 = BreakString(var4 + _arg2[0], var5, 64);
			new var7;
			var7 = FindTarget(_arg0, var5, true, false);
			new var1;
			if (var7 == -1 || var6 == -1)
			{
				return 4;
			}
			SendPrivateChat(_arg0, var7, var6 + var4 + _arg2[0]);
			return 4;
		}
		return 0;
	}
	var4++;
	if (CheckCommandAccess(_arg0, "sm_csay", 512, false))
	{
		DisplayCenterTextToAll(_arg0, var4 + _arg2[0]);
		LogAction(_arg0, -1, "\"%L\" triggered sm_csay (text %s)", _arg0, var4 + _arg2[0]);
		return 4;
	}
	return 0;
}

public void:OnPluginStart()
{
	LoadTranslations("common.phrases");
	g_GameEngine = GetEngineVersion();
	g_Cvar_Chatmode = CreateConVar("sm_chat_mode", "1", "Allows player's to send messages to admin chat.", 0, true, 0.0, true, 1.0);
	RegAdminCmd("sm_say", 29, 512, "sm_say <message> - sends message to all players", "", 0);
	RegAdminCmd("sm_csay", 21, 512, "sm_csay <message> - sends centered message to all players", "", 0);
	if (g_GameEngine != 5)
	{
		RegAdminCmd("sm_hsay", 23, 512, "sm_hsay <message> - sends hint message to all players", "", 0);
	}
	RegAdminCmd("sm_tsay", 31, 512, "sm_tsay [color] <message> - sends top-left message to all players", "", 0);
	RegAdminCmd("sm_chat", 19, 512, "sm_chat <message> - sends message to admins", "", 0);
	RegAdminCmd("sm_psay", 27, 512, "sm_psay <name or #userid> <message> - sends private message", "", 0);
	RegAdminCmd("sm_msay", 25, 512, "sm_msay <message> - sends message as a menu panel", "", 0);
	return 0;
}

public void:__ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.BytesLeft.get");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadInt64");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetInt64");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddInt64");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

