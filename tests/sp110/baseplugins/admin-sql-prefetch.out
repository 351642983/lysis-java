new MaxClients;
new NULL_STRING;
new NULL_VECTOR;
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
public PlVers:__version =
{
	version = 5,
	filevers = "1.10.0.6484",
	date = "04/21/2020",
	time = "18:15:17"
};
public Plugin:myinfo =
{
	name = "SQL Admins (Prefetch)",
	description = "Reads all admins from SQL",
	author = "AlliedModders LLC",
	version = "1.10.0.6484",
	url = "http://www.sourcemod.net/"
};
bool:StrEqual(String:_arg0[], String:_arg1[], bool:_arg2)
{
	return strcmp(_arg0[0], _arg1[0], _arg2) == 0;
}

void:FetchUsers(Database:_arg0)
{
	new var1 = 0;
	new var2 = 0;
	new var3 = 0;
	Format(var1, 255, "SELECT id, authtype, identity, password, flags, name, immunity FROM sm_admins");
	if ((var3 = SQL_Query(_arg0, var1, -1)))
	{
		new var4 = 0;
		new var5 = 0;
		new var6 = 0;
		new var7 = 0;
		new var8 = 0;
		new var9 = 0;
		new var10 = 0;
		new var11 = 0;
		new var12 = 0;
		new var13;
		var13 = StringMap.StringMap();
		new var14 = 0;
		while (DBResultSet.FetchRow(var3))
		{
			var12 = DBResultSet.FetchInt(var3, 0, 0);
			IntToString(var12, var14, 16);
			DBResultSet.FetchString(var3, 1, var4, 16, 0);
			DBResultSet.FetchString(var3, 2, var5, 80, 0);
			DBResultSet.FetchString(var3, 3, var6, 80, 0);
			DBResultSet.FetchString(var3, 4, var7, 32, 0);
			DBResultSet.FetchString(var3, 5, var8, 80, 0);
			var9 = DBResultSet.FetchInt(var3, 6, 0);
			if ((var10 = FindAdminByIdentity(var4, var5)) == -1)
			{
				var10 = CreateAdmin(var8);
				if (!(AdminId.BindIdentity(var10, var4, var5)))
				{
					LogError("Could not bind prefetched SQL admin (authtype \"%s\") (identity \"%s\")", var4, var5);
				}
			}
			StringMap.SetValue(var13, var14, var10, true);
			if (var6)
			{
				AdminId.SetPassword(var10, var6);
			}
			new var15;
			var15 = strlen(var7);
			new var16 = 0;
			new var17 = 0;
			while (var17 < var15)
			{
				if (FindFlagByChar(var7[var17], var16))
				{
					AdminId.SetFlag(var10, var16, true);
				}
				var17++;
			}
			AdminId.ImmunityLevel.set(var10, var9);
		}
		CloseHandle(var3);
		var3 = 0;
		Format(var1, 255, "SELECT ag.admin_id AS id, g.name FROM sm_admins_groups ag JOIN sm_groups g ON ag.group_id = g.id  ORDER BY id, inherit_order ASC");
		if ((var3 = SQL_Query(_arg0, var1, -1)))
		{
			new var18 = 0;
			while (DBResultSet.FetchRow(var3))
			{
				IntToString(DBResultSet.FetchInt(var3, 0, 0), var14, 16);
				DBResultSet.FetchString(var3, 1, var18, 80, 0);
				if (StringMap.GetValue(var13, var14, var10))
				{
					if (!((var11 = FindAdmGroup(var18)) == -1))
					{
						AdminId.InheritGroup(var10, var11);
					}
				}
			}
			CloseHandle(var3);
			var3 = 0;
			CloseHandle(var13);
			var13 = 0;
			return 0;
		}
		SQL_GetError(_arg0, var2, 255);
		LogError("FetchUsers() query failed: %s", var1);
		LogError("Query error: %s", var2);
		return 0;
	}
	SQL_GetError(_arg0, var2, 255);
	LogError("FetchUsers() query failed: %s", var1);
	LogError("Query error: %s", var2);
	return 0;
}

void:FetchGroups(Database:_arg0)
{
	new var2 = 0;
	new var3 = 0;
	Format(var2, 255, "SELECT flags, name, immunity_level FROM sm_groups");
	if ((var3 = SQL_Query(_arg0, var2, -1)))
	{
		new var5 = 0;
		new var6 = 0;
		new var7 = 0;
		while (DBResultSet.FetchRow(var3))
		{
			DBResultSet.FetchString(var3, 0, var5, 32, 0);
			DBResultSet.FetchString(var3, 1, var6, 128, 0);
			var7 = DBResultSet.FetchInt(var3, 2, 0);
			new var8 = 0;
			if ((var8 = FindAdmGroup(var6)) == -1)
			{
				var8 = CreateAdmGroup(var6);
			}
			new var9;
			var9 = strlen(var5);
			new var10 = 0;
			while (var10 < var9)
			{
				new var11 = 0;
				if (FindFlagByChar(var5[var10], var11))
				{
					GroupId.SetFlag(var8, var11, true);
				}
				var10++;
			}
			GroupId.ImmunityLevel.set(var8, var7);
		}
		CloseHandle(var3);
		var3 = 0;
		new var12 = 0;
		var12 = Format(var12 + var2, 255 - var12, "SELECT g1.name, g2.name FROM sm_group_immunity gi") + var12;
		var12 = Format(var12 + var2, 255 - var12, " LEFT JOIN sm_groups g1 ON g1.id = gi.group_id ") + var12;
		var12 = Format(var12 + var2, 255 - var12, " LEFT JOIN sm_groups g2 ON g2.id = gi.other_id") + var12;
		if (!((var3 = SQL_Query(_arg0, var2, -1))))
		{
			new var13 = 0;
			SQL_GetError(_arg0, var13, 255);
			LogError("FetchGroups() query failed: %s", var2);
			LogError("Query error: %s", var13);
			return 0;
		}
		while (DBResultSet.FetchRow(var3))
		{
			new var14 = 0;
			new var15 = 0;
			new var16 = 0;
			new var17 = 0;
			DBResultSet.FetchString(var3, 0, var14, 80, 0);
			DBResultSet.FetchString(var3, 1, var15, 80, 0);
			new var1;
			if (!((var16 = FindAdmGroup(var14)) == -1 || (var17 = FindAdmGroup(var15)) == -1))
			{
				GroupId.AddGroupImmunity(var16, var17);
			}
		}
		CloseHandle(var3);
		var3 = 0;
		Format(var2, 255, "SELECT g.name, go.type, go.name, go.access FROM sm_group_overrides go LEFT JOIN sm_groups g ON go.group_id = g.id");
		if ((var3 = SQL_Query(_arg0, var2, -1)))
		{
			new var19 = 0;
			new var20 = 0;
			new var21 = 0;
			while (DBResultSet.FetchRow(var3))
			{
				DBResultSet.FetchString(var3, 0, var6, 128, 0);
				DBResultSet.FetchString(var3, 1, var19, 16, 0);
				DBResultSet.FetchString(var3, 2, var20, 64, 0);
				DBResultSet.FetchString(var3, 3, var21, 16, 0);
				new var22 = 0;
				if (!((var22 = FindAdmGroup(var6)) == -1))
				{
					new var23 = 1;
					if (StrEqual(var19, "group", true))
					{
						var23 = 2;
					}
					new var24 = 0;
					if (StrEqual(var21, "allow", true))
					{
						var24 = 1;
					}
					GroupId.AddCommandOverride(var22, var20, var23, var24);
				}
			}
			CloseHandle(var3);
			var3 = 0;
			return 0;
		}
		new var18 = 0;
		SQL_GetError(_arg0, var18, 255);
		LogError("FetchGroups() query failed: %s", var2);
		LogError("Query error: %s", var18);
		return 0;
	}
	new var4 = 0;
	SQL_GetError(_arg0, var4, 255);
	LogError("FetchGroups() query failed: %s", var2);
	LogError("Query error: %s", var4);
	return 0;
}

void:FetchOverrides(Database:_arg0)
{
	new var1 = 0;
	new var2 = 0;
	Format(var1, 255, "SELECT type, name, flags FROM sm_overrides");
	if ((var2 = SQL_Query(_arg0, var1, -1)))
	{
		new var4 = 0;
		new var5 = 0;
		new var6 = 0;
		new var7 = 0;
		while (DBResultSet.FetchRow(var2))
		{
			DBResultSet.FetchString(var2, 0, var4, 64, 0);
			DBResultSet.FetchString(var2, 1, var5, 64, 0);
			DBResultSet.FetchString(var2, 2, var6, 32, 0);
			var7 = ReadFlagString(var6, 0);
			if (StrEqual(var4, "command", true))
			{
				AddCommandOverride(var5, 1, var7);
			}
			else
			{
				if (StrEqual(var4, "group", true))
				{
					AddCommandOverride(var5, 2, var7);
				}
			}
		}
		CloseHandle(var2);
		var2 = 0;
		return 0;
	}
	new var3 = 0;
	SQL_GetError(_arg0, var3, 255);
	LogError("FetchOverrides() query failed: %s", var1);
	LogError("Query error: %s", var3);
	return 0;
}

public void:OnRebuildAdminCache(AdminCachePart:_arg0)
{
	new var1 = 0;
	new var2 = 0;
	if (SQL_CheckConfig("admins"))
	{
		var2 = SQL_Connect("admins", true, var1, 255);
	}
	else
	{
		var2 = SQL_Connect("default", true, var1, 255);
	}
	if (var2)
	{
		if (_arg0)
		{
			if (_arg0 == 1)
			{
				FetchGroups(var2);
			}
			if (_arg0 == 2)
			{
				FetchUsers(var2);
			}
		}
		else
		{
			FetchOverrides(var2);
		}
		CloseHandle(var2);
		var2 = 0;
		return 0;
	}
	LogError("Could not connect to database \"default\": %s", var1);
	return 0;
}

public void:__ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.BytesLeft.get");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadInt64");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetInt64");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddInt64");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

