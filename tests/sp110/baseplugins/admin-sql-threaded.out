public PlVers:__version =
{
	version = 5,
	filevers = "1.10.0.6484",
	date = "04/21/2020",
	time = "18:15:15"
};
new Float:NULL_VECTOR[3];
new String:NULL_STRING[16];
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
new MaxClients;
public Plugin:myinfo =
{
	name = "SQL Admins (Threaded)",
	description = "Reads admins from SQL dynamically",
	author = "AlliedModders LLC",
	version = "1.10.0.6484",
	url = "http://www.sourcemod.net/"
};
new Database:hDatabase;
new g_sequence;
new ConnectLock;
new RebuildCachePart[3];
new <enumstruct0>:playerinfo[66] =
{
	264, 268, 272, 276, 280, 284, 288, 292, 296, 300, 304, 308, 312, 316, 320, 324, 328, 332, 336, 340, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 392, 396, 400, 404, 408, 412, 416, 420, 424, 428, 432, 436, 440, 444, 448, 452, 456, 460, 464, 468, 472, 476, 480, 484, 488, 492, 496, 500, 504, 508, 512, 516, 520, 524
};
void:FetchUsersWeCan(Database:_arg0)
{
	new var2 = 1;
	while (var2 <= MaxClients)
	{
		new var1;
		if (playerinfo[var2][1] && GetUserAdmin(var2) == -1)
		{
			FetchUser(_arg0, var2);
		}
		var2++;
	}
	RebuildCachePart[2] = 0;
	return 0;
}

void:FetchGroups(Database:_arg0, _arg1)
{
	new var1 = 0;
	Format(var1, 255, "SELECT flags, name, immunity_level FROM sm_groups");
	new var2;
	var2 = DataPack.DataPack();
	DataPack.WriteCell(var2, _arg1, false);
	DataPack.WriteString(var2, var1, false);
	Database.Query(_arg0, 29, var1, var2, 0);
	return 0;
}

void:FetchOverrides(Database:_arg0, _arg1)
{
	new var1 = 0;
	Format(var1, 255, "SELECT type, name, flags FROM sm_overrides");
	new var2;
	var2 = DataPack.DataPack();
	DataPack.WriteCell(var2, _arg1, false);
	DataPack.WriteString(var2, var1, false);
	Database.Query(_arg0, 31, var1, var2, 0);
	return 0;
}

bool:StrEqual(String:_arg0[], String:_arg1[], bool:_arg2)
{
	return strcmp(_arg0[0], _arg1[0], _arg2) == 0;
}

void:RequestDatabaseConnection()
{
	g_sequence += 1;
	ConnectLock = g_sequence;
	if (SQL_CheckConfig("admins"))
	{
		Database.Connect(19, "admins", ConnectLock);
	}
	else
	{
		Database.Connect(19, "default", ConnectLock);
	}
	return 0;
}

void:FetchUser(Database:_arg0, _arg1)
{
	new var2 = 0;
	new var3 = 0;
	new var4 = 0;
	new var5 = 0;
	new var6 = 0;
	GetClientName(_arg1, var2, 128);
	GetClientIP(_arg1, var6, 24, true);
	var4 = 0;
	if (GetClientAuthId(_arg1, 1, var4, 32, true))
	{
		if (StrEqual(var4, "STEAM_ID_LAN", true))
		{
			var4 = 0;
		}
	}
	Database.Escape(_arg0, var2, var3, 255, 0);
	new var7 = 0;
	new var8 = 0;
	var8 = Format(var8 + var7, 512 - var8, "SELECT a.id, a.authtype, a.identity, a.password, a.flags, a.name, COUNT(ag.group_id), immunity") + var8;
	var8 = Format(var8 + var7, 512 - var8, " FROM sm_admins a LEFT JOIN sm_admins_groups ag ON a.id = ag.admin_id WHERE ") + var8;
	var8 = Format(var8 + var7, 512 - var8, " (a.authtype = 'ip' AND a.identity = '%s')", var6) + var8;
	var8 = Format(var8 + var7, 512 - var8, " OR (a.authtype = 'name' AND a.identity = '%s')", var3) + var8;
	if (var4)
	{
		strcopy(var5, 32, var4);
		new var1;
		if (var4 + 6/* ERROR unknown load Binary */ == 48)
		{
			var1 = 49;
		}
		else
		{
			var1 = 48;
		}
		var5 + 6/* ERROR unknown load Binary */ = var1;
		var8 = Format(var8 + var7, 512 - var8, " OR (a.authtype = 'steam' AND (a.identity = '%s' OR a.identity = '%s'))", var4, var5) + var8;
	}
	var8 = Format(var8 + var7, 512 - var8, " GROUP BY a.id") + var8;
	g_sequence += 1;
	playerinfo[_arg1] = g_sequence;
	new var9;
	var9 = DataPack.DataPack();
	DataPack.WriteCell(var9, _arg1, false);
	DataPack.WriteCell(var9, playerinfo[_arg1], false);
	DataPack.WriteString(var9, var7, false);
	Database.Query(_arg0, 33, var7, var9, 0);
	return 0;
}

public bool:OnClientConnect(_arg0, String:_arg1[], _arg2)
{
	playerinfo[_arg0] = 0;
	playerinfo[_arg0][1] = 0;
	return 1;
}

public void:OnClientDisconnect(_arg0)
{
	playerinfo[_arg0] = 0;
	playerinfo[_arg0][1] = 0;
	return 0;
}

public Action:OnClientPreAdminCheck(_arg0)
{
	playerinfo[_arg0][1] = 1;
	if (hDatabase)
	{
		if (RebuildCachePart[2])
		{
			return 0;
		}
		if (GetUserAdmin(_arg0) != -1)
		{
			return 0;
		}
		FetchUser(hDatabase, _arg0);
		return 3;
	}
	return 0;
}

public void:OnDatabaseConnect(Database:_arg0, String:_arg1[], any:_arg2)
{
	new var1;
	if (ConnectLock == _arg2 && hDatabase)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
		return 0;
	}
	ConnectLock = 0;
	hDatabase = _arg0;
	if (hDatabase)
	{
		new var2 = 0;
		if ((var2 = RebuildCachePart[0]))
		{
			FetchOverrides(hDatabase, var2);
		}
		if ((var2 = RebuildCachePart[1]))
		{
			FetchGroups(hDatabase, var2);
		}
		if ((var2 = RebuildCachePart[2]))
		{
			FetchUsersWeCan(hDatabase);
		}
		return 0;
	}
	LogError("Failed to connect to database: %s", _arg1[0]);
	return 0;
}

public void:OnMapEnd()
{
	CloseHandle(hDatabase);
	hDatabase = 0;
	return 0;
}

public void:OnRebuildAdminCache(AdminCachePart:_arg0)
{
	new var1;
	g_sequence += 1;
	var1 = g_sequence;
	RebuildCachePart[_arg0] = var1;
	if (hDatabase)
	{
		if (_arg0)
		{
			if (_arg0 == 1)
			{
				FetchGroups(hDatabase, var1);
			}
			if (_arg0 == 2)
			{
				FetchUsersWeCan(hDatabase);
			}
		}
		else
		{
			FetchOverrides(hDatabase, var1);
		}
		return 0;
	}
	if (!ConnectLock)
	{
		RequestDatabaseConnection();
	}
	return 0;
}

public void:OnReceiveGroupImmunity(Database:_arg0, DBResultSet:_arg1, String:_arg2[], any:_arg3)
{
	new var2;
	var2 = _arg3;
	DataPack.Reset(var2, false);
	new var3;
	var3 = DataPack.ReadCell(var2);
	if (var3 != RebuildCachePart[1])
	{
		CloseHandle(var2);
		var2 = 0;
		return 0;
	}
	if (_arg1)
	{
		CloseHandle(var2);
		var2 = 0;
		while (DBResultSet.FetchRow(_arg1))
		{
			new var5 = 0;
			new var6 = 0;
			new var7 = 0;
			new var8 = 0;
			DBResultSet.FetchString(_arg1, 0, var5, 80, 0);
			DBResultSet.FetchString(_arg1, 1, var6, 80, 0);
			new var1;
			if (!((var7 = FindAdmGroup(var5)) == -1 || (var8 = FindAdmGroup(var6)) == -1))
			{
				GroupId.AddGroupImmunity(var7, var8);
			}
		}
		RebuildCachePart[1] = 0;
		return 0;
	}
	new var4 = 0;
	DataPack.ReadString(var2, var4, 255);
	LogError("SQL error receiving group immunity: %s", _arg2[0]);
	LogError("Query dump: %s", var4);
	CloseHandle(var2);
	var2 = 0;
	return 0;
}

public void:OnReceiveGroupOverrides(Database:_arg0, DBResultSet:_arg1, String:_arg2[], any:_arg3)
{
	new var1;
	var1 = _arg3;
	DataPack.Reset(var1, false);
	new var2;
	var2 = DataPack.ReadCell(var1);
	if (var2 != RebuildCachePart[1])
	{
		CloseHandle(var1);
		var1 = 0;
		return 0;
	}
	if (_arg1)
	{
		new var4 = 0;
		new var5 = 0;
		new var6 = 0;
		new var7 = 0;
		new var8 = 0;
		while (DBResultSet.FetchRow(_arg1))
		{
			DBResultSet.FetchString(_arg1, 0, var4, 80, 0);
			DBResultSet.FetchString(_arg1, 1, var5, 16, 0);
			DBResultSet.FetchString(_arg1, 2, var6, 64, 0);
			DBResultSet.FetchString(_arg1, 3, var7, 16, 0);
			if (!((var8 = FindAdmGroup(var4)) == -1))
			{
				new var9 = 1;
				if (StrEqual(var5, "group", true))
				{
					var9 = 2;
				}
				new var10 = 0;
				if (StrEqual(var7, "allow", true))
				{
					var10 = 1;
				}
				GroupId.AddCommandOverride(var8, var6, var9, var10);
			}
		}
		new var11 = 0;
		new var12 = 0;
		var11 = Format(var11 + var12, 256 - var11, "SELECT g1.name, g2.name FROM sm_group_immunity gi") + var11;
		var11 = Format(var11 + var12, 256 - var11, " LEFT JOIN sm_groups g1 ON g1.id = gi.group_id ") + var11;
		var11 = Format(var11 + var12, 256 - var11, " LEFT JOIN sm_groups g2 ON g2.id = gi.other_id") + var11;
		DataPack.Reset(var1, false);
		DataPack.WriteCell(var1, var2, false);
		DataPack.WriteString(var1, var12, false);
		Database.Query(_arg0, 25, var12, var1, 0);
		return 0;
	}
	new var3 = 0;
	DataPack.ReadString(var1, var3, 255);
	LogError("SQL error receiving group overrides: %s", _arg2[0]);
	LogError("Query dump: %s", var3);
	CloseHandle(var1);
	var1 = 0;
	return 0;
}

public void:OnReceiveGroups(Database:_arg0, DBResultSet:_arg1, String:_arg2[], any:_arg3)
{
	new var1;
	var1 = _arg3;
	DataPack.Reset(var1, false);
	new var2;
	var2 = DataPack.ReadCell(var1);
	if (var2 != RebuildCachePart[1])
	{
		CloseHandle(var1);
		var1 = 0;
		return 0;
	}
	if (_arg1)
	{
		new var4 = 0;
		new var5 = 0;
		new var6 = 0;
		while (DBResultSet.FetchRow(_arg1))
		{
			DBResultSet.FetchString(_arg1, 0, var4, 32, 0);
			DBResultSet.FetchString(_arg1, 1, var5, 128, 0);
			var6 = DBResultSet.FetchInt(_arg1, 2, 0);
			new var7 = 0;
			if ((var7 = FindAdmGroup(var5)) == -1)
			{
				var7 = CreateAdmGroup(var5);
			}
			new var8;
			var8 = strlen(var4);
			new var9 = 0;
			while (var9 < var8)
			{
				new var10 = 0;
				if (FindFlagByChar(var4[var9], var10))
				{
					GroupId.SetFlag(var7, var10, true);
				}
				var9++;
			}
			GroupId.ImmunityLevel.set(var7, var6);
		}
		new var11 = 0;
		Format(var11, 255, "SELECT g.name, og.type, og.name, og.access FROM sm_group_overrides og JOIN sm_groups g ON og.group_id = g.id ORDER BY g.id DESC");
		DataPack.Reset(var1, false);
		DataPack.WriteCell(var1, var2, false);
		DataPack.WriteString(var1, var11, false);
		Database.Query(_arg0, 27, var11, var1, 0);
		return 0;
	}
	new var3 = 0;
	DataPack.ReadString(var1, var3, 255);
	LogError("SQL error receiving groups: %s", _arg2[0]);
	LogError("Query dump: %s", var3);
	CloseHandle(var1);
	var1 = 0;
	return 0;
}

public void:OnReceiveOverrides(Database:_arg0, DBResultSet:_arg1, String:_arg2[], any:_arg3)
{
	new var1;
	var1 = _arg3;
	DataPack.Reset(var1, false);
	new var2;
	var2 = DataPack.ReadCell(var1);
	if (var2 != RebuildCachePart[0])
	{
		CloseHandle(var1);
		var1 = 0;
		return 0;
	}
	if (_arg1)
	{
		CloseHandle(var1);
		var1 = 0;
		new var4 = 0;
		new var5 = 0;
		new var6 = 0;
		new var7 = 0;
		while (DBResultSet.FetchRow(_arg1))
		{
			DBResultSet.FetchString(_arg1, 0, var4, 64, 0);
			DBResultSet.FetchString(_arg1, 1, var5, 64, 0);
			DBResultSet.FetchString(_arg1, 2, var6, 32, 0);
			var7 = ReadFlagString(var6, 0);
			if (StrEqual(var4, "command", true))
			{
				AddCommandOverride(var5, 1, var7);
			}
			else
			{
				if (StrEqual(var4, "group", true))
				{
					AddCommandOverride(var5, 2, var7);
				}
			}
		}
		RebuildCachePart[0] = 0;
		return 0;
	}
	new var3 = 0;
	DataPack.ReadString(var1, var3, 255);
	LogError("SQL error receiving overrides: %s", _arg2[0]);
	LogError("Query dump: %s", var3);
	CloseHandle(var1);
	var1 = 0;
	return 0;
}

public void:OnReceiveUser(Database:_arg0, DBResultSet:_arg1, String:_arg2[], any:_arg3)
{
	new var2;
	var2 = _arg3;
	DataPack.Reset(var2, false);
	new var3;
	var3 = DataPack.ReadCell(var2);
	new var4;
	var4 = DataPack.ReadCell(var2);
	if (var4 != playerinfo[var3])
	{
		CloseHandle(var2);
		var2 = 0;
		return 0;
	}
	if (_arg1)
	{
		new var6;
		var6 = DBResultSet.RowCount.get(_arg1);
		if (var6)
		{
			new var7 = 0;
			new var8 = 0;
			new var9 = 0;
			new var10 = 0;
			new var11 = 0;
			new var12 = 0;
			new var13 = 0;
			new var14 = 0;

/* ERROR! null */
 function "OnReceiveUser" (number 16)

public void:OnReceiveUserGroups(Database:_arg0, DBResultSet:_arg1, String:_arg2[], any:_arg3)
{
	new var1;
	var1 = _arg3;
	DataPack.Reset(var1, false);
	new var2;
	var2 = DataPack.ReadCell(var1);
	new var3;
	var3 = DataPack.ReadCell(var1);
	if (var3 != playerinfo[var2])
	{
		CloseHandle(var1);
		var1 = 0;
		return 0;
	}
	new var4;
	var4 = DataPack.ReadCell(var1);
	if (var4 != GetUserAdmin(var2))
	{
		NotifyPostAdminCheck(var2);
		CloseHandle(var1);
		var1 = 0;
		return 0;
	}
	if (_arg1)
	{
		new var6 = 0;
		new var7 = 0;
		while (DBResultSet.FetchRow(_arg1))
		{
			DBResultSet.FetchString(_arg1, 0, var6, 80, 0);
			if (!((var7 = FindAdmGroup(var6)) == -1))
			{
				AdminId.InheritGroup(var4, var7);
			}
		}
		NotifyPostAdminCheck(var2);
		CloseHandle(var1);
		var1 = 0;
		return 0;
	}
	new var5 = 0;
	DataPack.ReadString(var1, var5, 255);
	LogError("SQL error receiving user: %s", _arg2[0]);
	LogError("Query dump: %s", var5);
	NotifyPostAdminCheck(var2);
	CloseHandle(var1);
	var1 = 0;
	return 0;
}

public void:__ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.BytesLeft.get");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadInt64");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetInt64");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddInt64");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

