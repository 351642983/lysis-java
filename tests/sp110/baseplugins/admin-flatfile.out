
/* ERROR PREPROCESSING! null */
 function "ReadSimpleUsers" (number 26)
public PlVers:__version =
{
	version = 5,
	filevers = "1.10.0.6484",
	date = "04/21/2020",
	time = "18:15:19"
};
new Float:NULL_VECTOR[3];
new String:NULL_STRING[16];
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
new MaxClients;
public Plugin:myinfo =
{
	name = "Admin File Reader",
	description = "Reads admin files",
	author = "AlliedModders LLC",
	version = "1.10.0.6484",
	url = "http://www.sourcemod.net/"
};
new bool:g_LoggedFileName;
new g_ErrorCount;
new g_IgnoreLevel;
new g_CurrentLine;
new String:g_Filename[1024];
new SMCParser:g_hOldOverrideParser;
new SMCParser:g_hNewOverrideParser;
new OverrideState:g_OverrideState;
new SMCParser:g_hGroupParser;
new GroupId:g_CurGrp = -1;
new GroupState:g_GroupState;
new GroupPass:g_GroupPass;
new bool:g_NeedReparse;
new SMCParser:g_hUserParser;
new UserState:g_UserState;
new String:g_CurAuth[256];
new String:g_CurIdent[256];
new String:g_CurName[256];
new String:g_CurPass[256];
new ArrayList:g_GroupArray;
new g_CurFlags;
new g_CurImmunity;
void:InitializeUserParser()
{
	if (!g_hUserParser)
	{
		g_hUserParser = SMCParser.SMCParser();
		SMCParser.OnEnterSection.set(g_hUserParser, 61);
		SMCParser.OnKeyValue.set(g_hUserParser, 59);
		SMCParser.OnLeaveSection.set(g_hUserParser, 57);
		SMCParser.OnRawLine.set(g_hUserParser, 55);
		g_GroupArray = ArrayList.ArrayList(1, 0);
	}
	return 0;
}

void:ReadUsers()
{
	InitializeUserParser();
	BuildPath(0, g_Filename, 256, "configs/admins.cfg");
	InitGlobalStates();
	g_UserState = 0;
	new var1;
	var1 = SMCParser.ParseFile(g_hUserParser, g_Filename, 0, 0);
	if (var1)
	{
		new var2 = 0;
		if (SMCParser.GetErrorString(g_hUserParser, var1, var2, 64))
		{
			ParseError("%s", var2);
		}
		else
		{
			ParseError("Fatal parse error");
		}
	}
	return 0;
}

void:DecodeAuthMethod(String:_arg0[], String:_arg1[128], _arg2)
{
	new var1;
	if (StrContains(_arg0[0], "STEAM_", true) && strncmp("0:", _arg0[0], 2, true) && strncmp("1:", _arg0[0], 2, true))
	{
		strcopy(_arg1[0], 32, "steam");
		_arg2 = 0;
	}
	else
	{
		new var2;
		if (strncmp(_arg0[0], "[U:", 3, true) && _arg0[0][strlen(_arg0[0]) + -1] == ']')
		{
			strcopy(_arg1[0], 32, "steam");
			_arg2 = 0;
		}
		if (_arg0[0] == '!')
		{
			strcopy(_arg1[0], 32, "ip");
			_arg2 = 1;
		}
		strcopy(_arg1[0], 32, "name");
		_arg2 = 0;
	}
	return 0;
}

void:ReadAdminLine(String:_arg0[])
{
	new var2 = 0;
	new var3 = 0;
	new var4 = 0;
	new var5 = 0;
	new var6 = 0;
	new var7 = 0;
	new var8 = 0;
	if ((var7 = BreakString(_arg0[0], var4, 64)) == -1)
	{
		return 0;
	}
	var6 = var7;
	DecodeAuthMethod(var4, var5, var8);
	if ((var3 = FindAdminByIdentity(var5, var8 + var4)) == -1)
	{
		var3 = CreateAdmin("");
	}
	else
	{
		var2 = 1;
	}
	new var9 = 0;
	var7 = BreakString(var6 + _arg0[0], var9, 64);
	var6 = var7 + var6;
	new var10 = 0;
	new var11 = 0;
	if (0 < (var11 = StringToIntEx(var9, var10, 10)))
	{
		AdminId.ImmunityLevel.set(var3, var10);
		if (var9[var11] == 58)
		{
			var11++;
		}
	}
	if (var9[var11] == 64)
	{
		new var12;
		var12 = FindAdmGroup(var11 + 1 + var9);
		if (var12 == -1)
		{
			ParseError("Invalid group detected: %s", var11 + 1 + var9);
			return 0;
		}
		AdminId.InheritGroup(var3, var12);
	}
	else
	{
		new var13;
		var13 = strlen(var11 + var9);
		new var14 = 0;
		while (var14 < var13)
		{
			new var1;
			if (var10 && var9[var14 + var11] == 36)
			{
				AdminId.ImmunityLevel.set(var3, 1);
			}
			else
			{
				new var15 = 0;
				if (FindFlagByChar(var9[var14 + var11], var15))
				{
					AdminId.SetFlag(var3, var15, true);
				}
				ParseError("Invalid flag detected: %c", var14 + var11 + var9);
				var14++;
			}
			var14++;
		}
		if (0/* ERROR unknown load Constant */)
		{
			new var16;
			var16 = FindAdmGroup("Default");
			if (var16 != -1)
			{
				AdminId.InheritGroup(var3, var16);
			}
		}
	}
	if (var7 != -1)
	{
		new var17 = 0;
		BreakString(var6 + _arg0[0], var17, 64);
		AdminId.SetPassword(var3, var17);
	}
	if (!var2)
	{
		if (!(AdminId.BindIdentity(var3, var5, var8 + var4)))
		{
			RemoveAdmin(var3);
			ParseError("Failed to bind identity %s (method %s)", var8 + var4, var5);
		}
	}
	return 0;
}

void:ParseError(String:_arg0[], any:_arg1)
{
	new var1 = 0;
	if (!g_LoggedFileName)
	{
		LogError("Error(s) detected parsing %s", 2416);
		g_LoggedFileName = true;
	}
	VFormat(var1, 512, _arg0[0], 2);
	LogError(" (line %d) %s", g_CurrentLine, var1);
	g_ErrorCount += 1;
	return 0;
}

void:InitGlobalStates()
{
	g_ErrorCount = 0;
	g_IgnoreLevel = 0;
	g_CurrentLine = 0;
	g_LoggedFileName = false;
	return 0;
}

bool:StrEqual(String:_arg0[], String:_arg1[], bool:_arg2)
{
	return strcmp(_arg0[0], _arg1[0], _arg2) == 0;
}

void:File.Close(File:_arg0)
{
	CloseHandle(_arg0);
	return 0;
}

FlagToBit(AdminFlag:_arg0)
{
	return 1 << _arg0;
}

void:InitializeOverrideParsers()
{
	if (!g_hOldOverrideParser)
	{
		g_hOldOverrideParser = SMCParser.SMCParser();
		SMCParser.OnEnterSection.set(g_hOldOverrideParser, 47);
		SMCParser.OnKeyValue.set(g_hOldOverrideParser, 51);
		SMCParser.OnLeaveSection.set(g_hOldOverrideParser, 45);
		SMCParser.OnRawLine.set(g_hOldOverrideParser, 49);
	}
	if (!g_hNewOverrideParser)
	{
		g_hNewOverrideParser = SMCParser.SMCParser();
		SMCParser.OnEnterSection.set(g_hNewOverrideParser, 43);
		SMCParser.OnKeyValue.set(g_hNewOverrideParser, 51);
		SMCParser.OnLeaveSection.set(g_hNewOverrideParser, 41);
		SMCParser.OnRawLine.set(g_hNewOverrideParser, 49);
	}
	return 0;
}

void:InternalReadOverrides(SMCParser:_arg0, String:_arg1[])
{
	BuildPath(0, g_Filename, 256, _arg1[0]);
	InitGlobalStates();
	g_OverrideState = 0;
	new var1;
	var1 = SMCParser.ParseFile(_arg0, g_Filename, 0, 0);
	if (var1)
	{
		new var2 = 0;
		if (SMCParser.GetErrorString(_arg0, var1, var2, 64))
		{
			ParseError("%s", var2);
		}
		else
		{
			ParseError("Fatal parse error");
		}
	}
	return 0;
}

void:ReadOverrides()
{
	InitializeOverrideParsers();
	InternalReadOverrides(g_hOldOverrideParser, "configs/admin_levels.cfg");
	InternalReadOverrides(g_hNewOverrideParser, "configs/admin_overrides.cfg");
	return 0;
}

void:InitializeGroupParser()
{
	if (!g_hGroupParser)
	{
		g_hGroupParser = SMCParser.SMCParser();
		SMCParser.OnEnterSection.set(g_hGroupParser, 39);
		SMCParser.OnKeyValue.set(g_hGroupParser, 37);
		SMCParser.OnLeaveSection.set(g_hGroupParser, 35);
		SMCParser.OnRawLine.set(g_hGroupParser, 33);
	}
	return 0;
}

void:InternalReadGroups(String:_arg0[], GroupPass:_arg1)
{
	InitGlobalStates();
	g_GroupState = 0;
	g_CurGrp = -1;
	g_GroupPass = _arg1;
	g_NeedReparse = false;
	new var1;
	var1 = SMCParser.ParseFile(g_hGroupParser, _arg0[0], 0, 0);
	if (var1)
	{
		new var2 = 0;
		if (SMCParser.GetErrorString(g_hGroupParser, var1, var2, 64))
		{
			ParseError("%s", var2);
		}
		else
		{
			ParseError("Fatal parse error");
		}
	}
	return 0;
}

void:ReadGroups()
{
	InitializeGroupParser();
	BuildPath(0, g_Filename, 256, "configs/admin_groups.cfg");
	InternalReadGroups(g_Filename, 1);
	if (g_NeedReparse)
	{
		InternalReadGroups(g_Filename, 2);
	}
	return 0;
}

public void:OnRebuildAdminCache(AdminCachePart:_arg0)
{
	if (_arg0)
	{
		if (_arg0 == 1)
		{
			ReadGroups();
		}
		if (_arg0 == 2)
		{
			ReadUsers();
			ReadSimpleUsers();
		}
	}
	else
	{
		ReadOverrides();
	}
	return 0;
}

public SMCResult:ReadGroups_CurrentLine(SMCParser:_arg0, String:_arg1[], _arg2)
{
	g_CurrentLine = _arg2;
	return 0;
}

public SMCResult:ReadGroups_EndSection(SMCParser:_arg0)
{
	if (g_IgnoreLevel)
	{
		g_IgnoreLevel -= 1;
		return 0;
	}
	if (g_GroupState == 3)
	{
		g_GroupState = 2;
	}
	else
	{
		if (g_GroupState == 2)
		{
			g_GroupState = 1;
			g_CurGrp = -1;
		}
		if (g_GroupState == 1)
		{
			g_GroupState = 0;
		}
	}
	return 0;
}

public SMCResult:ReadGroups_KeyValue(SMCParser:_arg0, String:_arg1[], String:_arg2[], bool:_arg3, bool:_arg4)
{
	new var1;
	if (g_CurGrp == -1 || g_IgnoreLevel)
	{
		return 0;
	}
	new var3 = 0;
	if (g_GroupPass == 1)
	{
		if (g_GroupState == 2)
		{
			if (StrEqual(_arg1[0], "flags", true))
			{
				new var4;
				var4 = strlen(_arg2[0]);
				new var5 = 0;
				while (var5 < var4)
				{
					if (FindFlagByChar(_arg2[0][var5], var3))
					{
						GroupId.SetFlag(g_CurGrp, var3, true);
					}
					var5++;
				}
			}
			else
			{
				if (StrEqual(_arg1[0], "immunity", true))
				{
					g_NeedReparse = true;
				}
			}
		}
		else
		{
			if (g_GroupState == 3)
			{
				new var6 = 0;
				if (StrEqual(_arg2[0], "allow", false))
				{
					var6 = 1;
				}
				if (_arg1[0] == '@')
				{
					GroupId.AddCommandOverride(g_CurGrp, _arg1[0] + 1, 2, var6);
				}
				else
				{
					GroupId.AddCommandOverride(g_CurGrp, _arg1[0], 1, var6);
				}
			}
		}
	}
	else
	{
		new var2;
		if (g_GroupPass == 2 && g_GroupState == 2)
		{
			if (StrEqual(_arg1[0], "immunity", true))
			{
				if (StrEqual(_arg2[0], "*", true))
				{
					GroupId.ImmunityLevel.set(g_CurGrp, 2);
				}
				if (StrEqual(_arg2[0], "$", true))
				{
					GroupId.ImmunityLevel.set(g_CurGrp, 1);
				}
				new var7 = 0;
				if (StringToIntEx(_arg2[0], var7, 10))
				{
					GroupId.ImmunityLevel.set(g_CurGrp, var7);
				}
				else
				{
					new var8 = 0;
					if (_arg2[0] == '@')
					{
						var8 = FindAdmGroup(_arg2[0] + 1);
					}
					else
					{
						var8 = FindAdmGroup(_arg2[0]);
					}
					if (var8 != -1)
					{
						GroupId.AddGroupImmunity(g_CurGrp, var8);
					}
					else
					{
						ParseError("Unable to find group: \"%s\"", _arg2[0]);
					}
				}
			}
		}
	}
	return 0;
}

public SMCResult:ReadGroups_NewSection(SMCParser:_arg0, String:_arg1[], bool:_arg2)
{
	if (g_IgnoreLevel)
	{
		g_IgnoreLevel += 1;
		return 0;
	}
	if (g_GroupState)
	{
		if (g_GroupState == 1)
		{
			if ((g_CurGrp = CreateAdmGroup(_arg1[0])) == -1)
			{
				g_CurGrp = FindAdmGroup(_arg1[0]);
			}
			g_GroupState = 2;
		}
		if (g_GroupState == 2)
		{
			if (StrEqual(_arg1[0], "Overrides", true))
			{
				g_GroupState = 3;
			}
			else
			{
				g_IgnoreLevel += 1;
			}
		}
		g_IgnoreLevel += 1;
	}
	else
	{
		if (StrEqual(_arg1[0], "Groups", true))
		{
			g_GroupState = 1;
		}
		else
		{
			g_IgnoreLevel += 1;
		}
	}
	return 0;
}

public SMCResult:ReadNewOverrides_EndSection(SMCParser:_arg0)
{
	if (g_IgnoreLevel)
	{
		g_IgnoreLevel -= 1;
		return 0;
	}
	if (g_OverrideState == 2)
	{
		g_OverrideState = 0;
	}
	return 0;
}

public SMCResult:ReadNewOverrides_NewSection(SMCParser:_arg0, String:_arg1[], bool:_arg2)
{
	if (g_IgnoreLevel)
	{
		g_IgnoreLevel += 1;
		return 0;
	}
	if (g_OverrideState)
	{
		g_IgnoreLevel += 1;
	}
	else
	{
		if (StrEqual(_arg1[0], "Overrides", true))
		{
			g_OverrideState = 2;
		}
		else
		{
			g_IgnoreLevel += 1;
		}
	}
	return 0;
}

public SMCResult:ReadOldOverrides_EndSection(SMCParser:_arg0)
{
	if (g_IgnoreLevel)
	{
		g_IgnoreLevel -= 1;
		return 0;
	}
	if (g_OverrideState == 1)
	{
		g_OverrideState = 0;
	}
	else
	{
		if (g_OverrideState == 2)
		{
			g_OverrideState = 1;
			return 1;
		}
	}
	return 0;
}

public SMCResult:ReadOldOverrides_NewSection(SMCParser:_arg0, String:_arg1[], bool:_arg2)
{
	if (g_IgnoreLevel)
	{
		g_IgnoreLevel += 1;
		return 0;
	}
	if (g_OverrideState)
	{
		if (g_OverrideState == 1)
		{
			if (StrEqual(_arg1[0], "Overrides", true))
			{
				g_OverrideState = 2;
			}
			else
			{
				g_IgnoreLevel += 1;
			}
		}
		g_IgnoreLevel += 1;
	}
	else
	{
		if (StrEqual(_arg1[0], "Levels", true))
		{
			g_OverrideState = 1;
		}
		else
		{
			g_IgnoreLevel += 1;
		}
	}
	return 0;
}

public SMCResult:ReadOverrides_CurrentLine(SMCParser:_arg0, String:_arg1[], _arg2)
{
	g_CurrentLine = _arg2;
	return 0;
}

public SMCResult:ReadOverrides_KeyValue(SMCParser:_arg0, String:_arg1[], String:_arg2[], bool:_arg3, bool:_arg4)
{
	new var1;
	if (g_OverrideState == 2 && g_IgnoreLevel)
	{
		return 0;
	}
	new var2;
	var2 = ReadFlagString(_arg2[0], 0);
	if (_arg1[0] == '@')
	{
		AddCommandOverride(_arg1[0] + 1, 2, var2);
	}
	else
	{
		AddCommandOverride(_arg1[0], 1, var2);
	}
	return 0;
}


/* ERROR! null */
 function "ReadSimpleUsers" (number 26)

public SMCResult:ReadUsers_CurrentLine(SMCParser:_arg0, String:_arg1[], _arg2)
{
	g_CurrentLine = _arg2;
	return 0;
}

public SMCResult:ReadUsers_EndSection(SMCParser:_arg0)
{
	if (g_IgnoreLevel)
	{
		g_IgnoreLevel -= 1;
		return 0;
	}
	if (g_UserState == 2)
	{
		new var1;
		if (g_CurIdent[0] && g_CurAuth[0])
		{
			new var2 = 0;
			new var3 = 0;
			new var4 = 0;
			new var5 = 0;
			new var6 = 0;
			if ((var3 = FindAdminByIdentity(g_CurAuth, g_CurIdent)) == -1)
			{
				var3 = CreateAdmin(g_CurName);
				if (!(AdminId.BindIdentity(var3, g_CurAuth, g_CurIdent)))
				{
					RemoveAdmin(var3);
					ParseError("Failed to bind auth \"%s\" to identity \"%s\"", g_CurAuth, g_CurIdent);
					return 0;
				}
			}
			var5 = ArrayList.Length.get(g_GroupArray);
			var4 = 0;
			while (var4 < var5)
			{
				AdminId.InheritGroup(var3, ArrayList.Get(g_GroupArray, var4, 0, false));
				var4++;
			}
			AdminId.SetPassword(var3, g_CurPass);
			if (AdminId.ImmunityLevel.get(var3) < g_CurImmunity)
			{
				AdminId.ImmunityLevel.set(var3, g_CurImmunity);
			}
			var6 = FlagBitsToArray(g_CurFlags, var2, 26);
			var4 = 0;
			while (var4 < var6)
			{
				AdminId.SetFlag(var3, var2[var4], true);
				var4++;
			}
		}
		else
		{
			ParseError("Failed to create admin: did you forget either the auth or identity properties?");
		}
		g_UserState = 1;
	}
	else
	{
		if (g_UserState == 1)
		{
			g_UserState = 0;
		}
	}
	return 0;
}

public SMCResult:ReadUsers_KeyValue(SMCParser:_arg0, String:_arg1[], String:_arg2[], bool:_arg3, bool:_arg4)
{
	new var1;
	if (g_UserState == 2 && g_IgnoreLevel)
	{
		return 0;
	}
	if (StrEqual(_arg1[0], "auth", true))
	{
		strcopy(g_CurAuth, 64, _arg2[0]);
	}
	else
	{
		if (StrEqual(_arg1[0], "identity", true))
		{
			strcopy(g_CurIdent, 64, _arg2[0]);
		}
		if (StrEqual(_arg1[0], "password", true))
		{
			strcopy(g_CurPass, 64, _arg2[0]);
		}
		if (StrEqual(_arg1[0], "group", true))
		{
			new var2;
			var2 = FindAdmGroup(_arg2[0]);
			if (var2 == -1)
			{
				ParseError("Unknown group \"%s\"", _arg2[0]);
			}
			ArrayList.Push(g_GroupArray, var2);
		}
		if (StrEqual(_arg1[0], "flags", true))
		{
			new var3;
			var3 = strlen(_arg2[0]);
			new var4 = 0;
			new var5 = 0;
			while (var5 < var3)
			{
				if (FindFlagByChar(_arg2[0][var5], var4))
				{
					g_CurFlags = FlagToBit(var4) | g_CurFlags;
				}
				else
				{
					ParseError("Invalid flag detected: %c", var5 + _arg2[0]);
				}
				var5++;
			}
		}
		if (StrEqual(_arg1[0], "immunity", true))
		{
			g_CurImmunity = StringToInt(_arg2[0], 10);
		}
	}
	return 0;
}

public SMCResult:ReadUsers_NewSection(SMCParser:_arg0, String:_arg1[], bool:_arg2)
{
	if (g_IgnoreLevel)
	{
		g_IgnoreLevel += 1;
		return 0;
	}
	if (g_UserState)
	{
		if (g_UserState == 1)
		{
			g_UserState = 2;
			strcopy(g_CurName, 64, _arg1[0]);
			g_CurAuth[0] = 0;
			g_CurIdent[0] = 0;
			g_CurPass[0] = 0;
			ArrayList.Clear(g_GroupArray);
			g_CurFlags = 0;
			g_CurImmunity = 0;
		}
		g_IgnoreLevel += 1;
	}
	else
	{
		if (StrEqual(_arg1[0], "Admins", true))
		{
			g_UserState = 1;
		}
		else
		{
			g_IgnoreLevel += 1;
		}
	}
	return 0;
}

public void:__ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.BytesLeft.get");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadInt64");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetInt64");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddInt64");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

