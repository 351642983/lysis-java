public PlVers:__version =
{
	version = 5,
	filevers = "1.10.0.6484",
	date = "04/21/2020",
	time = "18:15:20"
};
new Float:NULL_VECTOR[3];
new String:NULL_STRING[16];
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
new MaxClients;
public Extension:__ext_topmenus =
{
	name = "TopMenus",
	file = "topmenus.ext",
	autoload = 1,
	required = 0,
};
public SharedPlugin:__pl_adminmenu =
{
	name = "adminmenu",
	file = "adminmenu.smx",
	required = 0,
};
public Plugin:myinfo =
{
	name = "Basic Ban Commands",
	description = "Basic Banning Commands",
	author = "AlliedModders LLC",
	version = "1.10.0.6484",
	url = "http://www.sourcemod.net/"
};
new TopMenu:hTopMenu;
new <enumstruct0>:playerinfo[66] =
{
	264, 276, 288, 300, 312, 324, 336, 348, 360, 372, 384, 396, 408, 420, 432, 444, 456, 468, 480, 492, 504, 516, 528, 540, 552, 564, 576, 588, 600, 612, 624, 636, 648, 660, 672, 684, 696, 708, 720, 732, 744, 756, 768, 780, 792, 804, 816, 828, 840, 852, 864, 876, 888, 900, 912, 924, 936, 948, 960, 972, 984, 996, 1008, 1020, 1032, 1044
};
new KeyValues:g_hKvBanReasons;
new String:g_BanReasonsPath[1024];
void:LoadBanReasons()
{
	CloseHandle(g_hKvBanReasons);
	g_hKvBanReasons = 0;
	g_hKvBanReasons = KeyValues.KeyValues("banreasons", "", "");
	if (KeyValues.ImportFromFile(g_hKvBanReasons, g_BanReasonsPath))
	{
		new var1 = 0;
		if (KeyValues.GetSectionName(g_hKvBanReasons, var1, 255))
		{
			if (strcmp(var1, "banreasons", true))
			{
				SetFailState("Error in %s: Couldn't find 'banreasons'", 4512);
				return 0;
			}
			KeyValues.Rewind(g_hKvBanReasons);
			return 0;
		}
		SetFailState("Error in %s: File corrupt or in the wrong format", 4512);
		return 0;
	}
	SetFailState("Error in %s: File not found, corrupt or in the wrong format", 4512);
	return 0;
}

bool:StrEqual(String:_arg0[], String:_arg1[], bool:_arg2)
{
	return strcmp(_arg0[0], _arg1[0], _arg2) == 0;
}

void:ReplyToTargetError(_arg0, _arg1)
{
	switch (_arg1)
	{
		case -7:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2492);
		}
		case -6:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2464);
		}
		case -5:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2436);
		}
		case -4:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2408);
		}
		case -3:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2376);
		}
		case -2:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2348);
		}
		case -1:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2316);
		}
		case 0:
		{
			ReplyToCommand(_arg0, "[SM] %t", 2288);
		}
		default:
		{
		}
	}
	return 0;
}

FindTarget(_arg0, String:_arg1[], bool:_arg2, bool:_arg3)
{
	new var1 = 0;
	new var2 = 0;
	new var3 = 16;
	if (_arg2)
	{
		var3 |= 32;
	}
	if (!_arg3)
	{
		var3 |= 8;
	}

/* ERROR! lysis.nodes.types.DConstant cannot be cast to lysis.nodes.types.DDeclareLocal */
 function "FindTarget" (number 3)

void:PrepareBan(_arg0, _arg1, _arg2, String:_arg3[])
{
	new var1;
	var1 = GetClientOfUserId(playerinfo[_arg0][1]);
	if (_arg1 != var1)
	{
		if (_arg0)
		{
			PrintToChat(_arg0, "[SM] %t", 4812);
		}
		else
		{
			PrintToServer("[SM] %t", 4776);
		}
		return 0;
	}
	new var2 = 0;
	GetClientName(_arg1, var2, 128);
	if (_arg2)
	{
		if (_arg3[0])
		{
			ShowActivity(_arg0, "%t", "Banned player reason", var2, _arg2, _arg3[0]);
		}
		ShowActivity(_arg0, "%t", "Banned player", var2, _arg2);
	}
	else
	{
		if (_arg3[0])
		{
			ShowActivity(_arg0, "%t", "Permabanned player reason", var2, _arg3[0]);
		}
		else
		{
			ShowActivity(_arg0, "%t", "Permabanned player", var2);
		}
	}
	LogAction(_arg0, _arg1, "\"%L\" banned \"%L\" (minutes \"%d\") (reason \"%s\")", _arg0, _arg1, _arg2, _arg3[0]);
	if (_arg3[0])
	{
		BanClient(_arg1, _arg2, 1, _arg3[0], _arg3[0], "sm_ban", _arg0);
	}
	else
	{
		BanClient(_arg1, _arg2, 1, "Banned", "Banned", "sm_ban", _arg0);
	}
	return 0;
}

void:DisplayBanTargetMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(29, 28);
	new var2 = 0;
	Format(var2, 100, "%T:", "Ban player", _arg0);
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	AddTargetsToMenu2(var1, _arg0, 36);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

void:DisplayBanTimeMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(33, 28);
	new var2 = 0;
	Format(var2, 100, "%T: %N", "Ban player", _arg0, playerinfo[_arg0]);
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	Menu.AddItem(var1, "0", "Permanent", 0);
	Menu.AddItem(var1, "10", "10 Minutes", 0);
	Menu.AddItem(var1, "30", "30 Minutes", 0);
	Menu.AddItem(var1, "60", "1 Hour", 0);
	Menu.AddItem(var1, "240", "4 Hours", 0);
	Menu.AddItem(var1, "1440", "1 Day", 0);
	Menu.AddItem(var1, "10080", "1 Week", 0);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

void:DisplayBanReasonMenu(_arg0)
{
	new var1;
	var1 = Menu.Menu(31, 28);
	new var2 = 0;
	Format(var2, 100, "%T: %N", "Ban reason", _arg0, playerinfo[_arg0]);
	Menu.SetTitle(var1, var2);
	Menu.ExitBackButton.set(var1, true);
	Menu.AddItem(var1, "", "Custom reason (type in chat)", 0);
	new var3 = 0;
	new var4 = 0;
	KeyValues.GotoFirstSubKey(g_hKvBanReasons, false);
	do {
		KeyValues.GetSectionName(g_hKvBanReasons, var3, 100);
		KeyValues.GetString(g_hKvBanReasons, NULL_STRING, var4, 255, "");
		Menu.AddItem(var1, var4, var3, 0);
	} while (KeyValues.GotoNextKey(g_hKvBanReasons, false));
	KeyValues.Rewind(g_hKvBanReasons);
	Menu.Display(var1, _arg0, 0);
	return 0;
}

public void:AdminMenu_Ban(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	playerinfo[_arg3][3] = 0;
	if (_arg1)
	{
		if (_arg1 == 2)
		{
			DisplayBanTargetMenu(_arg3);
		}
	}
	else
	{
		Format(_arg4[0], _arg5, "%T", "Ban player", _arg3);
	}
	return 0;
}

public Action:Command_AbortBan(_arg0, _arg1)
{
	if (CheckCommandAccess(_arg0, "sm_ban", 8, false))
	{
		if (playerinfo[_arg0][3])
		{
			playerinfo[_arg0][3] = 0;
			ReplyToCommand(_arg0, "[SM] %t", 6568);
		}
		else
		{
			ReplyToCommand(_arg0, "[SM] %t", 6608);
		}
		return 3;
	}
	ReplyToCommand(_arg0, "[SM] %t", 6548);
	return 3;
}

public Action:Command_AddBan(_arg0, _arg1)
{
	if (_arg1 < 2)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_addban <time> <steamid> [reason]");
		return 3;
	}
	new var3 = 0;
	new var4 = 0;
	new var5 = 0;
	GetCmdArgString(var3, 256);
	new var6 = 0;
	new var7 = 0;
	if ((var6 = BreakString(var3, var4, 50)) == -1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_addban <time> <steamid> [reason]");
		return 3;
	}
	var7 = var6 + var7;
	if ((var6 = BreakString(var7 + var3, var5, 50)) != -1)
	{
		var7 = var6 + var7;
	}
	else
	{
		var7 = 0;
		var3 = 0;
	}
	new var8 = 0;
	new var1;
	if (strncmp(var5, "STEAM_", 6, true) && var5 + 7/* ERROR unknown load Binary */ == 58)
	{
		var8 = 1;
	}
	else
	{
		if (!(strncmp(var5, "[U:", 3, true)))
		{
			var8 = 1;
		}
	}
	if (var8)
	{
		new var9;
		var9 = FindAdminByIdentity("steam", var5);
		new var2;
		if (_arg0 && CanAdminTarget(GetUserAdmin(_arg0), var9))
		{
			ReplyToCommand(_arg0, "[SM] %t", 6312);
			return 3;
		}
		new var10;
		var10 = StringToInt(var4, 10);
		LogAction(_arg0, -1, "\"%L\" added ban (minutes \"%d\") (id \"%s\") (reason \"%s\")", _arg0, var10, var5, var7 + var3);
		BanIdentity(var5, var10, 4, var7 + var3, "sm_addban", _arg0);
		ReplyToCommand(_arg0, "[SM] %t", 6400);
		return 3;
	}
	ReplyToCommand(_arg0, "[SM] %t", 6268);
	return 3;
}

public Action:Command_Ban(_arg0, _arg1)
{
	if (_arg1 < 2)
	{
		new var1;
		if (GetCmdReplySource() == 1 && _arg0 && _arg1)
		{
			DisplayBanTargetMenu(_arg0);
		}
		else
		{
			ReplyToCommand(_arg0, "[SM] Usage: sm_ban <#userid|name> <minutes|0> [reason]");
		}
		return 3;
	}
	new var2 = 0;
	new var3 = 0;
	new var4 = 0;
	GetCmdArgString(var4, 256);
	new var5 = 0;
	var2 = BreakString(var4, var5, 65);
	new var6;
	var6 = FindTarget(_arg0, var5, true, true);
	if (var6 == -1)
	{
		return 3;
	}
	new var7 = 0;
	if ((var3 = BreakString(var2 + var4, var7, 12)) != -1)
	{
		var2 = var3 + var2;
	}
	else
	{
		var2 = 0;
		var4 = 0;
	}
	playerinfo[_arg0][1] = GetClientUserId(var6);
	new var8;
	var8 = StringToInt(var7, 10);
	PrepareBan(_arg0, var6, var8, var2 + var4);
	return 3;
}

public Action:Command_BanIp(_arg0, _arg1)
{
	if (_arg1 < 2)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_banip <ip|#userid|name> <time> [reason]");
		return 3;
	}
	new var7 = 0;
	new var8 = 0;
	new var9 = 0;
	new var10 = 0;
	new var11 = 0;
	GetCmdArgString(var9, 256);
	var7 = BreakString(var9, var10, 50);
	if ((var8 = BreakString(var7 + var9, var11, 20)) != -1)
	{
		var7 = var8 + var7;
	}
	else
	{
		var7 = 0;
		var9 = 0;
	}
	if (StrEqual(var10, "0", true))
	{
		ReplyToCommand(_arg0, "[SM] %t", 6012);
		return 3;
	}
	new var12 = 0;
	new var13 = -1;

/* ERROR! lysis.nodes.types.DConstant cannot be cast to lysis.nodes.types.DDeclareLocal */
 function "Command_BanIp" (number 12)

public Action:Command_Unban(_arg0, _arg1)
{
	if (_arg1 < 1)
	{
		ReplyToCommand(_arg0, "[SM] Usage: sm_unban <steamid|ip>");
		return 3;
	}
	new var1 = 0;
	GetCmdArgString(var1, 50);
	ReplaceString(var1, 50, "\"", "", true);
	new var2 = 0;
	if (IsCharNumeric(var1))
	{
		var2 |= 2;
	}
	else
	{
		var2 |= 4;
	}
	LogAction(_arg0, -1, "\"%L\" removed ban (filter \"%s\")", _arg0, var1);
	RemoveBan(var1, var2, "sm_unban", _arg0);
	ReplyToCommand(_arg0, "[SM] %t", "Removed bans matching", var1);
	return 3;
}

public MenuHandler_BanPlayerList(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && hTopMenu)
			{
				TopMenu.Display(hTopMenu, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var2 = 0;
			new var3 = 0;
			new var4 = 0;

/* ERROR! lysis.nodes.types.DConstant cannot be cast to lysis.nodes.types.DDeclareLocal */
 function "MenuHandler_BanPlayerList" (number 14)

public MenuHandler_BanReasonList(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && hTopMenu)
			{
				TopMenu.Display(hTopMenu, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			if (_arg3)
			{
				new var2 = 0;
				Menu.GetItem(_arg0, _arg3, var2, 64, 0, "", 0);
				PrepareBan(_arg2, playerinfo[_arg2], playerinfo[_arg2][2], var2);
			}
			playerinfo[_arg2][3] = 1;
			PrintToChat(_arg2, "[SM] %t", "Custom ban reason explanation", "sm_abortban");
		}
	}
	return 0;
}

public MenuHandler_BanTimeList(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	else
	{
		if (_arg1 == 8)
		{
			new var1;
			if (_arg3 == -6 && hTopMenu)
			{
				TopMenu.Display(hTopMenu, _arg2, 3);
			}
		}
		if (_arg1 == 4)
		{
			new var2 = 0;
			Menu.GetItem(_arg0, _arg3, var2, 32, 0, "", 0);
			playerinfo[_arg2][2] = StringToInt(var2, 10);
			DisplayBanReasonMenu(_arg2);
		}
	}
	return 0;
}

public void:OnAdminMenuReady(Handle:_arg0)
{
	new var1;
	var1 = TopMenu.FromHandle(_arg0);
	if (hTopMenu == var1)
	{
		return 0;
	}
	hTopMenu = var1;
	new var2;
	var2 = TopMenu.FindCategory(hTopMenu, "PlayerCommands");
	if (var2)
	{
		TopMenu.AddItem(hTopMenu, "sm_ban", 17, var2, "sm_ban", 8, "");
	}
	return 0;
}

public void:OnClientDisconnect(_arg0)
{
	playerinfo[_arg0][3] = 0;
	return 0;
}

public Action:OnClientSayCommand(_arg0, String:_arg1[], String:_arg2[])
{
	if (playerinfo[_arg0][3])
	{
		playerinfo[_arg0][3] = 0;
		PrepareBan(_arg0, playerinfo[_arg0], playerinfo[_arg0][2], _arg2[0]);
		return 4;
	}
	return 0;
}

public void:OnConfigsExecuted()
{
	LoadBanReasons();
	return 0;
}

public void:OnPluginStart()
{
	BuildPath(0, g_BanReasonsPath, 256, "configs/banreasons.txt");
	LoadBanReasons();
	LoadTranslations("common.phrases");
	LoadTranslations("basebans.phrases");
	LoadTranslations("core.phrases");
	RegAdminCmd("sm_ban", 23, 8, "sm_ban <#userid|name> <minutes|0> [reason]", "", 0);
	RegAdminCmd("sm_unban", 27, 16, "sm_unban <steamid|ip>", "", 0);
	RegAdminCmd("sm_addban", 21, 4096, "sm_addban <time> <steamid> [reason]", "", 0);
	RegAdminCmd("sm_banip", 25, 8, "sm_banip <ip|#userid|name> <time> [reason]", "", 0);
	RegConsoleCmd("sm_abortban", 19, "sm_abortban", 0);
	new var2 = 0;
	new var1;
	if (LibraryExists("adminmenu") && (var2 = GetAdminTopMenu()))
	{
		OnAdminMenuReady(var2);
	}
	return 0;
}

public void:__ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.BytesLeft.get");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadInt64");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetInt64");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddInt64");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

public void:__ext_topmenus_SetNTVOptional()
{
	MarkNativeAsOptional("CreateTopMenu");
	MarkNativeAsOptional("LoadTopMenuConfig");
	MarkNativeAsOptional("AddToTopMenu");
	MarkNativeAsOptional("RemoveFromTopMenu");
	MarkNativeAsOptional("DisplayTopMenu");
	MarkNativeAsOptional("DisplayTopMenuCategory");
	MarkNativeAsOptional("FindTopMenuCategory");
	MarkNativeAsOptional("SetTopMenuTitleCaching");
	MarkNativeAsOptional("TopMenu.TopMenu");
	MarkNativeAsOptional("TopMenu.FromHandle");
	MarkNativeAsOptional("TopMenu.LoadConfig");
	MarkNativeAsOptional("TopMenu.AddCategory");
	MarkNativeAsOptional("TopMenu.AddItem");
	MarkNativeAsOptional("TopMenu.GetInfoString");
	MarkNativeAsOptional("TopMenu.GetObjName");
	MarkNativeAsOptional("TopMenu.Remove");
	MarkNativeAsOptional("TopMenu.Display");
	MarkNativeAsOptional("TopMenu.DisplayCategory");
	MarkNativeAsOptional("TopMenu.FindCategory");
	MarkNativeAsOptional("TopMenu.CacheTitles.set");
	return 0;
}

public void:__pl_adminmenu_SetNTVOptional()
{
	MarkNativeAsOptional("GetAdminTopMenu");
	MarkNativeAsOptional("AddTargetsToMenu");
	MarkNativeAsOptional("AddTargetsToMenu2");
	return 0;
}

