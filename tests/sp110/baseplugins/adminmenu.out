
/* ERROR PREPROCESSING! null */
 function "BuildDynamicMenu" (number 6)
public PlVers:__version =
{
	version = 5,
	filevers = "1.10.0.6484",
	date = "04/21/2020",
	time = "18:15:20"
};
new Float:NULL_VECTOR[3];
new String:NULL_STRING[16];
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
new MaxClients;
public Extension:__ext_topmenus =
{
	name = "TopMenus",
	file = "topmenus.ext",
	autoload = 1,
	required = 1,
};
public Plugin:myinfo =
{
	name = "Admin Menu",
	description = "Administration Menu",
	author = "AlliedModders LLC",
	version = "1.10.0.6484",
	url = "http://www.sourcemod.net/"
};
new GlobalForward:hOnAdminMenuReady;
new GlobalForward:hOnAdminMenuCreated;
new TopMenu:hAdminMenu;
new TopMenuObject:obj_playercmds;
new TopMenuObject:obj_servercmds;
new TopMenuObject:obj_votingcmds;
new <enumstruct3>:g_groupList;
new g_groupCount;
new SMCParser:g_configParser;
new String:g_command[256][264];
new <enumstruct2>:g_currentPlace[66] =
{
	264, 272, 280, 288, 296, 304, 312, 320, 328, 336, 344, 352, 360, 368, 376, 384, 392, 400, 408, 416, 424, 432, 440, 448, 456, 464, 472, 480, 488, 496, 504, 512, 520, 528, 536, 544, 552, 560, 568, 576, 584, 592, 600, 608, 616, 624, 632, 640, 648, 656, 664, 672, 680, 688, 696, 704, 712, 720, 728, 736, 744, 752, 760, 768, 776, 784
};
new ArrayList:g_DataArray;
bool:QuoteString(String:_arg0[], String:_arg1[], _arg2, String:_arg3[])
{
	new var2 = 0;
	new var3;
	var3 = strlen(_arg0[0]);
	new var4 = 0;
	while (var4 < var3)
	{
		_arg1[0][var2] = _arg0[0][var4];
		var2++;
		if (var2 >= _arg2)
		{
			_arg1[0][_arg2 + -1] = '\x00';
			return 0;
		}
		new var1;
		if (FindCharInString(_arg3[0], _arg0[0][var4], false) == -1 && _arg0[0][var4] == '\')
		{
			_arg1[0][var2] = '\';
			var2++;
			if (var2 >= _arg2)
			{
				_arg1[0][_arg2 + -1] = '\x00';
				return 0;
			}
		}
		var4++;
	}
	_arg1[0][var2] = '\x00';
	return 1;
}

bool:UnQuoteString(String:_arg0[], String:_arg1[], _arg2, String:_arg3[])
{
	new var3 = 1;
	new var4;
	var4 = strlen(_arg0[0]);
	_arg1[0] = _arg0[0];
	new var5 = 1;
	while (var5 < var4)
	{
		_arg1[0][var3] = _arg0[0][var5];
		var3++;
		new var2;
		if (_arg0[0][var5 + 1] == '\' && (_arg0[0][var5] == '\' || FindCharInString(_arg3[0], _arg0[0][var5], false) == -1))
		{
			var5++;
		}
		if (var3 >= _arg2)
		{
			_arg1[0][_arg2 + -1] = '\x00';
			return 0;
		}
		var5++;
	}
	_arg1[0][var3] = '\x00';
	return 1;
}

UTIL_AddTargetsToMenu2(Menu:_arg0, _arg1, _arg2)
{
	new var8 = 0;
	new var9 = 0;
	new var10 = 0;
	new var11 = 0;
	new var12 = 1;
	while (var12 <= MaxClients)
	{
		new var1;
		if (IsClientConnected(var12) && IsClientInKickQueue(var12))
		{
		}
		else
		{
			new var2;
			if (!(_arg2 & 32 == 32 && IsFakeClient(var12)))
			{
				new var3;
				if (!(_arg2 & 4 != 4 && IsClientInGame(var12)))
				{
					new var4;
					if (!(_arg2 & 1 == 1 && IsPlayerAlive(var12)))
					{
						new var5;
						if (!(_arg2 & 2 == 2 && IsPlayerAlive(var12)))
						{
							new var6;
							if (!((_arg1 && _arg2 & 8 != 8) && CanUserTarget(_arg1, var12)))
							{
								IntToString(GetClientUserId(var12), var8, 12);
								GetClientName(var12, var9, 128);
								Format(var10, 140, "%s (%s)", var9, var8);
								Menu.AddItem(_arg0, var8, var10, 0);
								var11++;
							}
						}
					}
				}
			}
		}
		var12++;
	}
	return var11;
}

UTIL_AddTargetsToMenu(Menu:_arg0, _arg1, bool:_arg2, bool:_arg3)
{
	new var1 = 0;
	if (!_arg2)
	{
		var1 |= 4;
	}
	if (_arg3)
	{
		var1 |= 1;
	}
	return UTIL_AddTargetsToMenu2(_arg0, _arg1, var1);
}

bool:StrEqual(String:_arg0[], String:_arg1[], bool:_arg2)
{
	return strcmp(_arg0[0], _arg1[0], _arg2) == 0;
}

FindCharInString(String:_arg0[], String:_arg1, bool:_arg2)
{
	new var1;
	var1 = strlen(_arg0[0]);
	if (_arg2)
	{
		new var3;
		var3 = var1 + -1;
		while (0 <= var3)
		{
			if (_arg1 == _arg0[0][var3])
			{
				return var3;
			}
			var3--;
		}
	}
	else
	{
		new var2 = 0;
		while (var2 < var1)
		{
			if (_arg1 == _arg0[0][var2])
			{
				return var2;
			}
			var2++;
		}
	}
	return -1;
}


/* ERROR! null */
 function "BuildDynamicMenu" (number 6)

void:ParseConfigs()
{
	if (!g_configParser)
	{
		g_configParser = SMCParser.SMCParser();
	}
	SMCParser.OnEnterSection.set(g_configParser, 33);
	SMCParser.OnKeyValue.set(g_configParser, 29);
	SMCParser.OnLeaveSection.set(g_configParser, 27);
	new var1 = g_groupList;
	CloseHandle(var1);
	var1 = 0;
	new var2 = g_groupList + 4;
	CloseHandle(var2);
	var2 = 0;
	g_groupList = ArrayList.ArrayList(32, 0);
	g_groupList + 4/* ERROR unknown load Binary */ = ArrayList.ArrayList(32, 0);
	new var3 = 0;
	BuildPath(0, var3, 256, "configs/dynamicmenu/adminmenu_grouping.txt");
	if (FileExists(var3, false, "GAME"))
	{
		LogError("Warning! configs/dynamicmenu/adminmenu_grouping.txt is now configs/adminmenu_grouping.txt.");
		LogError("Read the 1.0.2 release notes, as the dynamicmenu folder has been removed.");
	}
	else
	{
		BuildPath(0, var3, 256, "configs/adminmenu_grouping.txt");
	}
	if (FileExists(var3, false, "GAME"))
	{
		new var4 = 0;
		new var5;
		var5 = SMCParser.ParseFile(g_configParser, var3, var4, 0);
		if (var5)
		{
			new var6 = 0;
			SMC_GetErrorString(var5, var6, 256);
			LogError("Could not parse file (line %d, file \"%s\"):", var4, var3);
			LogError("Parser encountered error: %s", var6);
		}
		return 0;
	}
	LogError("Unable to locate admin menu groups file: %s", var3);
	return 0;
}

public APLRes:AskPluginLoad2(Handle:_arg0, bool:_arg1, String:_arg2[], _arg3)
{
	CreateNative("GetAdminTopMenu", 49);
	CreateNative("AddTargetsToMenu", 45);
	CreateNative("AddTargetsToMenu2", 47);
	RegPluginLibrary("adminmenu");
	return 0;
}

public Action:Command_DisplayMenu(_arg0, _arg1)
{
	if (_arg0)
	{
		TopMenu.Display(hAdminMenu, _arg0, 0);
		return 3;
	}
	ReplyToCommand(_arg0, "[SM] %t", 22136);
	return 3;
}

public void:DefaultCategoryHandler(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	if (_arg1 == 1)
	{
		if (_arg2)
		{
			if (obj_playercmds == _arg2)
			{
				Format(_arg4[0], _arg5, "%T:", "Player Commands", _arg3);
			}
			if (obj_servercmds == _arg2)
			{
				Format(_arg4[0], _arg5, "%T:", "Server Commands", _arg3);
			}
			if (obj_votingcmds == _arg2)
			{
				Format(_arg4[0], _arg5, "%T:", "Voting Commands", _arg3);
			}
		}
		else
		{
			Format(_arg4[0], _arg5, "%T:", "Admin Menu", _arg3);
		}
	}
	else
	{
		if (!_arg1)
		{
			if (obj_playercmds == _arg2)
			{
				Format(_arg4[0], _arg5, "%T", "Player Commands", _arg3);
			}
			if (obj_servercmds == _arg2)
			{
				Format(_arg4[0], _arg5, "%T", "Server Commands", _arg3);
			}
			if (obj_votingcmds == _arg2)
			{
				Format(_arg4[0], _arg5, "%T", "Voting Commands", _arg3);
			}
		}
	}
	return 0;
}

public void:DynamicMenuCategoryHandler(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	new var1;
	if (_arg1 == 1 || _arg1)
	{
		TopMenu.GetObjName(_arg0, _arg2, _arg4[0], _arg5);
	}
	return 0;
}

public void:DynamicMenuItemHandler(TopMenu:_arg0, TopMenuAction:_arg1, TopMenuObject:_arg2, _arg3, String:_arg4[], _arg5)
{
	if (_arg1)
	{
		if (_arg1 == 2)
		{
			new var1 = 0;
			TopMenu.GetInfoString(_arg0, _arg2, var1, 10);
			new var2;
			var2 = StringToInt(var1, 10);
			new var3 = 0;
			ArrayList.GetArray(g_DataArray, var2, var3, -1);
			strcopy(g_command[_arg3], 255, var3);
			g_currentPlace[_arg3][1] = var2;
			g_currentPlace[_arg3][2] = 1;
			ParamCheck(_arg3);
		}
	}
	else
	{
		TopMenu.GetObjName(_arg0, _arg2, _arg4[0], _arg5);
	}
	return 0;
}

public SMCResult:EndSection(SMCParser:_arg0)
{
	g_groupCount = ArrayList.Length.get(g_groupList);
	return 0;
}

public SMCResult:KeyValue(SMCParser:_arg0, String:_arg1[], String:_arg2[], bool:_arg3, bool:_arg4)
{
	ArrayList.PushString(g_groupList, _arg1[0]);
	ArrayList.PushString(g_groupList + 4/* ERROR unknown load Binary */, _arg2[0]);
	return 0;
}

public Menu_Selection(Menu:_arg0, MenuAction:_arg1, _arg2, _arg3)
{
	if (_arg1 == 16)
	{
		CloseHandle(_arg0);
		_arg0 = 0;
	}
	if (_arg1 == 4)
	{
		new var2 = 0;
		new var3;
		var3 = Menu.GetItem(_arg0, _arg3, var2, 64, 0, "", 0);
		if (var3)
		{
			new var4 = 0;
			QuoteString(var2, var4, 129, "#@");
			new var5 = 0;
			new var6 = 0;
			Format(var6, 66, "\"%s\"", var4);
			Format(var5, 5, "#%i", g_currentPlace[_arg2][2]);
			ReplaceString(g_command[_arg2], 255, var5, var6, true);
			Format(var5, 5, "@%i", g_currentPlace[_arg2][2]);
			ReplaceString(g_command[_arg2], 255, var5, var4, true);
			g_currentPlace[_arg2][2]++;
			ParamCheck(_arg2);
		}
		return 0;
	}
	new var1;
	if (_arg1 == 8 && _arg3 == -6)
	{
		TopMenu.Display(hAdminMenu, _arg2, 3);
	}
	return 0;
}

public SMCResult:NewSection(SMCParser:_arg0, String:_arg1[], bool:_arg2)
{
	return 0;
}

public void:OnAllPluginsLoaded()
{
	hAdminMenu = TopMenu.TopMenu(21);
	obj_playercmds = TopMenu.AddCategory(hAdminMenu, "PlayerCommands", 21, "", 0, "");
	obj_servercmds = TopMenu.AddCategory(hAdminMenu, "ServerCommands", 21, "", 0, "");
	obj_votingcmds = TopMenu.AddCategory(hAdminMenu, "VotingCommands", 21, "", 0, "");
	BuildDynamicMenu();
	Call_StartForward(hOnAdminMenuCreated);
	Call_PushCell(hAdminMenu);
	Call_Finish(0);
	Call_StartForward(hOnAdminMenuReady);
	Call_PushCell(hAdminMenu);
	Call_Finish(0);
	return 0;
}

public void:OnConfigsExecuted()
{
	new var1 = 0;
	new var2 = 0;
	BuildPath(0, var1, 256, "configs/adminmenu_sorting.txt");
	if (TopMenu.LoadConfig(hAdminMenu, var1, var2, 256))
	{
		return 0;
	}
	LogError("Could not load admin menu config (file \"%s\": %s)", var1, var2);
	return 0;
}

public void:OnMapStart()
{
	ParseConfigs();
	return 0;
}

public void:OnPluginStart()
{
	LoadTranslations("common.phrases");
	LoadTranslations("adminmenu.phrases");
	hOnAdminMenuCreated = GlobalForward.GlobalForward("OnAdminMenuCreated", 0, 2);
	hOnAdminMenuReady = GlobalForward.GlobalForward("OnAdminMenuReady", 0, 2);
	RegAdminCmd("sm_admin", 19, 2, "Displays the admin menu", "", 0);
	return 0;
}

public void:ParamCheck(_arg0)
{
	new var5 = 0;
	new var6 = 0;
	new var7 = 0;
	new var8 = 0;
	ArrayList.GetArray(g_DataArray, g_currentPlace[_arg0][1], var7, -1);
	if (g_currentPlace[_arg0][2] < 1)
	{
		g_currentPlace[_arg0][2] = 1;
	}
	Format(var5, 5, "#%i", g_currentPlace[_arg0][2]);
	Format(var6, 5, "@%i", g_currentPlace[_arg0][2]);
	new var1;
	if (StrContains(g_command[_arg0], var5, true) == -1 && StrContains(g_command[_arg0], var6, true) == -1)
	{
		ArrayList.GetArray(var7 + 260/* ERROR unknown load Binary */, g_currentPlace[_arg0][2][0], var8, -1);
		new var9;
		var9 = Menu.Menu(31, 28);
		Menu.ExitBackButton.set(var9, true);
		new var2;
		if (var8[0][0] && var8[0][0] == 1)
		{
			new var10 = var11;
			new var11 = "1.10.0.6484";
			new var12 = var13;
			new var13 = "1.10.0.6484";
			new var14 = 0;
			while (var14 < g_groupCount)
			{
				ArrayList.GetString(g_groupList, var14, var10, 32);
				ArrayList.GetString(g_groupList + 4/* ERROR unknown load Binary */, var14, var12, 32);
				Menu.AddItem(var9, var12, var10, 0);
				var14++;
			}
		}
		if (var8[0][0] == 3)
		{
			new var15 = var16;
			new var16 = "1.10.0.6484";
			DataPack.ReadString(var8[11][0], var15, 200);
			DataPack.Reset(var8[11][0], false);
			new var17;
			var17 = OpenFile(var15, "rt", false, "GAME");
			new var18 = 0;
			if (var17)
			{
				while (File.EndOfFile(var17) && File.ReadLine(var17, var18, 128))
				{
					TrimString(var18);
					if (IsMapValid(var18))
					{
						Menu.AddItem(var9, var18, var18, 0);
					}
				}
			}
		}
		else
		{
			new var4;
			if (var8[0][0] == 2 || var8[0][0] == 1)
			{
				new var19;
				var19 = var8[9][0];
				new var20 = 0;
				new var21 = 0;
				new var22 = 0;
				new var23 = 1;
				while (var23 <= MaxClients)
				{
					if (IsClientInGame(var23))
					{
						GetClientName(var23, var20, 128);
						switch (var19)
						{
							case 1:
							{
								new var25;
								var25 = GetClientUserId(var23);
								Format(var21, 32, "#%i", var25);
								Menu.AddItem(var9, var21, var20, 0);
							}
							case 2:
							{
								Menu.AddItem(var9, var20, var20, 0);
							}
							case 3:
							{
								if (GetClientAuthId(var23, 1, var21, 32, true))
								{
									Menu.AddItem(var9, var21, var20, 0);
								}
							}
							case 4:
							{
								GetClientIP(var23, var21, 32, true);
								Menu.AddItem(var9, var21, var20, 0);
							}
							case 5:
							{
								new var24;
								var24 = GetClientUserId(var23);
								Format(var21, 32, "%i", var24);
								Menu.AddItem(var9, var21, var20, 0);
							}
							default:
							{
								Format(var22, 3, "%i", var23);
								Menu.AddItem(var9, var22, var20, 0);
							}
						}
					}
					var23++;
				}
			}
			if (var8[0][0] == 5)
			{
				Menu.AddItem(var9, "1", "On", 0);
				Menu.AddItem(var9, "0", "Off", 0);
			}
			new var26 = var27;
			new var27 = "1.10.0.6484";
			new var28 = var29;
			new var29 = "1.10.0.6484";
			new var30 = var31;
			new var31 = "1.10.0.6484";
			new var32 = 0;
			while (var8[10][0] > var32)
			{
				DataPack.ReadString(var8[11][0], var26, 64);
				DataPack.ReadString(var8[11][0], var28, 64);
				DataPack.ReadString(var8[11][0], var30, 64);
				if (CheckCommandAccess(_arg0, var30, 0, false))
				{
					Menu.AddItem(var9, var26, var28, 0);
				}
				var32++;
			}
			DataPack.Reset(var8[11][0], false);
		}
		Menu.SetTitle(var9, var8[1]);
		Menu.Display(var9, _arg0, 0);
	}
	else
	{
		TopMenu.Display(hAdminMenu, _arg0, 3);
		new var33 = 0;
		UnQuoteString(g_command[_arg0], var33, 255, "#@");
		if (var7 + 256/* ERROR unknown load Binary */)
		{
			InsertServerCommand(var33);
			ServerExecute();
		}
		else
		{
			FakeClientCommand(_arg0, var33);
		}
		g_command[_arg0][0] = '\x00';
		g_currentPlace[_arg0][2] = 1;
	}
	return 0;
}

public __AddTargetsToMenu(Handle:_arg0, _arg1)
{
	new var1 = 0;
	if (_arg1 >= 4)
	{
		var1 = GetNativeCell(4);
	}
	return UTIL_AddTargetsToMenu(GetNativeCell(1), GetNativeCell(2), GetNativeCell(3), var1);
}

public __AddTargetsToMenu2(Handle:_arg0, _arg1)
{
	return UTIL_AddTargetsToMenu2(GetNativeCell(1), GetNativeCell(2), GetNativeCell(3));
}

public any:__GetAdminTopMenu(Handle:_arg0, _arg1)
{
	return hAdminMenu;
}

public void:__ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.BytesLeft.get");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadInt64");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetInt64");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddInt64");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

