new MaxClients;
new NULL_STRING;
new NULL_VECTOR;
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
public PlVers:__version =
{
	version = 5,
	filevers = "1.10.0.6484",
	date = "04/21/2020",
	time = "18:15:14"
};
public Plugin:myinfo =
{
	name = "Reserved Slots",
	description = "Provides basic reserved slots",
	author = "AlliedModders LLC",
	version = "1.10.0.6484",
	url = "http://www.sourcemod.net/"
};
new g_vara78;
new g_vara74;
new g_vara7c;
new g_vara88;
new g_var968;
new g_vara80;
new g_vara84;
void:CheckHiddenSlots()
{
	if (ConVar.BoolValue.get(g_vara78))
	{
		SetVisibleMaxSlots(GetClientCount(false), GetMaxHumanPlayers() - ConVar.IntValue.get(g_vara74));
	}
	return 0;
}

void:SetVisibleMaxSlots(_arg0, _arg1)
{
	new var1;
	var1 = _arg0;
	if (GetMaxHumanPlayers() == _arg0)
	{
		var1 = GetMaxHumanPlayers();
	}
	else
	{
		if (_arg0 < _arg1)
		{
			var1 = _arg1;
		}
	}
	ConVar.IntValue.set(g_vara7c, var1);
	return 0;
}

void:ResetVisibleMax()
{
	ConVar.IntValue.set(g_vara7c, -1);
	return 0;
}

SelectKickClient()
{
	new var2;
	var2 = ConVar.IntValue.get(g_vara88);
	new var3 = 0;
	new var4 = 0;
	new var5 = 0;
	new var6 = 0;
	new var7 = 0;
	new var8 = 0;
	new var9 = 1;
	while (var9 <= MaxClients)
	{
		if (IsClientConnected(var9))
		{
			new var10;
			var10 = GetUserFlagBits(var9);
			new var1;
			if (!(IsFakeClient(var9) || var10 & 16384 || var10 & 1 || CheckCommandAccess(var9, "sm_reskick_immunity", 1, true)))
			{
				var8 = 0;
				if (IsClientInGame(var9))
				{
					if (var2)
					{
						if (var2 == 1)
						{
							var8 = GetClientTime(var9);
						}
						var8 = GetRandomFloat(0.0, 100.0);
					}
					else
					{
						var8 = GetClientAvgLatency(var9, 0);
					}
					if (IsClientObserver(var9))
					{
						var7 = 1;
						if (var8 > var5)
						{
							var5 = var8;
							var6 = var9;
						}
					}
				}
				if (var8 >= var3)
				{
					var3 = var8;
					var4 = var9;
				}
			}
		}
		var9++;
	}
	if (var7)
	{
		return var6;
	}
	return var4;
}

public void:OnClientDisconnect_Post(_arg0)
{
	CheckHiddenSlots();
	if (2412[_arg0])
	{
		g_var968 -= 1;
		2412[_arg0] = 0;
	}
	return 0;
}

public void:OnClientPostAdminCheck(_arg0)
{
	new var5;
	var5 = ConVar.IntValue.get(g_vara74);
	if (0 < var5)
	{
		new var6;
		var6 = GetClientCount(false);
		new var7;
		var7 = GetMaxHumanPlayers() - var5;
		new var8;
		var8 = GetUserFlagBits(_arg0);
		new var9;
		var9 = ConVar.IntValue.get(g_vara80);
		if (var9)
		{
			if (var9 == 1)
			{
				if (var6 > var7)
				{
					new var2;
					if (var8 & 16384 || var8 & 1)
					{
						new var10;
						var10 = SelectKickClient();
						if (var10)
						{
							CreateTimer(0.1, 21, var10, 0);
						}
					}
					CreateTimer(0.1, 21, _arg0, 0);
				}
			}
			if (var9 == 2)
			{
				new var3;
				if (var8 & 16384 || var8 & 1)
				{
					g_var968 += 1;
					2412[_arg0] = 1;
				}
				new var4;
				if (var6 > var7 && g_var968 < ConVar.IntValue.get(g_vara84))
				{
					if (2412[_arg0])
					{
						new var11;
						var11 = SelectKickClient();
						if (var11)
						{
							CreateTimer(0.1, 21, var11, 0);
						}
					}
					CreateTimer(0.1, 21, _arg0, 0);
				}
			}
		}
		else
		{
			new var1;
			if (var6 <= var7 || IsFakeClient(_arg0) || var8 & 16384 || var8 & 1)
			{
				if (ConVar.BoolValue.get(g_vara78))
				{
					SetVisibleMaxSlots(var6, var7);
				}
				return 0;
			}
			CreateTimer(0.1, 21, _arg0, 0);
		}
	}
	return 0;
}

public void:OnConfigsExecuted()
{
	CheckHiddenSlots();
	return 0;
}

public void:OnMapStart()
{
	CheckHiddenSlots();
	return 0;
}

public void:OnPluginEnd()
{
	ResetVisibleMax();
	return 0;
}

public void:OnPluginStart()
{
	LoadTranslations("reservedslots.phrases");
	g_vara74 = CreateConVar("sm_reserved_slots", "0", "Number of reserved player slots", 0, true, 0.0, false, 0.0);
	g_vara78 = CreateConVar("sm_hide_slots", "0", "If set to 1, reserved slots will hidden (subtracted from the max slot count)", 0, true, 0.0, true, 1.0);
	g_vara7c = FindConVar("sv_visiblemaxplayers");
	g_vara80 = CreateConVar("sm_reserve_type", "0", "Method of reserving slots", 0, true, 0.0, true, 2.0);
	g_vara84 = CreateConVar("sm_reserve_maxadmins", "1", "Maximum amount of admins to let in the server with reserve type 2", 0, true, 0.0, false, 0.0);
	g_vara88 = CreateConVar("sm_reserve_kicktype", "0", "How to select a client to kick (if appropriate)", 0, true, 0.0, true, 2.0);
	ConVar.AddChangeHook(g_vara74, 23);
	ConVar.AddChangeHook(g_vara78, 25);
	return 0;
}

public Action:OnTimedKick(Handle:_arg0, any:_arg1)
{
	new var1;
	if (_arg1 && IsClientInGame(_arg1))
	{
		return 3;
	}
	KickClient(_arg1, "%T", "Slot reserved", _arg1);
	CheckHiddenSlots();
	return 3;
}

public void:SlotCountChanged(ConVar:_arg0, String:_arg1[], String:_arg2[])
{
	new var1;
	var1 = ConVar.IntValue.get(_arg0);
	if (var1)
	{
		if (ConVar.BoolValue.get(g_vara78))
		{
			SetVisibleMaxSlots(GetClientCount(false), GetMaxHumanPlayers() - var1);
		}
	}
	else
	{
		ResetVisibleMax();
	}
	return 0;
}

public void:SlotHideChanged(ConVar:_arg0, String:_arg1[], String:_arg2[])
{
	if (ConVar.BoolValue.get(_arg0))
	{
		SetVisibleMaxSlots(GetClientCount(false), GetMaxHumanPlayers() - ConVar.IntValue.get(g_vara74));
	}
	else
	{
		ResetVisibleMax();
	}
	return 0;
}

public void:__ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.BytesLeft.get");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadInt64");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetInt64");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddInt64");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

